
F1_Queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004530  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  08004640  08004640  00005640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004820  08004820  00006060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004820  08004820  00005820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004828  08004828  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004828  08004828  00005828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800482c  0800482c  0000582c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004830  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011bc  20000060  08004890  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000121c  08004890  0000621c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb54  00000000  00000000  00006089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000292c  00000000  00000000  00015bdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  00018510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c0b  00000000  00000000  00019488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f71  00000000  00000000  0001a093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001221e  00000000  00000000  00033004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008feb1  00000000  00000000  00045222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d50d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044d4  00000000  00000000  000d5118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  000d95ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08004628 	.word	0x08004628

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08004628 	.word	0x08004628

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	4a06      	ldr	r2, [pc, #24]	@ (8000188 <vApplicationGetIdleTaskMemory+0x28>)
 8000170:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000172:	68bb      	ldr	r3, [r7, #8]
 8000174:	4a05      	ldr	r2, [pc, #20]	@ (800018c <vApplicationGetIdleTaskMemory+0x2c>)
 8000176:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2280      	movs	r2, #128	@ 0x80
 800017c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800017e:	bf00      	nop
 8000180:	3714      	adds	r7, #20
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	2000007c 	.word	0x2000007c
 800018c:	200000d0 	.word	0x200000d0

08000190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b084      	sub	sp, #16
 8000194:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000196:	f000 fb8d 	bl	80008b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800019a:	f000 f867 	bl	800026c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800019e:	f000 f8cb 	bl	8000338 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001a2:	f000 f89f 	bl	80002e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  //se crea la Queue
  St_Queue_Handler = xQueueCreate(2,sizeof(my_struct)); /*puede guardar dos elementos del tamaño
 80001a6:	2200      	movs	r2, #0
 80001a8:	210c      	movs	r1, #12
 80001aa:	2002      	movs	r0, #2
 80001ac:	f001 ffbc 	bl	8002128 <xQueueGenericCreate>
 80001b0:	4603      	mov	r3, r0
 80001b2:	4a21      	ldr	r2, [pc, #132]	@ (8000238 <main+0xa8>)
 80001b4:	6013      	str	r3, [r2, #0]
  de la estructura */

  if(St_Queue_Handler==0){
 80001b6:	4b20      	ldr	r3, [pc, #128]	@ (8000238 <main+0xa8>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d10d      	bne.n	80001da <main+0x4a>
	  char *str= "Unable to create Structure Queue\n\n";
 80001be:	4b1f      	ldr	r3, [pc, #124]	@ (800023c <main+0xac>)
 80001c0:	603b      	str	r3, [r7, #0]
	  HAL_UART_Transmit(&huart1,(uint8_t *)str,strlen(str),HAL_MAX_DELAY);
 80001c2:	6838      	ldr	r0, [r7, #0]
 80001c4:	f7ff ffc4 	bl	8000150 <strlen>
 80001c8:	4603      	mov	r3, r0
 80001ca:	b29a      	uxth	r2, r3
 80001cc:	f04f 33ff 	mov.w	r3, #4294967295
 80001d0:	6839      	ldr	r1, [r7, #0]
 80001d2:	481b      	ldr	r0, [pc, #108]	@ (8000240 <main+0xb0>)
 80001d4:	f001 fcba 	bl	8001b4c <HAL_UART_Transmit>
 80001d8:	e00c      	b.n	80001f4 <main+0x64>
  }else{
	  char *str= "Structure created\n\n";
 80001da:	4b1a      	ldr	r3, [pc, #104]	@ (8000244 <main+0xb4>)
 80001dc:	607b      	str	r3, [r7, #4]
	  HAL_UART_Transmit(&huart1,(uint8_t *)str,strlen(str),HAL_MAX_DELAY);
 80001de:	6878      	ldr	r0, [r7, #4]
 80001e0:	f7ff ffb6 	bl	8000150 <strlen>
 80001e4:	4603      	mov	r3, r0
 80001e6:	b29a      	uxth	r2, r3
 80001e8:	f04f 33ff 	mov.w	r3, #4294967295
 80001ec:	6879      	ldr	r1, [r7, #4]
 80001ee:	4814      	ldr	r0, [pc, #80]	@ (8000240 <main+0xb0>)
 80001f0:	f001 fcac 	bl	8001b4c <HAL_UART_Transmit>
  }


  /**Se crea la tarea***/
  //función de la tarea, nombre de la tarea,stack depth, parámetro, prioridad y handler
  xTaskCreate(Sender1_Task,"Sender1",128,NULL,2,&Sender1_Task_Handler);
 80001f4:	4b14      	ldr	r3, [pc, #80]	@ (8000248 <main+0xb8>)
 80001f6:	9301      	str	r3, [sp, #4]
 80001f8:	2302      	movs	r3, #2
 80001fa:	9300      	str	r3, [sp, #0]
 80001fc:	2300      	movs	r3, #0
 80001fe:	2280      	movs	r2, #128	@ 0x80
 8000200:	4912      	ldr	r1, [pc, #72]	@ (800024c <main+0xbc>)
 8000202:	4813      	ldr	r0, [pc, #76]	@ (8000250 <main+0xc0>)
 8000204:	f002 fb3e 	bl	8002884 <xTaskCreate>
  xTaskCreate(Sender2_Task,"Sender2",128,NULL,2,&Sender2_Task_Handler);
 8000208:	4b12      	ldr	r3, [pc, #72]	@ (8000254 <main+0xc4>)
 800020a:	9301      	str	r3, [sp, #4]
 800020c:	2302      	movs	r3, #2
 800020e:	9300      	str	r3, [sp, #0]
 8000210:	2300      	movs	r3, #0
 8000212:	2280      	movs	r2, #128	@ 0x80
 8000214:	4910      	ldr	r1, [pc, #64]	@ (8000258 <main+0xc8>)
 8000216:	4811      	ldr	r0, [pc, #68]	@ (800025c <main+0xcc>)
 8000218:	f002 fb34 	bl	8002884 <xTaskCreate>
  xTaskCreate(Receiver_Task,"Receiver",128,NULL,1,&Receiver_Task_Handler);
 800021c:	4b10      	ldr	r3, [pc, #64]	@ (8000260 <main+0xd0>)
 800021e:	9301      	str	r3, [sp, #4]
 8000220:	2301      	movs	r3, #1
 8000222:	9300      	str	r3, [sp, #0]
 8000224:	2300      	movs	r3, #0
 8000226:	2280      	movs	r2, #128	@ 0x80
 8000228:	490e      	ldr	r1, [pc, #56]	@ (8000264 <main+0xd4>)
 800022a:	480f      	ldr	r0, [pc, #60]	@ (8000268 <main+0xd8>)
 800022c:	f002 fb2a 	bl	8002884 <xTaskCreate>

  //scheduler
  vTaskStartScheduler();
 8000230:	f002 fc96 	bl	8002b60 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000234:	bf00      	nop
 8000236:	e7fd      	b.n	8000234 <main+0xa4>
 8000238:	20000318 	.word	0x20000318
 800023c:	08004640 	.word	0x08004640
 8000240:	200002d0 	.word	0x200002d0
 8000244:	08004664 	.word	0x08004664
 8000248:	2000031c 	.word	0x2000031c
 800024c:	08004678 	.word	0x08004678
 8000250:	08000365 	.word	0x08000365
 8000254:	20000320 	.word	0x20000320
 8000258:	08004680 	.word	0x08004680
 800025c:	08000429 	.word	0x08000429
 8000260:	20000324 	.word	0x20000324
 8000264:	08004688 	.word	0x08004688
 8000268:	080004ed 	.word	0x080004ed

0800026c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b090      	sub	sp, #64	@ 0x40
 8000270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000272:	f107 0318 	add.w	r3, r7, #24
 8000276:	2228      	movs	r2, #40	@ 0x28
 8000278:	2100      	movs	r1, #0
 800027a:	4618      	mov	r0, r3
 800027c:	f003 fd46 	bl	8003d0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000280:	1d3b      	adds	r3, r7, #4
 8000282:	2200      	movs	r2, #0
 8000284:	601a      	str	r2, [r3, #0]
 8000286:	605a      	str	r2, [r3, #4]
 8000288:	609a      	str	r2, [r3, #8]
 800028a:	60da      	str	r2, [r3, #12]
 800028c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800028e:	2302      	movs	r3, #2
 8000290:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000292:	2301      	movs	r3, #1
 8000294:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000296:	2310      	movs	r3, #16
 8000298:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800029a:	2300      	movs	r3, #0
 800029c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029e:	f107 0318 	add.w	r3, r7, #24
 80002a2:	4618      	mov	r0, r3
 80002a4:	f000 fd94 	bl	8000dd0 <HAL_RCC_OscConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002ae:	f000 f97f 	bl	80005b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b2:	230f      	movs	r3, #15
 80002b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002b6:	2300      	movs	r3, #0
 80002b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002be:	2300      	movs	r3, #0
 80002c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f001 f802 	bl	80012d4 <HAL_RCC_ClockConfig>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002d6:	f000 f96b 	bl	80005b0 <Error_Handler>
  }
}
 80002da:	bf00      	nop
 80002dc:	3740      	adds	r7, #64	@ 0x40
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
	...

080002e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002e8:	4b11      	ldr	r3, [pc, #68]	@ (8000330 <MX_USART1_UART_Init+0x4c>)
 80002ea:	4a12      	ldr	r2, [pc, #72]	@ (8000334 <MX_USART1_UART_Init+0x50>)
 80002ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002ee:	4b10      	ldr	r3, [pc, #64]	@ (8000330 <MX_USART1_UART_Init+0x4c>)
 80002f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000330 <MX_USART1_UART_Init+0x4c>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000330 <MX_USART1_UART_Init+0x4c>)
 80002fe:	2200      	movs	r2, #0
 8000300:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000302:	4b0b      	ldr	r3, [pc, #44]	@ (8000330 <MX_USART1_UART_Init+0x4c>)
 8000304:	2200      	movs	r2, #0
 8000306:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000308:	4b09      	ldr	r3, [pc, #36]	@ (8000330 <MX_USART1_UART_Init+0x4c>)
 800030a:	220c      	movs	r2, #12
 800030c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800030e:	4b08      	ldr	r3, [pc, #32]	@ (8000330 <MX_USART1_UART_Init+0x4c>)
 8000310:	2200      	movs	r2, #0
 8000312:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000314:	4b06      	ldr	r3, [pc, #24]	@ (8000330 <MX_USART1_UART_Init+0x4c>)
 8000316:	2200      	movs	r2, #0
 8000318:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800031a:	4805      	ldr	r0, [pc, #20]	@ (8000330 <MX_USART1_UART_Init+0x4c>)
 800031c:	f001 fbc6 	bl	8001aac <HAL_UART_Init>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000326:	f000 f943 	bl	80005b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800032a:	bf00      	nop
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	200002d0 	.word	0x200002d0
 8000334:	40013800 	.word	0x40013800

08000338 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800033e:	4b08      	ldr	r3, [pc, #32]	@ (8000360 <MX_GPIO_Init+0x28>)
 8000340:	699b      	ldr	r3, [r3, #24]
 8000342:	4a07      	ldr	r2, [pc, #28]	@ (8000360 <MX_GPIO_Init+0x28>)
 8000344:	f043 0304 	orr.w	r3, r3, #4
 8000348:	6193      	str	r3, [r2, #24]
 800034a:	4b05      	ldr	r3, [pc, #20]	@ (8000360 <MX_GPIO_Init+0x28>)
 800034c:	699b      	ldr	r3, [r3, #24]
 800034e:	f003 0304 	and.w	r3, r3, #4
 8000352:	607b      	str	r3, [r7, #4]
 8000354:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000356:	bf00      	nop
 8000358:	370c      	adds	r7, #12
 800035a:	46bd      	mov	sp, r7
 800035c:	bc80      	pop	{r7}
 800035e:	4770      	bx	lr
 8000360:	40021000 	.word	0x40021000

08000364 <Sender1_Task>:

/* USER CODE BEGIN 4 */

void Sender1_Task(void *argument){
 8000364:	b580      	push	{r7, lr}
 8000366:	b086      	sub	sp, #24
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
	my_struct *ptrtostruct;
	uint32_t TickDelay=pdMS_TO_TICKS(2000);
 800036c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000370:	617b      	str	r3, [r7, #20]
	while(1){
		char *str= "Entered SENDER1_Task\n";
 8000372:	4b27      	ldr	r3, [pc, #156]	@ (8000410 <Sender1_Task+0xac>)
 8000374:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),HAL_MAX_DELAY);
 8000376:	6938      	ldr	r0, [r7, #16]
 8000378:	f7ff feea 	bl	8000150 <strlen>
 800037c:	4603      	mov	r3, r0
 800037e:	b29a      	uxth	r2, r3
 8000380:	f04f 33ff 	mov.w	r3, #4294967295
 8000384:	6939      	ldr	r1, [r7, #16]
 8000386:	4823      	ldr	r0, [pc, #140]	@ (8000414 <Sender1_Task+0xb0>)
 8000388:	f001 fbe0 	bl	8001b4c <HAL_UART_Transmit>

		//Allocate memory to the pointer
		ptrtostruct = pvPortMalloc(sizeof(my_struct));
 800038c:	200c      	movs	r0, #12
 800038e:	f003 faaf 	bl	80038f0 <pvPortMalloc>
 8000392:	4603      	mov	r3, r0
 8000394:	60bb      	str	r3, [r7, #8]

		//cargar los datos a la estructura
		ptrtostruct->counter=1+indx1;
 8000396:	4b20      	ldr	r3, [pc, #128]	@ (8000418 <Sender1_Task+0xb4>)
 8000398:	681a      	ldr	r2, [r3, #0]
 800039a:	68bb      	ldr	r3, [r7, #8]
 800039c:	3201      	adds	r2, #1
 800039e:	605a      	str	r2, [r3, #4]
		ptrtostruct->large_value=1000+indx1*100;
 80003a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000418 <Sender1_Task+0xb4>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	b29b      	uxth	r3, r3
 80003a6:	461a      	mov	r2, r3
 80003a8:	0092      	lsls	r2, r2, #2
 80003aa:	4413      	add	r3, r2
 80003ac:	461a      	mov	r2, r3
 80003ae:	0091      	lsls	r1, r2, #2
 80003b0:	461a      	mov	r2, r3
 80003b2:	460b      	mov	r3, r1
 80003b4:	4413      	add	r3, r2
 80003b6:	009b      	lsls	r3, r3, #2
 80003b8:	b29a      	uxth	r2, r3
 80003ba:	68bb      	ldr	r3, [r7, #8]
 80003bc:	f502 727a 	add.w	r2, r2, #1000	@ 0x3e8
 80003c0:	b292      	uxth	r2, r2
 80003c2:	811a      	strh	r2, [r3, #8]
		ptrtostruct->str="Hello from sender1";
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	4a15      	ldr	r2, [pc, #84]	@ (800041c <Sender1_Task+0xb8>)
 80003c8:	601a      	str	r2, [r3, #0]

		//enviar a la queue
		if(xQueueSend(St_Queue_Handler,&ptrtostruct,portMAX_DELAY)==pdPASS){
 80003ca:	4b15      	ldr	r3, [pc, #84]	@ (8000420 <Sender1_Task+0xbc>)
 80003cc:	6818      	ldr	r0, [r3, #0]
 80003ce:	f107 0108 	add.w	r1, r7, #8
 80003d2:	2300      	movs	r3, #0
 80003d4:	f04f 32ff 	mov.w	r2, #4294967295
 80003d8:	f001 ff00 	bl	80021dc <xQueueGenericSend>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b01      	cmp	r3, #1
 80003e0:	d10c      	bne.n	80003fc <Sender1_Task+0x98>
			char *str2= "Enviado a la queue con éxito, terminando Sender1_Task";
 80003e2:	4b10      	ldr	r3, [pc, #64]	@ (8000424 <Sender1_Task+0xc0>)
 80003e4:	60fb      	str	r3, [r7, #12]
			HAL_UART_Transmit(&huart1,(uint8_t*)str2,strlen(str2),HAL_MAX_DELAY);
 80003e6:	68f8      	ldr	r0, [r7, #12]
 80003e8:	f7ff feb2 	bl	8000150 <strlen>
 80003ec:	4603      	mov	r3, r0
 80003ee:	b29a      	uxth	r2, r3
 80003f0:	f04f 33ff 	mov.w	r3, #4294967295
 80003f4:	68f9      	ldr	r1, [r7, #12]
 80003f6:	4807      	ldr	r0, [pc, #28]	@ (8000414 <Sender1_Task+0xb0>)
 80003f8:	f001 fba8 	bl	8001b4c <HAL_UART_Transmit>
		}
		indx1=indx1+1;
 80003fc:	4b06      	ldr	r3, [pc, #24]	@ (8000418 <Sender1_Task+0xb4>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	3301      	adds	r3, #1
 8000402:	4a05      	ldr	r2, [pc, #20]	@ (8000418 <Sender1_Task+0xb4>)
 8000404:	6013      	str	r3, [r2, #0]
		vTaskDelay(TickDelay);
 8000406:	6978      	ldr	r0, [r7, #20]
 8000408:	f002 fb74 	bl	8002af4 <vTaskDelay>
	while(1){
 800040c:	e7b1      	b.n	8000372 <Sender1_Task+0xe>
 800040e:	bf00      	nop
 8000410:	08004694 	.word	0x08004694
 8000414:	200002d0 	.word	0x200002d0
 8000418:	20000328 	.word	0x20000328
 800041c:	080046ac 	.word	0x080046ac
 8000420:	20000318 	.word	0x20000318
 8000424:	080046c0 	.word	0x080046c0

08000428 <Sender2_Task>:
	}
}



void Sender2_Task(void *argument){
 8000428:	b580      	push	{r7, lr}
 800042a:	b086      	sub	sp, #24
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
	my_struct *ptrtostruct;
	uint32_t TickDelay=pdMS_TO_TICKS(2000);
 8000430:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000434:	617b      	str	r3, [r7, #20]
	while(1){
		char *str= "Entered SENDER2_Task\n";
 8000436:	4b27      	ldr	r3, [pc, #156]	@ (80004d4 <Sender2_Task+0xac>)
 8000438:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),HAL_MAX_DELAY);
 800043a:	6938      	ldr	r0, [r7, #16]
 800043c:	f7ff fe88 	bl	8000150 <strlen>
 8000440:	4603      	mov	r3, r0
 8000442:	b29a      	uxth	r2, r3
 8000444:	f04f 33ff 	mov.w	r3, #4294967295
 8000448:	6939      	ldr	r1, [r7, #16]
 800044a:	4823      	ldr	r0, [pc, #140]	@ (80004d8 <Sender2_Task+0xb0>)
 800044c:	f001 fb7e 	bl	8001b4c <HAL_UART_Transmit>

		//Allocate memory to the pointer
		ptrtostruct = pvPortMalloc(sizeof(my_struct));
 8000450:	200c      	movs	r0, #12
 8000452:	f003 fa4d 	bl	80038f0 <pvPortMalloc>
 8000456:	4603      	mov	r3, r0
 8000458:	60bb      	str	r3, [r7, #8]

		//cargar los datos a la estructura
		ptrtostruct->counter=1+indx2;
 800045a:	4b20      	ldr	r3, [pc, #128]	@ (80004dc <Sender2_Task+0xb4>)
 800045c:	681a      	ldr	r2, [r3, #0]
 800045e:	68bb      	ldr	r3, [r7, #8]
 8000460:	3201      	adds	r2, #1
 8000462:	605a      	str	r2, [r3, #4]
		ptrtostruct->large_value=2000+indx2*200;
 8000464:	4b1d      	ldr	r3, [pc, #116]	@ (80004dc <Sender2_Task+0xb4>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	b29b      	uxth	r3, r3
 800046a:	461a      	mov	r2, r3
 800046c:	0092      	lsls	r2, r2, #2
 800046e:	4413      	add	r3, r2
 8000470:	461a      	mov	r2, r3
 8000472:	0091      	lsls	r1, r2, #2
 8000474:	461a      	mov	r2, r3
 8000476:	460b      	mov	r3, r1
 8000478:	4413      	add	r3, r2
 800047a:	00db      	lsls	r3, r3, #3
 800047c:	b29a      	uxth	r2, r3
 800047e:	68bb      	ldr	r3, [r7, #8]
 8000480:	f502 62fa 	add.w	r2, r2, #2000	@ 0x7d0
 8000484:	b292      	uxth	r2, r2
 8000486:	811a      	strh	r2, [r3, #8]
		ptrtostruct->str="Hello from sender2";
 8000488:	68bb      	ldr	r3, [r7, #8]
 800048a:	4a15      	ldr	r2, [pc, #84]	@ (80004e0 <Sender2_Task+0xb8>)
 800048c:	601a      	str	r2, [r3, #0]

		//enviar a la queue
		if(xQueueSend(St_Queue_Handler,&ptrtostruct,portMAX_DELAY)==pdPASS){
 800048e:	4b15      	ldr	r3, [pc, #84]	@ (80004e4 <Sender2_Task+0xbc>)
 8000490:	6818      	ldr	r0, [r3, #0]
 8000492:	f107 0108 	add.w	r1, r7, #8
 8000496:	2300      	movs	r3, #0
 8000498:	f04f 32ff 	mov.w	r2, #4294967295
 800049c:	f001 fe9e 	bl	80021dc <xQueueGenericSend>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b01      	cmp	r3, #1
 80004a4:	d10c      	bne.n	80004c0 <Sender2_Task+0x98>
			char *str2= "Enviado a la queue con éxito, terminando Sender2_Task";
 80004a6:	4b10      	ldr	r3, [pc, #64]	@ (80004e8 <Sender2_Task+0xc0>)
 80004a8:	60fb      	str	r3, [r7, #12]
			HAL_UART_Transmit(&huart1,(uint8_t*)str2,strlen(str2),HAL_MAX_DELAY);
 80004aa:	68f8      	ldr	r0, [r7, #12]
 80004ac:	f7ff fe50 	bl	8000150 <strlen>
 80004b0:	4603      	mov	r3, r0
 80004b2:	b29a      	uxth	r2, r3
 80004b4:	f04f 33ff 	mov.w	r3, #4294967295
 80004b8:	68f9      	ldr	r1, [r7, #12]
 80004ba:	4807      	ldr	r0, [pc, #28]	@ (80004d8 <Sender2_Task+0xb0>)
 80004bc:	f001 fb46 	bl	8001b4c <HAL_UART_Transmit>
		}
		indx2=indx2+1;
 80004c0:	4b06      	ldr	r3, [pc, #24]	@ (80004dc <Sender2_Task+0xb4>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	3301      	adds	r3, #1
 80004c6:	4a05      	ldr	r2, [pc, #20]	@ (80004dc <Sender2_Task+0xb4>)
 80004c8:	6013      	str	r3, [r2, #0]
		vTaskDelay(TickDelay);
 80004ca:	6978      	ldr	r0, [r7, #20]
 80004cc:	f002 fb12 	bl	8002af4 <vTaskDelay>
	while(1){
 80004d0:	e7b1      	b.n	8000436 <Sender2_Task+0xe>
 80004d2:	bf00      	nop
 80004d4:	080046f8 	.word	0x080046f8
 80004d8:	200002d0 	.word	0x200002d0
 80004dc:	2000032c 	.word	0x2000032c
 80004e0:	08004710 	.word	0x08004710
 80004e4:	20000318 	.word	0x20000318
 80004e8:	08004724 	.word	0x08004724

080004ec <Receiver_Task>:
	}
}
void Receiver_Task(void *argument){
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b088      	sub	sp, #32
 80004f0:	af02      	add	r7, sp, #8
 80004f2:	6078      	str	r0, [r7, #4]
	my_struct *Rptrtostruct;
	uint32_t TickDelay=pdMS_TO_TICKS(3000);
 80004f4:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80004f8:	617b      	str	r3, [r7, #20]
	char *ptr;

	while(1){
		char *str= "Entered Receiver_Task\n";
 80004fa:	4b20      	ldr	r3, [pc, #128]	@ (800057c <Receiver_Task+0x90>)
 80004fc:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),HAL_MAX_DELAY);
 80004fe:	6938      	ldr	r0, [r7, #16]
 8000500:	f7ff fe26 	bl	8000150 <strlen>
 8000504:	4603      	mov	r3, r0
 8000506:	b29a      	uxth	r2, r3
 8000508:	f04f 33ff 	mov.w	r3, #4294967295
 800050c:	6939      	ldr	r1, [r7, #16]
 800050e:	481c      	ldr	r0, [pc, #112]	@ (8000580 <Receiver_Task+0x94>)
 8000510:	f001 fb1c 	bl	8001b4c <HAL_UART_Transmit>

		//recibir datos de la queue
		if(xQueueReceive(St_Queue_Handler,&Rptrtostruct,portMAX_DELAY)==pdPASS){
 8000514:	4b1b      	ldr	r3, [pc, #108]	@ (8000584 <Receiver_Task+0x98>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f107 0108 	add.w	r1, r7, #8
 800051c:	f04f 32ff 	mov.w	r2, #4294967295
 8000520:	4618      	mov	r0, r3
 8000522:	f001 ff5d 	bl	80023e0 <xQueueReceive>
 8000526:	4603      	mov	r3, r0
 8000528:	2b01      	cmp	r3, #1
 800052a:	d11e      	bne.n	800056a <Receiver_Task+0x7e>
			ptr=pvPortMalloc(100*sizeof(char));
 800052c:	2064      	movs	r0, #100	@ 0x64
 800052e:	f003 f9df 	bl	80038f0 <pvPortMalloc>
 8000532:	60f8      	str	r0, [r7, #12]
			sprintf(ptr,"Received from QUEUE: \n Counter %d\n Large value= %u\n String %s \n\n\n",Rptrtostruct->counter,Rptrtostruct->large_value,Rptrtostruct->str);
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	685a      	ldr	r2, [r3, #4]
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	891b      	ldrh	r3, [r3, #8]
 800053c:	4619      	mov	r1, r3
 800053e:	68bb      	ldr	r3, [r7, #8]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	9300      	str	r3, [sp, #0]
 8000544:	460b      	mov	r3, r1
 8000546:	4910      	ldr	r1, [pc, #64]	@ (8000588 <Receiver_Task+0x9c>)
 8000548:	68f8      	ldr	r0, [r7, #12]
 800054a:	f003 fbbd 	bl	8003cc8 <siprintf>
			HAL_UART_Transmit(&huart1,(uint8_t*)ptr,strlen(ptr),HAL_MAX_DELAY);
 800054e:	68f8      	ldr	r0, [r7, #12]
 8000550:	f7ff fdfe 	bl	8000150 <strlen>
 8000554:	4603      	mov	r3, r0
 8000556:	b29a      	uxth	r2, r3
 8000558:	f04f 33ff 	mov.w	r3, #4294967295
 800055c:	68f9      	ldr	r1, [r7, #12]
 800055e:	4808      	ldr	r0, [pc, #32]	@ (8000580 <Receiver_Task+0x94>)
 8000560:	f001 faf4 	bl	8001b4c <HAL_UART_Transmit>
			vPortFree(ptr); //se libera la memoria del pointer
 8000564:	68f8      	ldr	r0, [r7, #12]
 8000566:	f003 fa91 	bl	8003a8c <vPortFree>
		}
		//se debe liberar la memoria de los senders
		vPortFree(Rptrtostruct);
 800056a:	68bb      	ldr	r3, [r7, #8]
 800056c:	4618      	mov	r0, r3
 800056e:	f003 fa8d 	bl	8003a8c <vPortFree>
		vTaskDelay(TickDelay);
 8000572:	6978      	ldr	r0, [r7, #20]
 8000574:	f002 fabe 	bl	8002af4 <vTaskDelay>
	while(1){
 8000578:	e7bf      	b.n	80004fa <Receiver_Task+0xe>
 800057a:	bf00      	nop
 800057c:	0800475c 	.word	0x0800475c
 8000580:	200002d0 	.word	0x200002d0
 8000584:	20000318 	.word	0x20000318
 8000588:	08004774 	.word	0x08004774

0800058c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a04      	ldr	r2, [pc, #16]	@ (80005ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d101      	bne.n	80005a2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800059e:	f000 f99f 	bl	80008e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40012c00 	.word	0x40012c00

080005b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005b4:	b672      	cpsid	i
}
 80005b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005b8:	bf00      	nop
 80005ba:	e7fd      	b.n	80005b8 <Error_Handler+0x8>

080005bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005c2:	4b18      	ldr	r3, [pc, #96]	@ (8000624 <HAL_MspInit+0x68>)
 80005c4:	699b      	ldr	r3, [r3, #24]
 80005c6:	4a17      	ldr	r2, [pc, #92]	@ (8000624 <HAL_MspInit+0x68>)
 80005c8:	f043 0301 	orr.w	r3, r3, #1
 80005cc:	6193      	str	r3, [r2, #24]
 80005ce:	4b15      	ldr	r3, [pc, #84]	@ (8000624 <HAL_MspInit+0x68>)
 80005d0:	699b      	ldr	r3, [r3, #24]
 80005d2:	f003 0301 	and.w	r3, r3, #1
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005da:	4b12      	ldr	r3, [pc, #72]	@ (8000624 <HAL_MspInit+0x68>)
 80005dc:	69db      	ldr	r3, [r3, #28]
 80005de:	4a11      	ldr	r2, [pc, #68]	@ (8000624 <HAL_MspInit+0x68>)
 80005e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005e4:	61d3      	str	r3, [r2, #28]
 80005e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000624 <HAL_MspInit+0x68>)
 80005e8:	69db      	ldr	r3, [r3, #28]
 80005ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005f2:	2200      	movs	r2, #0
 80005f4:	210f      	movs	r1, #15
 80005f6:	f06f 0001 	mvn.w	r0, #1
 80005fa:	f000 fa42 	bl	8000a82 <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80005fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000628 <HAL_MspInit+0x6c>)
 8000600:	685b      	ldr	r3, [r3, #4]
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	4a04      	ldr	r2, [pc, #16]	@ (8000628 <HAL_MspInit+0x6c>)
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800061a:	bf00      	nop
 800061c:	3710      	adds	r7, #16
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40021000 	.word	0x40021000
 8000628:	40010000 	.word	0x40010000

0800062c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a1c      	ldr	r2, [pc, #112]	@ (80006b8 <HAL_UART_MspInit+0x8c>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d131      	bne.n	80006b0 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800064c:	4b1b      	ldr	r3, [pc, #108]	@ (80006bc <HAL_UART_MspInit+0x90>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	4a1a      	ldr	r2, [pc, #104]	@ (80006bc <HAL_UART_MspInit+0x90>)
 8000652:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000656:	6193      	str	r3, [r2, #24]
 8000658:	4b18      	ldr	r3, [pc, #96]	@ (80006bc <HAL_UART_MspInit+0x90>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000660:	60fb      	str	r3, [r7, #12]
 8000662:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000664:	4b15      	ldr	r3, [pc, #84]	@ (80006bc <HAL_UART_MspInit+0x90>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	4a14      	ldr	r2, [pc, #80]	@ (80006bc <HAL_UART_MspInit+0x90>)
 800066a:	f043 0304 	orr.w	r3, r3, #4
 800066e:	6193      	str	r3, [r2, #24]
 8000670:	4b12      	ldr	r3, [pc, #72]	@ (80006bc <HAL_UART_MspInit+0x90>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	f003 0304 	and.w	r3, r3, #4
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800067c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000680:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000682:	2302      	movs	r3, #2
 8000684:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000686:	2303      	movs	r3, #3
 8000688:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068a:	f107 0310 	add.w	r3, r7, #16
 800068e:	4619      	mov	r1, r3
 8000690:	480b      	ldr	r0, [pc, #44]	@ (80006c0 <HAL_UART_MspInit+0x94>)
 8000692:	f000 fa21 	bl	8000ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000696:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800069a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a4:	f107 0310 	add.w	r3, r7, #16
 80006a8:	4619      	mov	r1, r3
 80006aa:	4805      	ldr	r0, [pc, #20]	@ (80006c0 <HAL_UART_MspInit+0x94>)
 80006ac:	f000 fa14 	bl	8000ad8 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80006b0:	bf00      	nop
 80006b2:	3720      	adds	r7, #32
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40013800 	.word	0x40013800
 80006bc:	40021000 	.word	0x40021000
 80006c0:	40010800 	.word	0x40010800

080006c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08c      	sub	sp, #48	@ 0x30
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80006cc:	2300      	movs	r3, #0
 80006ce:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80006d0:	2300      	movs	r3, #0
 80006d2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80006d4:	2300      	movs	r3, #0
 80006d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80006da:	4b2e      	ldr	r3, [pc, #184]	@ (8000794 <HAL_InitTick+0xd0>)
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	4a2d      	ldr	r2, [pc, #180]	@ (8000794 <HAL_InitTick+0xd0>)
 80006e0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80006e4:	6193      	str	r3, [r2, #24]
 80006e6:	4b2b      	ldr	r3, [pc, #172]	@ (8000794 <HAL_InitTick+0xd0>)
 80006e8:	699b      	ldr	r3, [r3, #24]
 80006ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006f2:	f107 020c 	add.w	r2, r7, #12
 80006f6:	f107 0310 	add.w	r3, r7, #16
 80006fa:	4611      	mov	r1, r2
 80006fc:	4618      	mov	r0, r3
 80006fe:	f000 ff59 	bl	80015b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000702:	f000 ff43 	bl	800158c <HAL_RCC_GetPCLK2Freq>
 8000706:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800070a:	4a23      	ldr	r2, [pc, #140]	@ (8000798 <HAL_InitTick+0xd4>)
 800070c:	fba2 2303 	umull	r2, r3, r2, r3
 8000710:	0c9b      	lsrs	r3, r3, #18
 8000712:	3b01      	subs	r3, #1
 8000714:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000716:	4b21      	ldr	r3, [pc, #132]	@ (800079c <HAL_InitTick+0xd8>)
 8000718:	4a21      	ldr	r2, [pc, #132]	@ (80007a0 <HAL_InitTick+0xdc>)
 800071a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800071c:	4b1f      	ldr	r3, [pc, #124]	@ (800079c <HAL_InitTick+0xd8>)
 800071e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000722:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000724:	4a1d      	ldr	r2, [pc, #116]	@ (800079c <HAL_InitTick+0xd8>)
 8000726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000728:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800072a:	4b1c      	ldr	r3, [pc, #112]	@ (800079c <HAL_InitTick+0xd8>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000730:	4b1a      	ldr	r3, [pc, #104]	@ (800079c <HAL_InitTick+0xd8>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000736:	4b19      	ldr	r3, [pc, #100]	@ (800079c <HAL_InitTick+0xd8>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800073c:	4817      	ldr	r0, [pc, #92]	@ (800079c <HAL_InitTick+0xd8>)
 800073e:	f000 ff87 	bl	8001650 <HAL_TIM_Base_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000748:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800074c:	2b00      	cmp	r3, #0
 800074e:	d11b      	bne.n	8000788 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000750:	4812      	ldr	r0, [pc, #72]	@ (800079c <HAL_InitTick+0xd8>)
 8000752:	f000 ffd5 	bl	8001700 <HAL_TIM_Base_Start_IT>
 8000756:	4603      	mov	r3, r0
 8000758:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800075c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000760:	2b00      	cmp	r3, #0
 8000762:	d111      	bne.n	8000788 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000764:	2019      	movs	r0, #25
 8000766:	f000 f9a8 	bl	8000aba <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2b0f      	cmp	r3, #15
 800076e:	d808      	bhi.n	8000782 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000770:	2200      	movs	r2, #0
 8000772:	6879      	ldr	r1, [r7, #4]
 8000774:	2019      	movs	r0, #25
 8000776:	f000 f984 	bl	8000a82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800077a:	4a0a      	ldr	r2, [pc, #40]	@ (80007a4 <HAL_InitTick+0xe0>)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	6013      	str	r3, [r2, #0]
 8000780:	e002      	b.n	8000788 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000782:	2301      	movs	r3, #1
 8000784:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000788:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800078c:	4618      	mov	r0, r3
 800078e:	3730      	adds	r7, #48	@ 0x30
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40021000 	.word	0x40021000
 8000798:	431bde83 	.word	0x431bde83
 800079c:	20000330 	.word	0x20000330
 80007a0:	40012c00 	.word	0x40012c00
 80007a4:	20000004 	.word	0x20000004

080007a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <NMI_Handler+0x4>

080007b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b4:	bf00      	nop
 80007b6:	e7fd      	b.n	80007b4 <HardFault_Handler+0x4>

080007b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007bc:	bf00      	nop
 80007be:	e7fd      	b.n	80007bc <MemManage_Handler+0x4>

080007c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <BusFault_Handler+0x4>

080007c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <UsageFault_Handler+0x4>

080007d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr

080007dc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80007e0:	4802      	ldr	r0, [pc, #8]	@ (80007ec <TIM1_UP_IRQHandler+0x10>)
 80007e2:	f000 ffd9 	bl	8001798 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000330 	.word	0x20000330

080007f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007f8:	4a14      	ldr	r2, [pc, #80]	@ (800084c <_sbrk+0x5c>)
 80007fa:	4b15      	ldr	r3, [pc, #84]	@ (8000850 <_sbrk+0x60>)
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000804:	4b13      	ldr	r3, [pc, #76]	@ (8000854 <_sbrk+0x64>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d102      	bne.n	8000812 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800080c:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <_sbrk+0x64>)
 800080e:	4a12      	ldr	r2, [pc, #72]	@ (8000858 <_sbrk+0x68>)
 8000810:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000812:	4b10      	ldr	r3, [pc, #64]	@ (8000854 <_sbrk+0x64>)
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4413      	add	r3, r2
 800081a:	693a      	ldr	r2, [r7, #16]
 800081c:	429a      	cmp	r2, r3
 800081e:	d207      	bcs.n	8000830 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000820:	f003 fa7c 	bl	8003d1c <__errno>
 8000824:	4603      	mov	r3, r0
 8000826:	220c      	movs	r2, #12
 8000828:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800082a:	f04f 33ff 	mov.w	r3, #4294967295
 800082e:	e009      	b.n	8000844 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000830:	4b08      	ldr	r3, [pc, #32]	@ (8000854 <_sbrk+0x64>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000836:	4b07      	ldr	r3, [pc, #28]	@ (8000854 <_sbrk+0x64>)
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4413      	add	r3, r2
 800083e:	4a05      	ldr	r2, [pc, #20]	@ (8000854 <_sbrk+0x64>)
 8000840:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000842:	68fb      	ldr	r3, [r7, #12]
}
 8000844:	4618      	mov	r0, r3
 8000846:	3718      	adds	r7, #24
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20002800 	.word	0x20002800
 8000850:	00000400 	.word	0x00000400
 8000854:	20000378 	.word	0x20000378
 8000858:	20001220 	.word	0x20001220

0800085c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr

08000868 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000868:	f7ff fff8 	bl	800085c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800086c:	480b      	ldr	r0, [pc, #44]	@ (800089c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800086e:	490c      	ldr	r1, [pc, #48]	@ (80008a0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000870:	4a0c      	ldr	r2, [pc, #48]	@ (80008a4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000872:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000874:	e002      	b.n	800087c <LoopCopyDataInit>

08000876 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000876:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000878:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800087a:	3304      	adds	r3, #4

0800087c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800087c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800087e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000880:	d3f9      	bcc.n	8000876 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000882:	4a09      	ldr	r2, [pc, #36]	@ (80008a8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000884:	4c09      	ldr	r4, [pc, #36]	@ (80008ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000886:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000888:	e001      	b.n	800088e <LoopFillZerobss>

0800088a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800088a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800088c:	3204      	adds	r2, #4

0800088e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800088e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000890:	d3fb      	bcc.n	800088a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000892:	f003 fa49 	bl	8003d28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000896:	f7ff fc7b 	bl	8000190 <main>
  bx lr
 800089a:	4770      	bx	lr
  ldr r0, =_sdata
 800089c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80008a4:	08004830 	.word	0x08004830
  ldr r2, =_sbss
 80008a8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80008ac:	2000121c 	.word	0x2000121c

080008b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008b0:	e7fe      	b.n	80008b0 <ADC1_2_IRQHandler>
	...

080008b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008b8:	4b08      	ldr	r3, [pc, #32]	@ (80008dc <HAL_Init+0x28>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a07      	ldr	r2, [pc, #28]	@ (80008dc <HAL_Init+0x28>)
 80008be:	f043 0310 	orr.w	r3, r3, #16
 80008c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008c4:	2003      	movs	r0, #3
 80008c6:	f000 f8d1 	bl	8000a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ca:	200f      	movs	r0, #15
 80008cc:	f7ff fefa 	bl	80006c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008d0:	f7ff fe74 	bl	80005bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40022000 	.word	0x40022000

080008e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008e4:	4b05      	ldr	r3, [pc, #20]	@ (80008fc <HAL_IncTick+0x1c>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	461a      	mov	r2, r3
 80008ea:	4b05      	ldr	r3, [pc, #20]	@ (8000900 <HAL_IncTick+0x20>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4413      	add	r3, r2
 80008f0:	4a03      	ldr	r2, [pc, #12]	@ (8000900 <HAL_IncTick+0x20>)
 80008f2:	6013      	str	r3, [r2, #0]
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr
 80008fc:	20000008 	.word	0x20000008
 8000900:	2000037c 	.word	0x2000037c

08000904 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  return uwTick;
 8000908:	4b02      	ldr	r3, [pc, #8]	@ (8000914 <HAL_GetTick+0x10>)
 800090a:	681b      	ldr	r3, [r3, #0]
}
 800090c:	4618      	mov	r0, r3
 800090e:	46bd      	mov	sp, r7
 8000910:	bc80      	pop	{r7}
 8000912:	4770      	bx	lr
 8000914:	2000037c 	.word	0x2000037c

08000918 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000918:	b480      	push	{r7}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	f003 0307 	and.w	r3, r3, #7
 8000926:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000928:	4b0c      	ldr	r3, [pc, #48]	@ (800095c <__NVIC_SetPriorityGrouping+0x44>)
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800092e:	68ba      	ldr	r2, [r7, #8]
 8000930:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000934:	4013      	ands	r3, r2
 8000936:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000940:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000944:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000948:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800094a:	4a04      	ldr	r2, [pc, #16]	@ (800095c <__NVIC_SetPriorityGrouping+0x44>)
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	60d3      	str	r3, [r2, #12]
}
 8000950:	bf00      	nop
 8000952:	3714      	adds	r7, #20
 8000954:	46bd      	mov	sp, r7
 8000956:	bc80      	pop	{r7}
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000964:	4b04      	ldr	r3, [pc, #16]	@ (8000978 <__NVIC_GetPriorityGrouping+0x18>)
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	0a1b      	lsrs	r3, r3, #8
 800096a:	f003 0307 	and.w	r3, r3, #7
}
 800096e:	4618      	mov	r0, r3
 8000970:	46bd      	mov	sp, r7
 8000972:	bc80      	pop	{r7}
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098a:	2b00      	cmp	r3, #0
 800098c:	db0b      	blt.n	80009a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	f003 021f 	and.w	r2, r3, #31
 8000994:	4906      	ldr	r1, [pc, #24]	@ (80009b0 <__NVIC_EnableIRQ+0x34>)
 8000996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099a:	095b      	lsrs	r3, r3, #5
 800099c:	2001      	movs	r0, #1
 800099e:	fa00 f202 	lsl.w	r2, r0, r2
 80009a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009a6:	bf00      	nop
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr
 80009b0:	e000e100 	.word	0xe000e100

080009b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	6039      	str	r1, [r7, #0]
 80009be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	db0a      	blt.n	80009de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	490c      	ldr	r1, [pc, #48]	@ (8000a00 <__NVIC_SetPriority+0x4c>)
 80009ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d2:	0112      	lsls	r2, r2, #4
 80009d4:	b2d2      	uxtb	r2, r2
 80009d6:	440b      	add	r3, r1
 80009d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009dc:	e00a      	b.n	80009f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	b2da      	uxtb	r2, r3
 80009e2:	4908      	ldr	r1, [pc, #32]	@ (8000a04 <__NVIC_SetPriority+0x50>)
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	f003 030f 	and.w	r3, r3, #15
 80009ea:	3b04      	subs	r3, #4
 80009ec:	0112      	lsls	r2, r2, #4
 80009ee:	b2d2      	uxtb	r2, r2
 80009f0:	440b      	add	r3, r1
 80009f2:	761a      	strb	r2, [r3, #24]
}
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bc80      	pop	{r7}
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	e000e100 	.word	0xe000e100
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b089      	sub	sp, #36	@ 0x24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	f003 0307 	and.w	r3, r3, #7
 8000a1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a1c:	69fb      	ldr	r3, [r7, #28]
 8000a1e:	f1c3 0307 	rsb	r3, r3, #7
 8000a22:	2b04      	cmp	r3, #4
 8000a24:	bf28      	it	cs
 8000a26:	2304      	movcs	r3, #4
 8000a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	3304      	adds	r3, #4
 8000a2e:	2b06      	cmp	r3, #6
 8000a30:	d902      	bls.n	8000a38 <NVIC_EncodePriority+0x30>
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	3b03      	subs	r3, #3
 8000a36:	e000      	b.n	8000a3a <NVIC_EncodePriority+0x32>
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a40:	69bb      	ldr	r3, [r7, #24]
 8000a42:	fa02 f303 	lsl.w	r3, r2, r3
 8000a46:	43da      	mvns	r2, r3
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	401a      	ands	r2, r3
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a50:	f04f 31ff 	mov.w	r1, #4294967295
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5a:	43d9      	mvns	r1, r3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a60:	4313      	orrs	r3, r2
         );
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3724      	adds	r7, #36	@ 0x24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr

08000a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f7ff ff4f 	bl	8000918 <__NVIC_SetPriorityGrouping>
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b086      	sub	sp, #24
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	4603      	mov	r3, r0
 8000a8a:	60b9      	str	r1, [r7, #8]
 8000a8c:	607a      	str	r2, [r7, #4]
 8000a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a94:	f7ff ff64 	bl	8000960 <__NVIC_GetPriorityGrouping>
 8000a98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	68b9      	ldr	r1, [r7, #8]
 8000a9e:	6978      	ldr	r0, [r7, #20]
 8000aa0:	f7ff ffb2 	bl	8000a08 <NVIC_EncodePriority>
 8000aa4:	4602      	mov	r2, r0
 8000aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aaa:	4611      	mov	r1, r2
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff ff81 	bl	80009b4 <__NVIC_SetPriority>
}
 8000ab2:	bf00      	nop
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff ff57 	bl	800097c <__NVIC_EnableIRQ>
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b08b      	sub	sp, #44	@ 0x2c
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aea:	e161      	b.n	8000db0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000aec:	2201      	movs	r2, #1
 8000aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000af0:	fa02 f303 	lsl.w	r3, r2, r3
 8000af4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	69fa      	ldr	r2, [r7, #28]
 8000afc:	4013      	ands	r3, r2
 8000afe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b00:	69ba      	ldr	r2, [r7, #24]
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	f040 8150 	bne.w	8000daa <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	4a97      	ldr	r2, [pc, #604]	@ (8000d6c <HAL_GPIO_Init+0x294>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d05e      	beq.n	8000bd2 <HAL_GPIO_Init+0xfa>
 8000b14:	4a95      	ldr	r2, [pc, #596]	@ (8000d6c <HAL_GPIO_Init+0x294>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d875      	bhi.n	8000c06 <HAL_GPIO_Init+0x12e>
 8000b1a:	4a95      	ldr	r2, [pc, #596]	@ (8000d70 <HAL_GPIO_Init+0x298>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d058      	beq.n	8000bd2 <HAL_GPIO_Init+0xfa>
 8000b20:	4a93      	ldr	r2, [pc, #588]	@ (8000d70 <HAL_GPIO_Init+0x298>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d86f      	bhi.n	8000c06 <HAL_GPIO_Init+0x12e>
 8000b26:	4a93      	ldr	r2, [pc, #588]	@ (8000d74 <HAL_GPIO_Init+0x29c>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d052      	beq.n	8000bd2 <HAL_GPIO_Init+0xfa>
 8000b2c:	4a91      	ldr	r2, [pc, #580]	@ (8000d74 <HAL_GPIO_Init+0x29c>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d869      	bhi.n	8000c06 <HAL_GPIO_Init+0x12e>
 8000b32:	4a91      	ldr	r2, [pc, #580]	@ (8000d78 <HAL_GPIO_Init+0x2a0>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d04c      	beq.n	8000bd2 <HAL_GPIO_Init+0xfa>
 8000b38:	4a8f      	ldr	r2, [pc, #572]	@ (8000d78 <HAL_GPIO_Init+0x2a0>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d863      	bhi.n	8000c06 <HAL_GPIO_Init+0x12e>
 8000b3e:	4a8f      	ldr	r2, [pc, #572]	@ (8000d7c <HAL_GPIO_Init+0x2a4>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d046      	beq.n	8000bd2 <HAL_GPIO_Init+0xfa>
 8000b44:	4a8d      	ldr	r2, [pc, #564]	@ (8000d7c <HAL_GPIO_Init+0x2a4>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d85d      	bhi.n	8000c06 <HAL_GPIO_Init+0x12e>
 8000b4a:	2b12      	cmp	r3, #18
 8000b4c:	d82a      	bhi.n	8000ba4 <HAL_GPIO_Init+0xcc>
 8000b4e:	2b12      	cmp	r3, #18
 8000b50:	d859      	bhi.n	8000c06 <HAL_GPIO_Init+0x12e>
 8000b52:	a201      	add	r2, pc, #4	@ (adr r2, 8000b58 <HAL_GPIO_Init+0x80>)
 8000b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b58:	08000bd3 	.word	0x08000bd3
 8000b5c:	08000bad 	.word	0x08000bad
 8000b60:	08000bbf 	.word	0x08000bbf
 8000b64:	08000c01 	.word	0x08000c01
 8000b68:	08000c07 	.word	0x08000c07
 8000b6c:	08000c07 	.word	0x08000c07
 8000b70:	08000c07 	.word	0x08000c07
 8000b74:	08000c07 	.word	0x08000c07
 8000b78:	08000c07 	.word	0x08000c07
 8000b7c:	08000c07 	.word	0x08000c07
 8000b80:	08000c07 	.word	0x08000c07
 8000b84:	08000c07 	.word	0x08000c07
 8000b88:	08000c07 	.word	0x08000c07
 8000b8c:	08000c07 	.word	0x08000c07
 8000b90:	08000c07 	.word	0x08000c07
 8000b94:	08000c07 	.word	0x08000c07
 8000b98:	08000c07 	.word	0x08000c07
 8000b9c:	08000bb5 	.word	0x08000bb5
 8000ba0:	08000bc9 	.word	0x08000bc9
 8000ba4:	4a76      	ldr	r2, [pc, #472]	@ (8000d80 <HAL_GPIO_Init+0x2a8>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d013      	beq.n	8000bd2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000baa:	e02c      	b.n	8000c06 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	623b      	str	r3, [r7, #32]
          break;
 8000bb2:	e029      	b.n	8000c08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	3304      	adds	r3, #4
 8000bba:	623b      	str	r3, [r7, #32]
          break;
 8000bbc:	e024      	b.n	8000c08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	68db      	ldr	r3, [r3, #12]
 8000bc2:	3308      	adds	r3, #8
 8000bc4:	623b      	str	r3, [r7, #32]
          break;
 8000bc6:	e01f      	b.n	8000c08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	330c      	adds	r3, #12
 8000bce:	623b      	str	r3, [r7, #32]
          break;
 8000bd0:	e01a      	b.n	8000c08 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d102      	bne.n	8000be0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bda:	2304      	movs	r3, #4
 8000bdc:	623b      	str	r3, [r7, #32]
          break;
 8000bde:	e013      	b.n	8000c08 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	689b      	ldr	r3, [r3, #8]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d105      	bne.n	8000bf4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000be8:	2308      	movs	r3, #8
 8000bea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	69fa      	ldr	r2, [r7, #28]
 8000bf0:	611a      	str	r2, [r3, #16]
          break;
 8000bf2:	e009      	b.n	8000c08 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bf4:	2308      	movs	r3, #8
 8000bf6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	69fa      	ldr	r2, [r7, #28]
 8000bfc:	615a      	str	r2, [r3, #20]
          break;
 8000bfe:	e003      	b.n	8000c08 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c00:	2300      	movs	r3, #0
 8000c02:	623b      	str	r3, [r7, #32]
          break;
 8000c04:	e000      	b.n	8000c08 <HAL_GPIO_Init+0x130>
          break;
 8000c06:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	2bff      	cmp	r3, #255	@ 0xff
 8000c0c:	d801      	bhi.n	8000c12 <HAL_GPIO_Init+0x13a>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	e001      	b.n	8000c16 <HAL_GPIO_Init+0x13e>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	3304      	adds	r3, #4
 8000c16:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	2bff      	cmp	r3, #255	@ 0xff
 8000c1c:	d802      	bhi.n	8000c24 <HAL_GPIO_Init+0x14c>
 8000c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	e002      	b.n	8000c2a <HAL_GPIO_Init+0x152>
 8000c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c26:	3b08      	subs	r3, #8
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	210f      	movs	r1, #15
 8000c32:	693b      	ldr	r3, [r7, #16]
 8000c34:	fa01 f303 	lsl.w	r3, r1, r3
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	401a      	ands	r2, r3
 8000c3c:	6a39      	ldr	r1, [r7, #32]
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	fa01 f303 	lsl.w	r3, r1, r3
 8000c44:	431a      	orrs	r2, r3
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	f000 80a9 	beq.w	8000daa <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c58:	4b4a      	ldr	r3, [pc, #296]	@ (8000d84 <HAL_GPIO_Init+0x2ac>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	4a49      	ldr	r2, [pc, #292]	@ (8000d84 <HAL_GPIO_Init+0x2ac>)
 8000c5e:	f043 0301 	orr.w	r3, r3, #1
 8000c62:	6193      	str	r3, [r2, #24]
 8000c64:	4b47      	ldr	r3, [pc, #284]	@ (8000d84 <HAL_GPIO_Init+0x2ac>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	f003 0301 	and.w	r3, r3, #1
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c70:	4a45      	ldr	r2, [pc, #276]	@ (8000d88 <HAL_GPIO_Init+0x2b0>)
 8000c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c74:	089b      	lsrs	r3, r3, #2
 8000c76:	3302      	adds	r3, #2
 8000c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c7c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c80:	f003 0303 	and.w	r3, r3, #3
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	220f      	movs	r2, #15
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	4013      	ands	r3, r2
 8000c92:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4a3d      	ldr	r2, [pc, #244]	@ (8000d8c <HAL_GPIO_Init+0x2b4>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d00d      	beq.n	8000cb8 <HAL_GPIO_Init+0x1e0>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4a3c      	ldr	r2, [pc, #240]	@ (8000d90 <HAL_GPIO_Init+0x2b8>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d007      	beq.n	8000cb4 <HAL_GPIO_Init+0x1dc>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a3b      	ldr	r2, [pc, #236]	@ (8000d94 <HAL_GPIO_Init+0x2bc>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d101      	bne.n	8000cb0 <HAL_GPIO_Init+0x1d8>
 8000cac:	2302      	movs	r3, #2
 8000cae:	e004      	b.n	8000cba <HAL_GPIO_Init+0x1e2>
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	e002      	b.n	8000cba <HAL_GPIO_Init+0x1e2>
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e000      	b.n	8000cba <HAL_GPIO_Init+0x1e2>
 8000cb8:	2300      	movs	r3, #0
 8000cba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000cbc:	f002 0203 	and.w	r2, r2, #3
 8000cc0:	0092      	lsls	r2, r2, #2
 8000cc2:	4093      	lsls	r3, r2
 8000cc4:	68fa      	ldr	r2, [r7, #12]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000cca:	492f      	ldr	r1, [pc, #188]	@ (8000d88 <HAL_GPIO_Init+0x2b0>)
 8000ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cce:	089b      	lsrs	r3, r3, #2
 8000cd0:	3302      	adds	r3, #2
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d006      	beq.n	8000cf2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ce4:	4b2c      	ldr	r3, [pc, #176]	@ (8000d98 <HAL_GPIO_Init+0x2c0>)
 8000ce6:	689a      	ldr	r2, [r3, #8]
 8000ce8:	492b      	ldr	r1, [pc, #172]	@ (8000d98 <HAL_GPIO_Init+0x2c0>)
 8000cea:	69bb      	ldr	r3, [r7, #24]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	608b      	str	r3, [r1, #8]
 8000cf0:	e006      	b.n	8000d00 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cf2:	4b29      	ldr	r3, [pc, #164]	@ (8000d98 <HAL_GPIO_Init+0x2c0>)
 8000cf4:	689a      	ldr	r2, [r3, #8]
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	4927      	ldr	r1, [pc, #156]	@ (8000d98 <HAL_GPIO_Init+0x2c0>)
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d006      	beq.n	8000d1a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d0c:	4b22      	ldr	r3, [pc, #136]	@ (8000d98 <HAL_GPIO_Init+0x2c0>)
 8000d0e:	68da      	ldr	r2, [r3, #12]
 8000d10:	4921      	ldr	r1, [pc, #132]	@ (8000d98 <HAL_GPIO_Init+0x2c0>)
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	60cb      	str	r3, [r1, #12]
 8000d18:	e006      	b.n	8000d28 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000d98 <HAL_GPIO_Init+0x2c0>)
 8000d1c:	68da      	ldr	r2, [r3, #12]
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	43db      	mvns	r3, r3
 8000d22:	491d      	ldr	r1, [pc, #116]	@ (8000d98 <HAL_GPIO_Init+0x2c0>)
 8000d24:	4013      	ands	r3, r2
 8000d26:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d006      	beq.n	8000d42 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d34:	4b18      	ldr	r3, [pc, #96]	@ (8000d98 <HAL_GPIO_Init+0x2c0>)
 8000d36:	685a      	ldr	r2, [r3, #4]
 8000d38:	4917      	ldr	r1, [pc, #92]	@ (8000d98 <HAL_GPIO_Init+0x2c0>)
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	604b      	str	r3, [r1, #4]
 8000d40:	e006      	b.n	8000d50 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d42:	4b15      	ldr	r3, [pc, #84]	@ (8000d98 <HAL_GPIO_Init+0x2c0>)
 8000d44:	685a      	ldr	r2, [r3, #4]
 8000d46:	69bb      	ldr	r3, [r7, #24]
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	4913      	ldr	r1, [pc, #76]	@ (8000d98 <HAL_GPIO_Init+0x2c0>)
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d01f      	beq.n	8000d9c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d98 <HAL_GPIO_Init+0x2c0>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	490d      	ldr	r1, [pc, #52]	@ (8000d98 <HAL_GPIO_Init+0x2c0>)
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	600b      	str	r3, [r1, #0]
 8000d68:	e01f      	b.n	8000daa <HAL_GPIO_Init+0x2d2>
 8000d6a:	bf00      	nop
 8000d6c:	10320000 	.word	0x10320000
 8000d70:	10310000 	.word	0x10310000
 8000d74:	10220000 	.word	0x10220000
 8000d78:	10210000 	.word	0x10210000
 8000d7c:	10120000 	.word	0x10120000
 8000d80:	10110000 	.word	0x10110000
 8000d84:	40021000 	.word	0x40021000
 8000d88:	40010000 	.word	0x40010000
 8000d8c:	40010800 	.word	0x40010800
 8000d90:	40010c00 	.word	0x40010c00
 8000d94:	40011000 	.word	0x40011000
 8000d98:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000dcc <HAL_GPIO_Init+0x2f4>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	43db      	mvns	r3, r3
 8000da4:	4909      	ldr	r1, [pc, #36]	@ (8000dcc <HAL_GPIO_Init+0x2f4>)
 8000da6:	4013      	ands	r3, r2
 8000da8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dac:	3301      	adds	r3, #1
 8000dae:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000db6:	fa22 f303 	lsr.w	r3, r2, r3
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	f47f ae96 	bne.w	8000aec <HAL_GPIO_Init+0x14>
  }
}
 8000dc0:	bf00      	nop
 8000dc2:	bf00      	nop
 8000dc4:	372c      	adds	r7, #44	@ 0x2c
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr
 8000dcc:	40010400 	.word	0x40010400

08000dd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d101      	bne.n	8000de2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e272      	b.n	80012c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f000 8087 	beq.w	8000efe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000df0:	4b92      	ldr	r3, [pc, #584]	@ (800103c <HAL_RCC_OscConfig+0x26c>)
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 030c 	and.w	r3, r3, #12
 8000df8:	2b04      	cmp	r3, #4
 8000dfa:	d00c      	beq.n	8000e16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dfc:	4b8f      	ldr	r3, [pc, #572]	@ (800103c <HAL_RCC_OscConfig+0x26c>)
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 030c 	and.w	r3, r3, #12
 8000e04:	2b08      	cmp	r3, #8
 8000e06:	d112      	bne.n	8000e2e <HAL_RCC_OscConfig+0x5e>
 8000e08:	4b8c      	ldr	r3, [pc, #560]	@ (800103c <HAL_RCC_OscConfig+0x26c>)
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e14:	d10b      	bne.n	8000e2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e16:	4b89      	ldr	r3, [pc, #548]	@ (800103c <HAL_RCC_OscConfig+0x26c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d06c      	beq.n	8000efc <HAL_RCC_OscConfig+0x12c>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d168      	bne.n	8000efc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e24c      	b.n	80012c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e36:	d106      	bne.n	8000e46 <HAL_RCC_OscConfig+0x76>
 8000e38:	4b80      	ldr	r3, [pc, #512]	@ (800103c <HAL_RCC_OscConfig+0x26c>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a7f      	ldr	r2, [pc, #508]	@ (800103c <HAL_RCC_OscConfig+0x26c>)
 8000e3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e42:	6013      	str	r3, [r2, #0]
 8000e44:	e02e      	b.n	8000ea4 <HAL_RCC_OscConfig+0xd4>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d10c      	bne.n	8000e68 <HAL_RCC_OscConfig+0x98>
 8000e4e:	4b7b      	ldr	r3, [pc, #492]	@ (800103c <HAL_RCC_OscConfig+0x26c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a7a      	ldr	r2, [pc, #488]	@ (800103c <HAL_RCC_OscConfig+0x26c>)
 8000e54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e58:	6013      	str	r3, [r2, #0]
 8000e5a:	4b78      	ldr	r3, [pc, #480]	@ (800103c <HAL_RCC_OscConfig+0x26c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a77      	ldr	r2, [pc, #476]	@ (800103c <HAL_RCC_OscConfig+0x26c>)
 8000e60:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e64:	6013      	str	r3, [r2, #0]
 8000e66:	e01d      	b.n	8000ea4 <HAL_RCC_OscConfig+0xd4>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e70:	d10c      	bne.n	8000e8c <HAL_RCC_OscConfig+0xbc>
 8000e72:	4b72      	ldr	r3, [pc, #456]	@ (800103c <HAL_RCC_OscConfig+0x26c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a71      	ldr	r2, [pc, #452]	@ (800103c <HAL_RCC_OscConfig+0x26c>)
 8000e78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e7c:	6013      	str	r3, [r2, #0]
 8000e7e:	4b6f      	ldr	r3, [pc, #444]	@ (800103c <HAL_RCC_OscConfig+0x26c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a6e      	ldr	r2, [pc, #440]	@ (800103c <HAL_RCC_OscConfig+0x26c>)
 8000e84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e88:	6013      	str	r3, [r2, #0]
 8000e8a:	e00b      	b.n	8000ea4 <HAL_RCC_OscConfig+0xd4>
 8000e8c:	4b6b      	ldr	r3, [pc, #428]	@ (800103c <HAL_RCC_OscConfig+0x26c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a6a      	ldr	r2, [pc, #424]	@ (800103c <HAL_RCC_OscConfig+0x26c>)
 8000e92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e96:	6013      	str	r3, [r2, #0]
 8000e98:	4b68      	ldr	r3, [pc, #416]	@ (800103c <HAL_RCC_OscConfig+0x26c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a67      	ldr	r2, [pc, #412]	@ (800103c <HAL_RCC_OscConfig+0x26c>)
 8000e9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ea2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d013      	beq.n	8000ed4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eac:	f7ff fd2a 	bl	8000904 <HAL_GetTick>
 8000eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eb2:	e008      	b.n	8000ec6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000eb4:	f7ff fd26 	bl	8000904 <HAL_GetTick>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	2b64      	cmp	r3, #100	@ 0x64
 8000ec0:	d901      	bls.n	8000ec6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	e200      	b.n	80012c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ec6:	4b5d      	ldr	r3, [pc, #372]	@ (800103c <HAL_RCC_OscConfig+0x26c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d0f0      	beq.n	8000eb4 <HAL_RCC_OscConfig+0xe4>
 8000ed2:	e014      	b.n	8000efe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ed4:	f7ff fd16 	bl	8000904 <HAL_GetTick>
 8000ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eda:	e008      	b.n	8000eee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000edc:	f7ff fd12 	bl	8000904 <HAL_GetTick>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	2b64      	cmp	r3, #100	@ 0x64
 8000ee8:	d901      	bls.n	8000eee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000eea:	2303      	movs	r3, #3
 8000eec:	e1ec      	b.n	80012c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eee:	4b53      	ldr	r3, [pc, #332]	@ (800103c <HAL_RCC_OscConfig+0x26c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d1f0      	bne.n	8000edc <HAL_RCC_OscConfig+0x10c>
 8000efa:	e000      	b.n	8000efe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000efc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f003 0302 	and.w	r3, r3, #2
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d063      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f0a:	4b4c      	ldr	r3, [pc, #304]	@ (800103c <HAL_RCC_OscConfig+0x26c>)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f003 030c 	and.w	r3, r3, #12
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d00b      	beq.n	8000f2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f16:	4b49      	ldr	r3, [pc, #292]	@ (800103c <HAL_RCC_OscConfig+0x26c>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f003 030c 	and.w	r3, r3, #12
 8000f1e:	2b08      	cmp	r3, #8
 8000f20:	d11c      	bne.n	8000f5c <HAL_RCC_OscConfig+0x18c>
 8000f22:	4b46      	ldr	r3, [pc, #280]	@ (800103c <HAL_RCC_OscConfig+0x26c>)
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d116      	bne.n	8000f5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f2e:	4b43      	ldr	r3, [pc, #268]	@ (800103c <HAL_RCC_OscConfig+0x26c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d005      	beq.n	8000f46 <HAL_RCC_OscConfig+0x176>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	691b      	ldr	r3, [r3, #16]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d001      	beq.n	8000f46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e1c0      	b.n	80012c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f46:	4b3d      	ldr	r3, [pc, #244]	@ (800103c <HAL_RCC_OscConfig+0x26c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	4939      	ldr	r1, [pc, #228]	@ (800103c <HAL_RCC_OscConfig+0x26c>)
 8000f56:	4313      	orrs	r3, r2
 8000f58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f5a:	e03a      	b.n	8000fd2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	691b      	ldr	r3, [r3, #16]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d020      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f64:	4b36      	ldr	r3, [pc, #216]	@ (8001040 <HAL_RCC_OscConfig+0x270>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f6a:	f7ff fccb 	bl	8000904 <HAL_GetTick>
 8000f6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f70:	e008      	b.n	8000f84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f72:	f7ff fcc7 	bl	8000904 <HAL_GetTick>
 8000f76:	4602      	mov	r2, r0
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d901      	bls.n	8000f84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f80:	2303      	movs	r3, #3
 8000f82:	e1a1      	b.n	80012c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f84:	4b2d      	ldr	r3, [pc, #180]	@ (800103c <HAL_RCC_OscConfig+0x26c>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f003 0302 	and.w	r3, r3, #2
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d0f0      	beq.n	8000f72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f90:	4b2a      	ldr	r3, [pc, #168]	@ (800103c <HAL_RCC_OscConfig+0x26c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	695b      	ldr	r3, [r3, #20]
 8000f9c:	00db      	lsls	r3, r3, #3
 8000f9e:	4927      	ldr	r1, [pc, #156]	@ (800103c <HAL_RCC_OscConfig+0x26c>)
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	600b      	str	r3, [r1, #0]
 8000fa4:	e015      	b.n	8000fd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fa6:	4b26      	ldr	r3, [pc, #152]	@ (8001040 <HAL_RCC_OscConfig+0x270>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fac:	f7ff fcaa 	bl	8000904 <HAL_GetTick>
 8000fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fb2:	e008      	b.n	8000fc6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fb4:	f7ff fca6 	bl	8000904 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d901      	bls.n	8000fc6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e180      	b.n	80012c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fc6:	4b1d      	ldr	r3, [pc, #116]	@ (800103c <HAL_RCC_OscConfig+0x26c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f003 0302 	and.w	r3, r3, #2
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d1f0      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 0308 	and.w	r3, r3, #8
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d03a      	beq.n	8001054 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d019      	beq.n	800101a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fe6:	4b17      	ldr	r3, [pc, #92]	@ (8001044 <HAL_RCC_OscConfig+0x274>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fec:	f7ff fc8a 	bl	8000904 <HAL_GetTick>
 8000ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ff2:	e008      	b.n	8001006 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ff4:	f7ff fc86 	bl	8000904 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d901      	bls.n	8001006 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001002:	2303      	movs	r3, #3
 8001004:	e160      	b.n	80012c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001006:	4b0d      	ldr	r3, [pc, #52]	@ (800103c <HAL_RCC_OscConfig+0x26c>)
 8001008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	2b00      	cmp	r3, #0
 8001010:	d0f0      	beq.n	8000ff4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001012:	2001      	movs	r0, #1
 8001014:	f000 fafe 	bl	8001614 <RCC_Delay>
 8001018:	e01c      	b.n	8001054 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800101a:	4b0a      	ldr	r3, [pc, #40]	@ (8001044 <HAL_RCC_OscConfig+0x274>)
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001020:	f7ff fc70 	bl	8000904 <HAL_GetTick>
 8001024:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001026:	e00f      	b.n	8001048 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001028:	f7ff fc6c 	bl	8000904 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	2b02      	cmp	r3, #2
 8001034:	d908      	bls.n	8001048 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001036:	2303      	movs	r3, #3
 8001038:	e146      	b.n	80012c8 <HAL_RCC_OscConfig+0x4f8>
 800103a:	bf00      	nop
 800103c:	40021000 	.word	0x40021000
 8001040:	42420000 	.word	0x42420000
 8001044:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001048:	4b92      	ldr	r3, [pc, #584]	@ (8001294 <HAL_RCC_OscConfig+0x4c4>)
 800104a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800104c:	f003 0302 	and.w	r3, r3, #2
 8001050:	2b00      	cmp	r3, #0
 8001052:	d1e9      	bne.n	8001028 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0304 	and.w	r3, r3, #4
 800105c:	2b00      	cmp	r3, #0
 800105e:	f000 80a6 	beq.w	80011ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001062:	2300      	movs	r3, #0
 8001064:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001066:	4b8b      	ldr	r3, [pc, #556]	@ (8001294 <HAL_RCC_OscConfig+0x4c4>)
 8001068:	69db      	ldr	r3, [r3, #28]
 800106a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d10d      	bne.n	800108e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001072:	4b88      	ldr	r3, [pc, #544]	@ (8001294 <HAL_RCC_OscConfig+0x4c4>)
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	4a87      	ldr	r2, [pc, #540]	@ (8001294 <HAL_RCC_OscConfig+0x4c4>)
 8001078:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800107c:	61d3      	str	r3, [r2, #28]
 800107e:	4b85      	ldr	r3, [pc, #532]	@ (8001294 <HAL_RCC_OscConfig+0x4c4>)
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001086:	60bb      	str	r3, [r7, #8]
 8001088:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800108a:	2301      	movs	r3, #1
 800108c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800108e:	4b82      	ldr	r3, [pc, #520]	@ (8001298 <HAL_RCC_OscConfig+0x4c8>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001096:	2b00      	cmp	r3, #0
 8001098:	d118      	bne.n	80010cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800109a:	4b7f      	ldr	r3, [pc, #508]	@ (8001298 <HAL_RCC_OscConfig+0x4c8>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a7e      	ldr	r2, [pc, #504]	@ (8001298 <HAL_RCC_OscConfig+0x4c8>)
 80010a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010a6:	f7ff fc2d 	bl	8000904 <HAL_GetTick>
 80010aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ac:	e008      	b.n	80010c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010ae:	f7ff fc29 	bl	8000904 <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	2b64      	cmp	r3, #100	@ 0x64
 80010ba:	d901      	bls.n	80010c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80010bc:	2303      	movs	r3, #3
 80010be:	e103      	b.n	80012c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010c0:	4b75      	ldr	r3, [pc, #468]	@ (8001298 <HAL_RCC_OscConfig+0x4c8>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d0f0      	beq.n	80010ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d106      	bne.n	80010e2 <HAL_RCC_OscConfig+0x312>
 80010d4:	4b6f      	ldr	r3, [pc, #444]	@ (8001294 <HAL_RCC_OscConfig+0x4c4>)
 80010d6:	6a1b      	ldr	r3, [r3, #32]
 80010d8:	4a6e      	ldr	r2, [pc, #440]	@ (8001294 <HAL_RCC_OscConfig+0x4c4>)
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	6213      	str	r3, [r2, #32]
 80010e0:	e02d      	b.n	800113e <HAL_RCC_OscConfig+0x36e>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d10c      	bne.n	8001104 <HAL_RCC_OscConfig+0x334>
 80010ea:	4b6a      	ldr	r3, [pc, #424]	@ (8001294 <HAL_RCC_OscConfig+0x4c4>)
 80010ec:	6a1b      	ldr	r3, [r3, #32]
 80010ee:	4a69      	ldr	r2, [pc, #420]	@ (8001294 <HAL_RCC_OscConfig+0x4c4>)
 80010f0:	f023 0301 	bic.w	r3, r3, #1
 80010f4:	6213      	str	r3, [r2, #32]
 80010f6:	4b67      	ldr	r3, [pc, #412]	@ (8001294 <HAL_RCC_OscConfig+0x4c4>)
 80010f8:	6a1b      	ldr	r3, [r3, #32]
 80010fa:	4a66      	ldr	r2, [pc, #408]	@ (8001294 <HAL_RCC_OscConfig+0x4c4>)
 80010fc:	f023 0304 	bic.w	r3, r3, #4
 8001100:	6213      	str	r3, [r2, #32]
 8001102:	e01c      	b.n	800113e <HAL_RCC_OscConfig+0x36e>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	2b05      	cmp	r3, #5
 800110a:	d10c      	bne.n	8001126 <HAL_RCC_OscConfig+0x356>
 800110c:	4b61      	ldr	r3, [pc, #388]	@ (8001294 <HAL_RCC_OscConfig+0x4c4>)
 800110e:	6a1b      	ldr	r3, [r3, #32]
 8001110:	4a60      	ldr	r2, [pc, #384]	@ (8001294 <HAL_RCC_OscConfig+0x4c4>)
 8001112:	f043 0304 	orr.w	r3, r3, #4
 8001116:	6213      	str	r3, [r2, #32]
 8001118:	4b5e      	ldr	r3, [pc, #376]	@ (8001294 <HAL_RCC_OscConfig+0x4c4>)
 800111a:	6a1b      	ldr	r3, [r3, #32]
 800111c:	4a5d      	ldr	r2, [pc, #372]	@ (8001294 <HAL_RCC_OscConfig+0x4c4>)
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	6213      	str	r3, [r2, #32]
 8001124:	e00b      	b.n	800113e <HAL_RCC_OscConfig+0x36e>
 8001126:	4b5b      	ldr	r3, [pc, #364]	@ (8001294 <HAL_RCC_OscConfig+0x4c4>)
 8001128:	6a1b      	ldr	r3, [r3, #32]
 800112a:	4a5a      	ldr	r2, [pc, #360]	@ (8001294 <HAL_RCC_OscConfig+0x4c4>)
 800112c:	f023 0301 	bic.w	r3, r3, #1
 8001130:	6213      	str	r3, [r2, #32]
 8001132:	4b58      	ldr	r3, [pc, #352]	@ (8001294 <HAL_RCC_OscConfig+0x4c4>)
 8001134:	6a1b      	ldr	r3, [r3, #32]
 8001136:	4a57      	ldr	r2, [pc, #348]	@ (8001294 <HAL_RCC_OscConfig+0x4c4>)
 8001138:	f023 0304 	bic.w	r3, r3, #4
 800113c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d015      	beq.n	8001172 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001146:	f7ff fbdd 	bl	8000904 <HAL_GetTick>
 800114a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800114c:	e00a      	b.n	8001164 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800114e:	f7ff fbd9 	bl	8000904 <HAL_GetTick>
 8001152:	4602      	mov	r2, r0
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	f241 3288 	movw	r2, #5000	@ 0x1388
 800115c:	4293      	cmp	r3, r2
 800115e:	d901      	bls.n	8001164 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001160:	2303      	movs	r3, #3
 8001162:	e0b1      	b.n	80012c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001164:	4b4b      	ldr	r3, [pc, #300]	@ (8001294 <HAL_RCC_OscConfig+0x4c4>)
 8001166:	6a1b      	ldr	r3, [r3, #32]
 8001168:	f003 0302 	and.w	r3, r3, #2
 800116c:	2b00      	cmp	r3, #0
 800116e:	d0ee      	beq.n	800114e <HAL_RCC_OscConfig+0x37e>
 8001170:	e014      	b.n	800119c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001172:	f7ff fbc7 	bl	8000904 <HAL_GetTick>
 8001176:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001178:	e00a      	b.n	8001190 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800117a:	f7ff fbc3 	bl	8000904 <HAL_GetTick>
 800117e:	4602      	mov	r2, r0
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001188:	4293      	cmp	r3, r2
 800118a:	d901      	bls.n	8001190 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800118c:	2303      	movs	r3, #3
 800118e:	e09b      	b.n	80012c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001190:	4b40      	ldr	r3, [pc, #256]	@ (8001294 <HAL_RCC_OscConfig+0x4c4>)
 8001192:	6a1b      	ldr	r3, [r3, #32]
 8001194:	f003 0302 	and.w	r3, r3, #2
 8001198:	2b00      	cmp	r3, #0
 800119a:	d1ee      	bne.n	800117a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800119c:	7dfb      	ldrb	r3, [r7, #23]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d105      	bne.n	80011ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011a2:	4b3c      	ldr	r3, [pc, #240]	@ (8001294 <HAL_RCC_OscConfig+0x4c4>)
 80011a4:	69db      	ldr	r3, [r3, #28]
 80011a6:	4a3b      	ldr	r2, [pc, #236]	@ (8001294 <HAL_RCC_OscConfig+0x4c4>)
 80011a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80011ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	f000 8087 	beq.w	80012c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011b8:	4b36      	ldr	r3, [pc, #216]	@ (8001294 <HAL_RCC_OscConfig+0x4c4>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 030c 	and.w	r3, r3, #12
 80011c0:	2b08      	cmp	r3, #8
 80011c2:	d061      	beq.n	8001288 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	69db      	ldr	r3, [r3, #28]
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d146      	bne.n	800125a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011cc:	4b33      	ldr	r3, [pc, #204]	@ (800129c <HAL_RCC_OscConfig+0x4cc>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d2:	f7ff fb97 	bl	8000904 <HAL_GetTick>
 80011d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011d8:	e008      	b.n	80011ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011da:	f7ff fb93 	bl	8000904 <HAL_GetTick>
 80011de:	4602      	mov	r2, r0
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d901      	bls.n	80011ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011e8:	2303      	movs	r3, #3
 80011ea:	e06d      	b.n	80012c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ec:	4b29      	ldr	r3, [pc, #164]	@ (8001294 <HAL_RCC_OscConfig+0x4c4>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d1f0      	bne.n	80011da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a1b      	ldr	r3, [r3, #32]
 80011fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001200:	d108      	bne.n	8001214 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001202:	4b24      	ldr	r3, [pc, #144]	@ (8001294 <HAL_RCC_OscConfig+0x4c4>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	4921      	ldr	r1, [pc, #132]	@ (8001294 <HAL_RCC_OscConfig+0x4c4>)
 8001210:	4313      	orrs	r3, r2
 8001212:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001214:	4b1f      	ldr	r3, [pc, #124]	@ (8001294 <HAL_RCC_OscConfig+0x4c4>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6a19      	ldr	r1, [r3, #32]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001224:	430b      	orrs	r3, r1
 8001226:	491b      	ldr	r1, [pc, #108]	@ (8001294 <HAL_RCC_OscConfig+0x4c4>)
 8001228:	4313      	orrs	r3, r2
 800122a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800122c:	4b1b      	ldr	r3, [pc, #108]	@ (800129c <HAL_RCC_OscConfig+0x4cc>)
 800122e:	2201      	movs	r2, #1
 8001230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001232:	f7ff fb67 	bl	8000904 <HAL_GetTick>
 8001236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001238:	e008      	b.n	800124c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800123a:	f7ff fb63 	bl	8000904 <HAL_GetTick>
 800123e:	4602      	mov	r2, r0
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d901      	bls.n	800124c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001248:	2303      	movs	r3, #3
 800124a:	e03d      	b.n	80012c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800124c:	4b11      	ldr	r3, [pc, #68]	@ (8001294 <HAL_RCC_OscConfig+0x4c4>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d0f0      	beq.n	800123a <HAL_RCC_OscConfig+0x46a>
 8001258:	e035      	b.n	80012c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800125a:	4b10      	ldr	r3, [pc, #64]	@ (800129c <HAL_RCC_OscConfig+0x4cc>)
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001260:	f7ff fb50 	bl	8000904 <HAL_GetTick>
 8001264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001266:	e008      	b.n	800127a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001268:	f7ff fb4c 	bl	8000904 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b02      	cmp	r3, #2
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e026      	b.n	80012c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800127a:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <HAL_RCC_OscConfig+0x4c4>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1f0      	bne.n	8001268 <HAL_RCC_OscConfig+0x498>
 8001286:	e01e      	b.n	80012c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	69db      	ldr	r3, [r3, #28]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d107      	bne.n	80012a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e019      	b.n	80012c8 <HAL_RCC_OscConfig+0x4f8>
 8001294:	40021000 	.word	0x40021000
 8001298:	40007000 	.word	0x40007000
 800129c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012a0:	4b0b      	ldr	r3, [pc, #44]	@ (80012d0 <HAL_RCC_OscConfig+0x500>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a1b      	ldr	r3, [r3, #32]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d106      	bne.n	80012c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012be:	429a      	cmp	r2, r3
 80012c0:	d001      	beq.n	80012c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e000      	b.n	80012c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3718      	adds	r7, #24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40021000 	.word	0x40021000

080012d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d101      	bne.n	80012e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e0d0      	b.n	800148a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012e8:	4b6a      	ldr	r3, [pc, #424]	@ (8001494 <HAL_RCC_ClockConfig+0x1c0>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0307 	and.w	r3, r3, #7
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d910      	bls.n	8001318 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012f6:	4b67      	ldr	r3, [pc, #412]	@ (8001494 <HAL_RCC_ClockConfig+0x1c0>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f023 0207 	bic.w	r2, r3, #7
 80012fe:	4965      	ldr	r1, [pc, #404]	@ (8001494 <HAL_RCC_ClockConfig+0x1c0>)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	4313      	orrs	r3, r2
 8001304:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001306:	4b63      	ldr	r3, [pc, #396]	@ (8001494 <HAL_RCC_ClockConfig+0x1c0>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	429a      	cmp	r2, r3
 8001312:	d001      	beq.n	8001318 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e0b8      	b.n	800148a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0302 	and.w	r3, r3, #2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d020      	beq.n	8001366 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0304 	and.w	r3, r3, #4
 800132c:	2b00      	cmp	r3, #0
 800132e:	d005      	beq.n	800133c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001330:	4b59      	ldr	r3, [pc, #356]	@ (8001498 <HAL_RCC_ClockConfig+0x1c4>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	4a58      	ldr	r2, [pc, #352]	@ (8001498 <HAL_RCC_ClockConfig+0x1c4>)
 8001336:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800133a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0308 	and.w	r3, r3, #8
 8001344:	2b00      	cmp	r3, #0
 8001346:	d005      	beq.n	8001354 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001348:	4b53      	ldr	r3, [pc, #332]	@ (8001498 <HAL_RCC_ClockConfig+0x1c4>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	4a52      	ldr	r2, [pc, #328]	@ (8001498 <HAL_RCC_ClockConfig+0x1c4>)
 800134e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001352:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001354:	4b50      	ldr	r3, [pc, #320]	@ (8001498 <HAL_RCC_ClockConfig+0x1c4>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	494d      	ldr	r1, [pc, #308]	@ (8001498 <HAL_RCC_ClockConfig+0x1c4>)
 8001362:	4313      	orrs	r3, r2
 8001364:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	2b00      	cmp	r3, #0
 8001370:	d040      	beq.n	80013f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d107      	bne.n	800138a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137a:	4b47      	ldr	r3, [pc, #284]	@ (8001498 <HAL_RCC_ClockConfig+0x1c4>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d115      	bne.n	80013b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e07f      	b.n	800148a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	2b02      	cmp	r3, #2
 8001390:	d107      	bne.n	80013a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001392:	4b41      	ldr	r3, [pc, #260]	@ (8001498 <HAL_RCC_ClockConfig+0x1c4>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d109      	bne.n	80013b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e073      	b.n	800148a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001498 <HAL_RCC_ClockConfig+0x1c4>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e06b      	b.n	800148a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013b2:	4b39      	ldr	r3, [pc, #228]	@ (8001498 <HAL_RCC_ClockConfig+0x1c4>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f023 0203 	bic.w	r2, r3, #3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	4936      	ldr	r1, [pc, #216]	@ (8001498 <HAL_RCC_ClockConfig+0x1c4>)
 80013c0:	4313      	orrs	r3, r2
 80013c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013c4:	f7ff fa9e 	bl	8000904 <HAL_GetTick>
 80013c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ca:	e00a      	b.n	80013e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013cc:	f7ff fa9a 	bl	8000904 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013da:	4293      	cmp	r3, r2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e053      	b.n	800148a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001498 <HAL_RCC_ClockConfig+0x1c4>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f003 020c 	and.w	r2, r3, #12
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d1eb      	bne.n	80013cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013f4:	4b27      	ldr	r3, [pc, #156]	@ (8001494 <HAL_RCC_ClockConfig+0x1c0>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0307 	and.w	r3, r3, #7
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d210      	bcs.n	8001424 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001402:	4b24      	ldr	r3, [pc, #144]	@ (8001494 <HAL_RCC_ClockConfig+0x1c0>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f023 0207 	bic.w	r2, r3, #7
 800140a:	4922      	ldr	r1, [pc, #136]	@ (8001494 <HAL_RCC_ClockConfig+0x1c0>)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	4313      	orrs	r3, r2
 8001410:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001412:	4b20      	ldr	r3, [pc, #128]	@ (8001494 <HAL_RCC_ClockConfig+0x1c0>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	683a      	ldr	r2, [r7, #0]
 800141c:	429a      	cmp	r2, r3
 800141e:	d001      	beq.n	8001424 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e032      	b.n	800148a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0304 	and.w	r3, r3, #4
 800142c:	2b00      	cmp	r3, #0
 800142e:	d008      	beq.n	8001442 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001430:	4b19      	ldr	r3, [pc, #100]	@ (8001498 <HAL_RCC_ClockConfig+0x1c4>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	4916      	ldr	r1, [pc, #88]	@ (8001498 <HAL_RCC_ClockConfig+0x1c4>)
 800143e:	4313      	orrs	r3, r2
 8001440:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0308 	and.w	r3, r3, #8
 800144a:	2b00      	cmp	r3, #0
 800144c:	d009      	beq.n	8001462 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800144e:	4b12      	ldr	r3, [pc, #72]	@ (8001498 <HAL_RCC_ClockConfig+0x1c4>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	691b      	ldr	r3, [r3, #16]
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	490e      	ldr	r1, [pc, #56]	@ (8001498 <HAL_RCC_ClockConfig+0x1c4>)
 800145e:	4313      	orrs	r3, r2
 8001460:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001462:	f000 f821 	bl	80014a8 <HAL_RCC_GetSysClockFreq>
 8001466:	4602      	mov	r2, r0
 8001468:	4b0b      	ldr	r3, [pc, #44]	@ (8001498 <HAL_RCC_ClockConfig+0x1c4>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	091b      	lsrs	r3, r3, #4
 800146e:	f003 030f 	and.w	r3, r3, #15
 8001472:	490a      	ldr	r1, [pc, #40]	@ (800149c <HAL_RCC_ClockConfig+0x1c8>)
 8001474:	5ccb      	ldrb	r3, [r1, r3]
 8001476:	fa22 f303 	lsr.w	r3, r2, r3
 800147a:	4a09      	ldr	r2, [pc, #36]	@ (80014a0 <HAL_RCC_ClockConfig+0x1cc>)
 800147c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800147e:	4b09      	ldr	r3, [pc, #36]	@ (80014a4 <HAL_RCC_ClockConfig+0x1d0>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff f91e 	bl	80006c4 <HAL_InitTick>

  return HAL_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40022000 	.word	0x40022000
 8001498:	40021000 	.word	0x40021000
 800149c:	080047c0 	.word	0x080047c0
 80014a0:	20000000 	.word	0x20000000
 80014a4:	20000004 	.word	0x20000004

080014a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b087      	sub	sp, #28
 80014ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014ae:	2300      	movs	r3, #0
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
 80014ba:	2300      	movs	r3, #0
 80014bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80014be:	2300      	movs	r3, #0
 80014c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80014c2:	4b1e      	ldr	r3, [pc, #120]	@ (800153c <HAL_RCC_GetSysClockFreq+0x94>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f003 030c 	and.w	r3, r3, #12
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	d002      	beq.n	80014d8 <HAL_RCC_GetSysClockFreq+0x30>
 80014d2:	2b08      	cmp	r3, #8
 80014d4:	d003      	beq.n	80014de <HAL_RCC_GetSysClockFreq+0x36>
 80014d6:	e027      	b.n	8001528 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014d8:	4b19      	ldr	r3, [pc, #100]	@ (8001540 <HAL_RCC_GetSysClockFreq+0x98>)
 80014da:	613b      	str	r3, [r7, #16]
      break;
 80014dc:	e027      	b.n	800152e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	0c9b      	lsrs	r3, r3, #18
 80014e2:	f003 030f 	and.w	r3, r3, #15
 80014e6:	4a17      	ldr	r2, [pc, #92]	@ (8001544 <HAL_RCC_GetSysClockFreq+0x9c>)
 80014e8:	5cd3      	ldrb	r3, [r2, r3]
 80014ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d010      	beq.n	8001518 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014f6:	4b11      	ldr	r3, [pc, #68]	@ (800153c <HAL_RCC_GetSysClockFreq+0x94>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	0c5b      	lsrs	r3, r3, #17
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	4a11      	ldr	r2, [pc, #68]	@ (8001548 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001502:	5cd3      	ldrb	r3, [r2, r3]
 8001504:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a0d      	ldr	r2, [pc, #52]	@ (8001540 <HAL_RCC_GetSysClockFreq+0x98>)
 800150a:	fb03 f202 	mul.w	r2, r3, r2
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	fbb2 f3f3 	udiv	r3, r2, r3
 8001514:	617b      	str	r3, [r7, #20]
 8001516:	e004      	b.n	8001522 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a0c      	ldr	r2, [pc, #48]	@ (800154c <HAL_RCC_GetSysClockFreq+0xa4>)
 800151c:	fb02 f303 	mul.w	r3, r2, r3
 8001520:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	613b      	str	r3, [r7, #16]
      break;
 8001526:	e002      	b.n	800152e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001528:	4b05      	ldr	r3, [pc, #20]	@ (8001540 <HAL_RCC_GetSysClockFreq+0x98>)
 800152a:	613b      	str	r3, [r7, #16]
      break;
 800152c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800152e:	693b      	ldr	r3, [r7, #16]
}
 8001530:	4618      	mov	r0, r3
 8001532:	371c      	adds	r7, #28
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	40021000 	.word	0x40021000
 8001540:	007a1200 	.word	0x007a1200
 8001544:	080047d8 	.word	0x080047d8
 8001548:	080047e8 	.word	0x080047e8
 800154c:	003d0900 	.word	0x003d0900

08001550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001554:	4b02      	ldr	r3, [pc, #8]	@ (8001560 <HAL_RCC_GetHCLKFreq+0x10>)
 8001556:	681b      	ldr	r3, [r3, #0]
}
 8001558:	4618      	mov	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	20000000 	.word	0x20000000

08001564 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001568:	f7ff fff2 	bl	8001550 <HAL_RCC_GetHCLKFreq>
 800156c:	4602      	mov	r2, r0
 800156e:	4b05      	ldr	r3, [pc, #20]	@ (8001584 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	0a1b      	lsrs	r3, r3, #8
 8001574:	f003 0307 	and.w	r3, r3, #7
 8001578:	4903      	ldr	r1, [pc, #12]	@ (8001588 <HAL_RCC_GetPCLK1Freq+0x24>)
 800157a:	5ccb      	ldrb	r3, [r1, r3]
 800157c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001580:	4618      	mov	r0, r3
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40021000 	.word	0x40021000
 8001588:	080047d0 	.word	0x080047d0

0800158c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001590:	f7ff ffde 	bl	8001550 <HAL_RCC_GetHCLKFreq>
 8001594:	4602      	mov	r2, r0
 8001596:	4b05      	ldr	r3, [pc, #20]	@ (80015ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	0adb      	lsrs	r3, r3, #11
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	4903      	ldr	r1, [pc, #12]	@ (80015b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80015a2:	5ccb      	ldrb	r3, [r1, r3]
 80015a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40021000 	.word	0x40021000
 80015b0:	080047d0 	.word	0x080047d0

080015b4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	220f      	movs	r2, #15
 80015c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80015c4:	4b11      	ldr	r3, [pc, #68]	@ (800160c <HAL_RCC_GetClockConfig+0x58>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 0203 	and.w	r2, r3, #3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80015d0:	4b0e      	ldr	r3, [pc, #56]	@ (800160c <HAL_RCC_GetClockConfig+0x58>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80015dc:	4b0b      	ldr	r3, [pc, #44]	@ (800160c <HAL_RCC_GetClockConfig+0x58>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80015e8:	4b08      	ldr	r3, [pc, #32]	@ (800160c <HAL_RCC_GetClockConfig+0x58>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	08db      	lsrs	r3, r3, #3
 80015ee:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80015f6:	4b06      	ldr	r3, [pc, #24]	@ (8001610 <HAL_RCC_GetClockConfig+0x5c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0207 	and.w	r2, r3, #7
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr
 800160c:	40021000 	.word	0x40021000
 8001610:	40022000 	.word	0x40022000

08001614 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800161c:	4b0a      	ldr	r3, [pc, #40]	@ (8001648 <RCC_Delay+0x34>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a0a      	ldr	r2, [pc, #40]	@ (800164c <RCC_Delay+0x38>)
 8001622:	fba2 2303 	umull	r2, r3, r2, r3
 8001626:	0a5b      	lsrs	r3, r3, #9
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	fb02 f303 	mul.w	r3, r2, r3
 800162e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001630:	bf00      	nop
  }
  while (Delay --);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	1e5a      	subs	r2, r3, #1
 8001636:	60fa      	str	r2, [r7, #12]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1f9      	bne.n	8001630 <RCC_Delay+0x1c>
}
 800163c:	bf00      	nop
 800163e:	bf00      	nop
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr
 8001648:	20000000 	.word	0x20000000
 800164c:	10624dd3 	.word	0x10624dd3

08001650 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d101      	bne.n	8001662 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e041      	b.n	80016e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d106      	bne.n	800167c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f000 f839 	bl	80016ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2202      	movs	r2, #2
 8001680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3304      	adds	r3, #4
 800168c:	4619      	mov	r1, r3
 800168e:	4610      	mov	r0, r2
 8001690:	f000 f996 	bl	80019c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2201      	movs	r2, #1
 8001698:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2201      	movs	r2, #1
 80016a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2201      	movs	r2, #1
 80016a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2201      	movs	r2, #1
 80016b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2201      	movs	r2, #1
 80016c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2201      	movs	r2, #1
 80016c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2201      	movs	r2, #1
 80016d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2201      	movs	r2, #1
 80016d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2201      	movs	r2, #1
 80016e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr

08001700 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800170e:	b2db      	uxtb	r3, r3
 8001710:	2b01      	cmp	r3, #1
 8001712:	d001      	beq.n	8001718 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e035      	b.n	8001784 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2202      	movs	r2, #2
 800171c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	68da      	ldr	r2, [r3, #12]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 0201 	orr.w	r2, r2, #1
 800172e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a16      	ldr	r2, [pc, #88]	@ (8001790 <HAL_TIM_Base_Start_IT+0x90>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d009      	beq.n	800174e <HAL_TIM_Base_Start_IT+0x4e>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001742:	d004      	beq.n	800174e <HAL_TIM_Base_Start_IT+0x4e>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a12      	ldr	r2, [pc, #72]	@ (8001794 <HAL_TIM_Base_Start_IT+0x94>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d111      	bne.n	8001772 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2b06      	cmp	r3, #6
 800175e:	d010      	beq.n	8001782 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f042 0201 	orr.w	r2, r2, #1
 800176e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001770:	e007      	b.n	8001782 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f042 0201 	orr.w	r2, r2, #1
 8001780:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	40012c00 	.word	0x40012c00
 8001794:	40000400 	.word	0x40000400

08001798 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d020      	beq.n	80017fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d01b      	beq.n	80017fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f06f 0202 	mvn.w	r2, #2
 80017cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2201      	movs	r2, #1
 80017d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	f003 0303 	and.w	r3, r3, #3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d003      	beq.n	80017ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 f8d1 	bl	800198a <HAL_TIM_IC_CaptureCallback>
 80017e8:	e005      	b.n	80017f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 f8c4 	bl	8001978 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f000 f8d3 	bl	800199c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	f003 0304 	and.w	r3, r3, #4
 8001802:	2b00      	cmp	r3, #0
 8001804:	d020      	beq.n	8001848 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	2b00      	cmp	r3, #0
 800180e:	d01b      	beq.n	8001848 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f06f 0204 	mvn.w	r2, #4
 8001818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2202      	movs	r2, #2
 800181e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f000 f8ab 	bl	800198a <HAL_TIM_IC_CaptureCallback>
 8001834:	e005      	b.n	8001842 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 f89e 	bl	8001978 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f000 f8ad 	bl	800199c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	2b00      	cmp	r3, #0
 8001850:	d020      	beq.n	8001894 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	f003 0308 	and.w	r3, r3, #8
 8001858:	2b00      	cmp	r3, #0
 800185a:	d01b      	beq.n	8001894 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f06f 0208 	mvn.w	r2, #8
 8001864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2204      	movs	r2, #4
 800186a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 f885 	bl	800198a <HAL_TIM_IC_CaptureCallback>
 8001880:	e005      	b.n	800188e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 f878 	bl	8001978 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f000 f887 	bl	800199c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	f003 0310 	and.w	r3, r3, #16
 800189a:	2b00      	cmp	r3, #0
 800189c:	d020      	beq.n	80018e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f003 0310 	and.w	r3, r3, #16
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d01b      	beq.n	80018e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f06f 0210 	mvn.w	r2, #16
 80018b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2208      	movs	r2, #8
 80018b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 f85f 	bl	800198a <HAL_TIM_IC_CaptureCallback>
 80018cc:	e005      	b.n	80018da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 f852 	bl	8001978 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 f861 	bl	800199c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00c      	beq.n	8001904 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f003 0301 	and.w	r3, r3, #1
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d007      	beq.n	8001904 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f06f 0201 	mvn.w	r2, #1
 80018fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7fe fe44 	bl	800058c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800190a:	2b00      	cmp	r3, #0
 800190c:	d00c      	beq.n	8001928 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001914:	2b00      	cmp	r3, #0
 8001916:	d007      	beq.n	8001928 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 f8b9 	bl	8001a9a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00c      	beq.n	800194c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001938:	2b00      	cmp	r3, #0
 800193a:	d007      	beq.n	800194c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f000 f831 	bl	80019ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	f003 0320 	and.w	r3, r3, #32
 8001952:	2b00      	cmp	r3, #0
 8001954:	d00c      	beq.n	8001970 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f003 0320 	and.w	r3, r3, #32
 800195c:	2b00      	cmp	r3, #0
 800195e:	d007      	beq.n	8001970 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f06f 0220 	mvn.w	r2, #32
 8001968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f000 f88c 	bl	8001a88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001970:	bf00      	nop
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr

0800198a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr

0800199c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bc80      	pop	{r7}
 80019ac:	4770      	bx	lr

080019ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b083      	sub	sp, #12
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr

080019c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a2b      	ldr	r2, [pc, #172]	@ (8001a80 <TIM_Base_SetConfig+0xc0>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d007      	beq.n	80019e8 <TIM_Base_SetConfig+0x28>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019de:	d003      	beq.n	80019e8 <TIM_Base_SetConfig+0x28>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a28      	ldr	r2, [pc, #160]	@ (8001a84 <TIM_Base_SetConfig+0xc4>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d108      	bne.n	80019fa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80019ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a20      	ldr	r2, [pc, #128]	@ (8001a80 <TIM_Base_SetConfig+0xc0>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d007      	beq.n	8001a12 <TIM_Base_SetConfig+0x52>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a08:	d003      	beq.n	8001a12 <TIM_Base_SetConfig+0x52>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a1d      	ldr	r2, [pc, #116]	@ (8001a84 <TIM_Base_SetConfig+0xc4>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d108      	bne.n	8001a24 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001a18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a0d      	ldr	r2, [pc, #52]	@ (8001a80 <TIM_Base_SetConfig+0xc0>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d103      	bne.n	8001a58 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	691a      	ldr	r2, [r3, #16]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d005      	beq.n	8001a76 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	f023 0201 	bic.w	r2, r3, #1
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	611a      	str	r2, [r3, #16]
  }
}
 8001a76:	bf00      	nop
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr
 8001a80:	40012c00 	.word	0x40012c00
 8001a84:	40000400 	.word	0x40000400

08001a88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr

08001a9a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr

08001aac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e042      	b.n	8001b44 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d106      	bne.n	8001ad8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7fe fdaa 	bl	800062c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2224      	movs	r2, #36	@ 0x24
 8001adc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68da      	ldr	r2, [r3, #12]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001aee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f000 f971 	bl	8001dd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	691a      	ldr	r2, [r3, #16]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001b04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	695a      	ldr	r2, [r3, #20]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001b14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68da      	ldr	r2, [r3, #12]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001b24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2220      	movs	r2, #32
 8001b30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2220      	movs	r2, #32
 8001b38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08a      	sub	sp, #40	@ 0x28
 8001b50:	af02      	add	r7, sp, #8
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	603b      	str	r3, [r7, #0]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b20      	cmp	r3, #32
 8001b6a:	d175      	bne.n	8001c58 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d002      	beq.n	8001b78 <HAL_UART_Transmit+0x2c>
 8001b72:	88fb      	ldrh	r3, [r7, #6]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d101      	bne.n	8001b7c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e06e      	b.n	8001c5a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2221      	movs	r2, #33	@ 0x21
 8001b86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b8a:	f7fe febb 	bl	8000904 <HAL_GetTick>
 8001b8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	88fa      	ldrh	r2, [r7, #6]
 8001b94:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	88fa      	ldrh	r2, [r7, #6]
 8001b9a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ba4:	d108      	bne.n	8001bb8 <HAL_UART_Transmit+0x6c>
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d104      	bne.n	8001bb8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	61bb      	str	r3, [r7, #24]
 8001bb6:	e003      	b.n	8001bc0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001bc0:	e02e      	b.n	8001c20 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	2180      	movs	r1, #128	@ 0x80
 8001bcc:	68f8      	ldr	r0, [r7, #12]
 8001bce:	f000 f848 	bl	8001c62 <UART_WaitOnFlagUntilTimeout>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d005      	beq.n	8001be4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2220      	movs	r2, #32
 8001bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e03a      	b.n	8001c5a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10b      	bne.n	8001c02 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	881b      	ldrh	r3, [r3, #0]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001bf8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	3302      	adds	r3, #2
 8001bfe:	61bb      	str	r3, [r7, #24]
 8001c00:	e007      	b.n	8001c12 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	781a      	ldrb	r2, [r3, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1cb      	bne.n	8001bc2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	2200      	movs	r2, #0
 8001c32:	2140      	movs	r1, #64	@ 0x40
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	f000 f814 	bl	8001c62 <UART_WaitOnFlagUntilTimeout>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d005      	beq.n	8001c4c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2220      	movs	r2, #32
 8001c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e006      	b.n	8001c5a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2220      	movs	r2, #32
 8001c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001c54:	2300      	movs	r3, #0
 8001c56:	e000      	b.n	8001c5a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001c58:	2302      	movs	r3, #2
  }
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3720      	adds	r7, #32
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b086      	sub	sp, #24
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	60f8      	str	r0, [r7, #12]
 8001c6a:	60b9      	str	r1, [r7, #8]
 8001c6c:	603b      	str	r3, [r7, #0]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c72:	e03b      	b.n	8001cec <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c74:	6a3b      	ldr	r3, [r7, #32]
 8001c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c7a:	d037      	beq.n	8001cec <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c7c:	f7fe fe42 	bl	8000904 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	6a3a      	ldr	r2, [r7, #32]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d302      	bcc.n	8001c92 <UART_WaitOnFlagUntilTimeout+0x30>
 8001c8c:	6a3b      	ldr	r3, [r7, #32]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e03a      	b.n	8001d0c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d023      	beq.n	8001cec <UART_WaitOnFlagUntilTimeout+0x8a>
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	2b80      	cmp	r3, #128	@ 0x80
 8001ca8:	d020      	beq.n	8001cec <UART_WaitOnFlagUntilTimeout+0x8a>
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	2b40      	cmp	r3, #64	@ 0x40
 8001cae:	d01d      	beq.n	8001cec <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0308 	and.w	r3, r3, #8
 8001cba:	2b08      	cmp	r3, #8
 8001cbc:	d116      	bne.n	8001cec <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	617b      	str	r3, [r7, #20]
 8001cd2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f000 f81d 	bl	8001d14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2208      	movs	r2, #8
 8001cde:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e00f      	b.n	8001d0c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	bf0c      	ite	eq
 8001cfc:	2301      	moveq	r3, #1
 8001cfe:	2300      	movne	r3, #0
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	461a      	mov	r2, r3
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d0b4      	beq.n	8001c74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3718      	adds	r7, #24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b095      	sub	sp, #84	@ 0x54
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	330c      	adds	r3, #12
 8001d22:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d26:	e853 3f00 	ldrex	r3, [r3]
 8001d2a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001d32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	330c      	adds	r3, #12
 8001d3a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d3c:	643a      	str	r2, [r7, #64]	@ 0x40
 8001d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d40:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001d42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001d44:	e841 2300 	strex	r3, r2, [r1]
 8001d48:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1e5      	bne.n	8001d1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	3314      	adds	r3, #20
 8001d56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d58:	6a3b      	ldr	r3, [r7, #32]
 8001d5a:	e853 3f00 	ldrex	r3, [r3]
 8001d5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	f023 0301 	bic.w	r3, r3, #1
 8001d66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	3314      	adds	r3, #20
 8001d6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001d70:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d78:	e841 2300 	strex	r3, r2, [r1]
 8001d7c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1e5      	bne.n	8001d50 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d119      	bne.n	8001dc0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	330c      	adds	r3, #12
 8001d92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	e853 3f00 	ldrex	r3, [r3]
 8001d9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	f023 0310 	bic.w	r3, r3, #16
 8001da2:	647b      	str	r3, [r7, #68]	@ 0x44
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	330c      	adds	r3, #12
 8001daa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001dac:	61ba      	str	r2, [r7, #24]
 8001dae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001db0:	6979      	ldr	r1, [r7, #20]
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	e841 2300 	strex	r3, r2, [r1]
 8001db8:	613b      	str	r3, [r7, #16]
   return(result);
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1e5      	bne.n	8001d8c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2220      	movs	r2, #32
 8001dc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001dce:	bf00      	nop
 8001dd0:	3754      	adds	r7, #84	@ 0x54
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr

08001dd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68da      	ldr	r2, [r3, #12]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	430a      	orrs	r2, r1
 8001df4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689a      	ldr	r2, [r3, #8]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001e12:	f023 030c 	bic.w	r3, r3, #12
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	6812      	ldr	r2, [r2, #0]
 8001e1a:	68b9      	ldr	r1, [r7, #8]
 8001e1c:	430b      	orrs	r3, r1
 8001e1e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	699a      	ldr	r2, [r3, #24]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a2c      	ldr	r2, [pc, #176]	@ (8001eec <UART_SetConfig+0x114>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d103      	bne.n	8001e48 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001e40:	f7ff fba4 	bl	800158c <HAL_RCC_GetPCLK2Freq>
 8001e44:	60f8      	str	r0, [r7, #12]
 8001e46:	e002      	b.n	8001e4e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001e48:	f7ff fb8c 	bl	8001564 <HAL_RCC_GetPCLK1Freq>
 8001e4c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	4613      	mov	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	009a      	lsls	r2, r3, #2
 8001e58:	441a      	add	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e64:	4a22      	ldr	r2, [pc, #136]	@ (8001ef0 <UART_SetConfig+0x118>)
 8001e66:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6a:	095b      	lsrs	r3, r3, #5
 8001e6c:	0119      	lsls	r1, r3, #4
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	4613      	mov	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	009a      	lsls	r2, r3, #2
 8001e78:	441a      	add	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e84:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef0 <UART_SetConfig+0x118>)
 8001e86:	fba3 0302 	umull	r0, r3, r3, r2
 8001e8a:	095b      	lsrs	r3, r3, #5
 8001e8c:	2064      	movs	r0, #100	@ 0x64
 8001e8e:	fb00 f303 	mul.w	r3, r0, r3
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	011b      	lsls	r3, r3, #4
 8001e96:	3332      	adds	r3, #50	@ 0x32
 8001e98:	4a15      	ldr	r2, [pc, #84]	@ (8001ef0 <UART_SetConfig+0x118>)
 8001e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9e:	095b      	lsrs	r3, r3, #5
 8001ea0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ea4:	4419      	add	r1, r3
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	009a      	lsls	r2, r3, #2
 8001eb0:	441a      	add	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef0 <UART_SetConfig+0x118>)
 8001ebe:	fba3 0302 	umull	r0, r3, r3, r2
 8001ec2:	095b      	lsrs	r3, r3, #5
 8001ec4:	2064      	movs	r0, #100	@ 0x64
 8001ec6:	fb00 f303 	mul.w	r3, r0, r3
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	011b      	lsls	r3, r3, #4
 8001ece:	3332      	adds	r3, #50	@ 0x32
 8001ed0:	4a07      	ldr	r2, [pc, #28]	@ (8001ef0 <UART_SetConfig+0x118>)
 8001ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed6:	095b      	lsrs	r3, r3, #5
 8001ed8:	f003 020f 	and.w	r2, r3, #15
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	440a      	add	r2, r1
 8001ee2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001ee4:	bf00      	nop
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40013800 	.word	0x40013800
 8001ef0:	51eb851f 	.word	0x51eb851f

08001ef4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f103 0208 	add.w	r2, r3, #8
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f04f 32ff 	mov.w	r2, #4294967295
 8001f0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f103 0208 	add.w	r2, r3, #8
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f103 0208 	add.w	r2, r3, #8
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bc80      	pop	{r7}
 8001f30:	4770      	bx	lr

08001f32 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bc80      	pop	{r7}
 8001f48:	4770      	bx	lr

08001f4a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b085      	sub	sp, #20
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
 8001f52:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	1c5a      	adds	r2, r3, #1
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	601a      	str	r2, [r3, #0]
}
 8001f86:	bf00      	nop
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr

08001f90 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa6:	d103      	bne.n	8001fb0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	e00c      	b.n	8001fca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3308      	adds	r3, #8
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	e002      	b.n	8001fbe <vListInsert+0x2e>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d2f6      	bcs.n	8001fb8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	1c5a      	adds	r2, r3, #1
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	601a      	str	r2, [r3, #0]
}
 8001ff6:	bf00      	nop
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr

08002000 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6892      	ldr	r2, [r2, #8]
 8002016:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	6852      	ldr	r2, [r2, #4]
 8002020:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	429a      	cmp	r2, r3
 800202a:	d103      	bne.n	8002034 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	1e5a      	subs	r2, r3, #1
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	bc80      	pop	{r7}
 8002050:	4770      	bx	lr
	...

08002054 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d10b      	bne.n	8002080 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800206c:	f383 8811 	msr	BASEPRI, r3
 8002070:	f3bf 8f6f 	isb	sy
 8002074:	f3bf 8f4f 	dsb	sy
 8002078:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800207a:	bf00      	nop
 800207c:	bf00      	nop
 800207e:	e7fd      	b.n	800207c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002080:	f001 fb74 	bl	800376c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800208c:	68f9      	ldr	r1, [r7, #12]
 800208e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002090:	fb01 f303 	mul.w	r3, r1, r3
 8002094:	441a      	add	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020b0:	3b01      	subs	r3, #1
 80020b2:	68f9      	ldr	r1, [r7, #12]
 80020b4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80020b6:	fb01 f303 	mul.w	r3, r1, r3
 80020ba:	441a      	add	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	22ff      	movs	r2, #255	@ 0xff
 80020c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	22ff      	movs	r2, #255	@ 0xff
 80020cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d114      	bne.n	8002100 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d01a      	beq.n	8002114 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	3310      	adds	r3, #16
 80020e2:	4618      	mov	r0, r3
 80020e4:	f000 ff86 	bl	8002ff4 <xTaskRemoveFromEventList>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d012      	beq.n	8002114 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80020ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002124 <xQueueGenericReset+0xd0>)
 80020f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	f3bf 8f4f 	dsb	sy
 80020fa:	f3bf 8f6f 	isb	sy
 80020fe:	e009      	b.n	8002114 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	3310      	adds	r3, #16
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff fef5 	bl	8001ef4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	3324      	adds	r3, #36	@ 0x24
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff fef0 	bl	8001ef4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002114:	f001 fb5a 	bl	80037cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002118:	2301      	movs	r3, #1
}
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	e000ed04 	.word	0xe000ed04

08002128 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08a      	sub	sp, #40	@ 0x28
 800212c:	af02      	add	r7, sp, #8
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	4613      	mov	r3, r2
 8002134:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d10b      	bne.n	8002154 <xQueueGenericCreate+0x2c>
	__asm volatile
 800213c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002140:	f383 8811 	msr	BASEPRI, r3
 8002144:	f3bf 8f6f 	isb	sy
 8002148:	f3bf 8f4f 	dsb	sy
 800214c:	613b      	str	r3, [r7, #16]
}
 800214e:	bf00      	nop
 8002150:	bf00      	nop
 8002152:	e7fd      	b.n	8002150 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	fb02 f303 	mul.w	r3, r2, r3
 800215c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	3348      	adds	r3, #72	@ 0x48
 8002162:	4618      	mov	r0, r3
 8002164:	f001 fbc4 	bl	80038f0 <pvPortMalloc>
 8002168:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d011      	beq.n	8002194 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	3348      	adds	r3, #72	@ 0x48
 8002178:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002182:	79fa      	ldrb	r2, [r7, #7]
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	4613      	mov	r3, r2
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	68b9      	ldr	r1, [r7, #8]
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f000 f805 	bl	800219e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002194:	69bb      	ldr	r3, [r7, #24]
	}
 8002196:	4618      	mov	r0, r3
 8002198:	3720      	adds	r7, #32
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b084      	sub	sp, #16
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	60f8      	str	r0, [r7, #12]
 80021a6:	60b9      	str	r1, [r7, #8]
 80021a8:	607a      	str	r2, [r7, #4]
 80021aa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d103      	bne.n	80021ba <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	e002      	b.n	80021c0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	68ba      	ldr	r2, [r7, #8]
 80021ca:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80021cc:	2101      	movs	r1, #1
 80021ce:	69b8      	ldr	r0, [r7, #24]
 80021d0:	f7ff ff40 	bl	8002054 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80021d4:	bf00      	nop
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08e      	sub	sp, #56	@ 0x38
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
 80021e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80021ea:	2300      	movs	r3, #0
 80021ec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80021f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d10b      	bne.n	8002210 <xQueueGenericSend+0x34>
	__asm volatile
 80021f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021fc:	f383 8811 	msr	BASEPRI, r3
 8002200:	f3bf 8f6f 	isb	sy
 8002204:	f3bf 8f4f 	dsb	sy
 8002208:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800220a:	bf00      	nop
 800220c:	bf00      	nop
 800220e:	e7fd      	b.n	800220c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d103      	bne.n	800221e <xQueueGenericSend+0x42>
 8002216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <xQueueGenericSend+0x46>
 800221e:	2301      	movs	r3, #1
 8002220:	e000      	b.n	8002224 <xQueueGenericSend+0x48>
 8002222:	2300      	movs	r3, #0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d10b      	bne.n	8002240 <xQueueGenericSend+0x64>
	__asm volatile
 8002228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800222c:	f383 8811 	msr	BASEPRI, r3
 8002230:	f3bf 8f6f 	isb	sy
 8002234:	f3bf 8f4f 	dsb	sy
 8002238:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800223a:	bf00      	nop
 800223c:	bf00      	nop
 800223e:	e7fd      	b.n	800223c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	2b02      	cmp	r3, #2
 8002244:	d103      	bne.n	800224e <xQueueGenericSend+0x72>
 8002246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002248:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800224a:	2b01      	cmp	r3, #1
 800224c:	d101      	bne.n	8002252 <xQueueGenericSend+0x76>
 800224e:	2301      	movs	r3, #1
 8002250:	e000      	b.n	8002254 <xQueueGenericSend+0x78>
 8002252:	2300      	movs	r3, #0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d10b      	bne.n	8002270 <xQueueGenericSend+0x94>
	__asm volatile
 8002258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800225c:	f383 8811 	msr	BASEPRI, r3
 8002260:	f3bf 8f6f 	isb	sy
 8002264:	f3bf 8f4f 	dsb	sy
 8002268:	623b      	str	r3, [r7, #32]
}
 800226a:	bf00      	nop
 800226c:	bf00      	nop
 800226e:	e7fd      	b.n	800226c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002270:	f001 f880 	bl	8003374 <xTaskGetSchedulerState>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d102      	bne.n	8002280 <xQueueGenericSend+0xa4>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d101      	bne.n	8002284 <xQueueGenericSend+0xa8>
 8002280:	2301      	movs	r3, #1
 8002282:	e000      	b.n	8002286 <xQueueGenericSend+0xaa>
 8002284:	2300      	movs	r3, #0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10b      	bne.n	80022a2 <xQueueGenericSend+0xc6>
	__asm volatile
 800228a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800228e:	f383 8811 	msr	BASEPRI, r3
 8002292:	f3bf 8f6f 	isb	sy
 8002296:	f3bf 8f4f 	dsb	sy
 800229a:	61fb      	str	r3, [r7, #28]
}
 800229c:	bf00      	nop
 800229e:	bf00      	nop
 80022a0:	e7fd      	b.n	800229e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80022a2:	f001 fa63 	bl	800376c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80022a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80022aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d302      	bcc.n	80022b8 <xQueueGenericSend+0xdc>
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d129      	bne.n	800230c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	68b9      	ldr	r1, [r7, #8]
 80022bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80022be:	f000 f971 	bl	80025a4 <prvCopyDataToQueue>
 80022c2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80022c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d010      	beq.n	80022ee <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80022cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ce:	3324      	adds	r3, #36	@ 0x24
 80022d0:	4618      	mov	r0, r3
 80022d2:	f000 fe8f 	bl	8002ff4 <xTaskRemoveFromEventList>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d013      	beq.n	8002304 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80022dc:	4b3f      	ldr	r3, [pc, #252]	@ (80023dc <xQueueGenericSend+0x200>)
 80022de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	f3bf 8f4f 	dsb	sy
 80022e8:	f3bf 8f6f 	isb	sy
 80022ec:	e00a      	b.n	8002304 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80022ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d007      	beq.n	8002304 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80022f4:	4b39      	ldr	r3, [pc, #228]	@ (80023dc <xQueueGenericSend+0x200>)
 80022f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	f3bf 8f4f 	dsb	sy
 8002300:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002304:	f001 fa62 	bl	80037cc <vPortExitCritical>
				return pdPASS;
 8002308:	2301      	movs	r3, #1
 800230a:	e063      	b.n	80023d4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d103      	bne.n	800231a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002312:	f001 fa5b 	bl	80037cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002316:	2300      	movs	r3, #0
 8002318:	e05c      	b.n	80023d4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800231a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800231c:	2b00      	cmp	r3, #0
 800231e:	d106      	bne.n	800232e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002320:	f107 0314 	add.w	r3, r7, #20
 8002324:	4618      	mov	r0, r3
 8002326:	f000 fec9 	bl	80030bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800232a:	2301      	movs	r3, #1
 800232c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800232e:	f001 fa4d 	bl	80037cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002332:	f000 fc77 	bl	8002c24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002336:	f001 fa19 	bl	800376c <vPortEnterCritical>
 800233a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800233c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002340:	b25b      	sxtb	r3, r3
 8002342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002346:	d103      	bne.n	8002350 <xQueueGenericSend+0x174>
 8002348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800234a:	2200      	movs	r2, #0
 800234c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002352:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002356:	b25b      	sxtb	r3, r3
 8002358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800235c:	d103      	bne.n	8002366 <xQueueGenericSend+0x18a>
 800235e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002366:	f001 fa31 	bl	80037cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800236a:	1d3a      	adds	r2, r7, #4
 800236c:	f107 0314 	add.w	r3, r7, #20
 8002370:	4611      	mov	r1, r2
 8002372:	4618      	mov	r0, r3
 8002374:	f000 feb8 	bl	80030e8 <xTaskCheckForTimeOut>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d124      	bne.n	80023c8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800237e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002380:	f000 fa08 	bl	8002794 <prvIsQueueFull>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d018      	beq.n	80023bc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800238a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800238c:	3310      	adds	r3, #16
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	4611      	mov	r1, r2
 8002392:	4618      	mov	r0, r3
 8002394:	f000 fe08 	bl	8002fa8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002398:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800239a:	f000 f993 	bl	80026c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800239e:	f000 fc4f 	bl	8002c40 <xTaskResumeAll>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f47f af7c 	bne.w	80022a2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80023aa:	4b0c      	ldr	r3, [pc, #48]	@ (80023dc <xQueueGenericSend+0x200>)
 80023ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	f3bf 8f4f 	dsb	sy
 80023b6:	f3bf 8f6f 	isb	sy
 80023ba:	e772      	b.n	80022a2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80023bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80023be:	f000 f981 	bl	80026c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80023c2:	f000 fc3d 	bl	8002c40 <xTaskResumeAll>
 80023c6:	e76c      	b.n	80022a2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80023c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80023ca:	f000 f97b 	bl	80026c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80023ce:	f000 fc37 	bl	8002c40 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80023d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3738      	adds	r7, #56	@ 0x38
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	e000ed04 	.word	0xe000ed04

080023e0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b08c      	sub	sp, #48	@ 0x30
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80023ec:	2300      	movs	r3, #0
 80023ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80023f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10b      	bne.n	8002412 <xQueueReceive+0x32>
	__asm volatile
 80023fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023fe:	f383 8811 	msr	BASEPRI, r3
 8002402:	f3bf 8f6f 	isb	sy
 8002406:	f3bf 8f4f 	dsb	sy
 800240a:	623b      	str	r3, [r7, #32]
}
 800240c:	bf00      	nop
 800240e:	bf00      	nop
 8002410:	e7fd      	b.n	800240e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d103      	bne.n	8002420 <xQueueReceive+0x40>
 8002418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800241a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <xQueueReceive+0x44>
 8002420:	2301      	movs	r3, #1
 8002422:	e000      	b.n	8002426 <xQueueReceive+0x46>
 8002424:	2300      	movs	r3, #0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10b      	bne.n	8002442 <xQueueReceive+0x62>
	__asm volatile
 800242a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800242e:	f383 8811 	msr	BASEPRI, r3
 8002432:	f3bf 8f6f 	isb	sy
 8002436:	f3bf 8f4f 	dsb	sy
 800243a:	61fb      	str	r3, [r7, #28]
}
 800243c:	bf00      	nop
 800243e:	bf00      	nop
 8002440:	e7fd      	b.n	800243e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002442:	f000 ff97 	bl	8003374 <xTaskGetSchedulerState>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d102      	bne.n	8002452 <xQueueReceive+0x72>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <xQueueReceive+0x76>
 8002452:	2301      	movs	r3, #1
 8002454:	e000      	b.n	8002458 <xQueueReceive+0x78>
 8002456:	2300      	movs	r3, #0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10b      	bne.n	8002474 <xQueueReceive+0x94>
	__asm volatile
 800245c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002460:	f383 8811 	msr	BASEPRI, r3
 8002464:	f3bf 8f6f 	isb	sy
 8002468:	f3bf 8f4f 	dsb	sy
 800246c:	61bb      	str	r3, [r7, #24]
}
 800246e:	bf00      	nop
 8002470:	bf00      	nop
 8002472:	e7fd      	b.n	8002470 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002474:	f001 f97a 	bl	800376c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800247a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800247c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800247e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002480:	2b00      	cmp	r3, #0
 8002482:	d01f      	beq.n	80024c4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002484:	68b9      	ldr	r1, [r7, #8]
 8002486:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002488:	f000 f8f6 	bl	8002678 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800248c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248e:	1e5a      	subs	r2, r3, #1
 8002490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002492:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00f      	beq.n	80024bc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800249c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800249e:	3310      	adds	r3, #16
 80024a0:	4618      	mov	r0, r3
 80024a2:	f000 fda7 	bl	8002ff4 <xTaskRemoveFromEventList>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d007      	beq.n	80024bc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80024ac:	4b3c      	ldr	r3, [pc, #240]	@ (80025a0 <xQueueReceive+0x1c0>)
 80024ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	f3bf 8f4f 	dsb	sy
 80024b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80024bc:	f001 f986 	bl	80037cc <vPortExitCritical>
				return pdPASS;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e069      	b.n	8002598 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d103      	bne.n	80024d2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80024ca:	f001 f97f 	bl	80037cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80024ce:	2300      	movs	r3, #0
 80024d0:	e062      	b.n	8002598 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80024d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d106      	bne.n	80024e6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80024d8:	f107 0310 	add.w	r3, r7, #16
 80024dc:	4618      	mov	r0, r3
 80024de:	f000 fded 	bl	80030bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80024e2:	2301      	movs	r3, #1
 80024e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80024e6:	f001 f971 	bl	80037cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80024ea:	f000 fb9b 	bl	8002c24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80024ee:	f001 f93d 	bl	800376c <vPortEnterCritical>
 80024f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80024f8:	b25b      	sxtb	r3, r3
 80024fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fe:	d103      	bne.n	8002508 <xQueueReceive+0x128>
 8002500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800250a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800250e:	b25b      	sxtb	r3, r3
 8002510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002514:	d103      	bne.n	800251e <xQueueReceive+0x13e>
 8002516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800251e:	f001 f955 	bl	80037cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002522:	1d3a      	adds	r2, r7, #4
 8002524:	f107 0310 	add.w	r3, r7, #16
 8002528:	4611      	mov	r1, r2
 800252a:	4618      	mov	r0, r3
 800252c:	f000 fddc 	bl	80030e8 <xTaskCheckForTimeOut>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d123      	bne.n	800257e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002536:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002538:	f000 f916 	bl	8002768 <prvIsQueueEmpty>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d017      	beq.n	8002572 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002544:	3324      	adds	r3, #36	@ 0x24
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	4611      	mov	r1, r2
 800254a:	4618      	mov	r0, r3
 800254c:	f000 fd2c 	bl	8002fa8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002550:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002552:	f000 f8b7 	bl	80026c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002556:	f000 fb73 	bl	8002c40 <xTaskResumeAll>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d189      	bne.n	8002474 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002560:	4b0f      	ldr	r3, [pc, #60]	@ (80025a0 <xQueueReceive+0x1c0>)
 8002562:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	f3bf 8f4f 	dsb	sy
 800256c:	f3bf 8f6f 	isb	sy
 8002570:	e780      	b.n	8002474 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002572:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002574:	f000 f8a6 	bl	80026c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002578:	f000 fb62 	bl	8002c40 <xTaskResumeAll>
 800257c:	e77a      	b.n	8002474 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800257e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002580:	f000 f8a0 	bl	80026c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002584:	f000 fb5c 	bl	8002c40 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002588:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800258a:	f000 f8ed 	bl	8002768 <prvIsQueueEmpty>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	f43f af6f 	beq.w	8002474 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002596:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002598:	4618      	mov	r0, r3
 800259a:	3730      	adds	r7, #48	@ 0x30
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	e000ed04 	.word	0xe000ed04

080025a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10d      	bne.n	80025de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d14d      	bne.n	8002666 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 feee 	bl	80033b0 <xTaskPriorityDisinherit>
 80025d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	609a      	str	r2, [r3, #8]
 80025dc:	e043      	b.n	8002666 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d119      	bne.n	8002618 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6858      	ldr	r0, [r3, #4]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ec:	461a      	mov	r2, r3
 80025ee:	68b9      	ldr	r1, [r7, #8]
 80025f0:	f001 fbc0 	bl	8003d74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fc:	441a      	add	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	429a      	cmp	r2, r3
 800260c:	d32b      	bcc.n	8002666 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	605a      	str	r2, [r3, #4]
 8002616:	e026      	b.n	8002666 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	68d8      	ldr	r0, [r3, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002620:	461a      	mov	r2, r3
 8002622:	68b9      	ldr	r1, [r7, #8]
 8002624:	f001 fba6 	bl	8003d74 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	68da      	ldr	r2, [r3, #12]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002630:	425b      	negs	r3, r3
 8002632:	441a      	add	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	68da      	ldr	r2, [r3, #12]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	429a      	cmp	r2, r3
 8002642:	d207      	bcs.n	8002654 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264c:	425b      	negs	r3, r3
 800264e:	441a      	add	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b02      	cmp	r3, #2
 8002658:	d105      	bne.n	8002666 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d002      	beq.n	8002666 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	3b01      	subs	r3, #1
 8002664:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800266e:	697b      	ldr	r3, [r7, #20]
}
 8002670:	4618      	mov	r0, r3
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002686:	2b00      	cmp	r3, #0
 8002688:	d018      	beq.n	80026bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68da      	ldr	r2, [r3, #12]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002692:	441a      	add	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68da      	ldr	r2, [r3, #12]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d303      	bcc.n	80026ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68d9      	ldr	r1, [r3, #12]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b4:	461a      	mov	r2, r3
 80026b6:	6838      	ldr	r0, [r7, #0]
 80026b8:	f001 fb5c 	bl	8003d74 <memcpy>
	}
}
 80026bc:	bf00      	nop
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80026cc:	f001 f84e 	bl	800376c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80026d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80026d8:	e011      	b.n	80026fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d012      	beq.n	8002708 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3324      	adds	r3, #36	@ 0x24
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 fc84 	bl	8002ff4 <xTaskRemoveFromEventList>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80026f2:	f000 fd5d 	bl	80031b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80026f6:	7bfb      	ldrb	r3, [r7, #15]
 80026f8:	3b01      	subs	r3, #1
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80026fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002702:	2b00      	cmp	r3, #0
 8002704:	dce9      	bgt.n	80026da <prvUnlockQueue+0x16>
 8002706:	e000      	b.n	800270a <prvUnlockQueue+0x46>
					break;
 8002708:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	22ff      	movs	r2, #255	@ 0xff
 800270e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002712:	f001 f85b 	bl	80037cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002716:	f001 f829 	bl	800376c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002720:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002722:	e011      	b.n	8002748 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d012      	beq.n	8002752 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3310      	adds	r3, #16
 8002730:	4618      	mov	r0, r3
 8002732:	f000 fc5f 	bl	8002ff4 <xTaskRemoveFromEventList>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800273c:	f000 fd38 	bl	80031b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002740:	7bbb      	ldrb	r3, [r7, #14]
 8002742:	3b01      	subs	r3, #1
 8002744:	b2db      	uxtb	r3, r3
 8002746:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002748:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800274c:	2b00      	cmp	r3, #0
 800274e:	dce9      	bgt.n	8002724 <prvUnlockQueue+0x60>
 8002750:	e000      	b.n	8002754 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002752:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	22ff      	movs	r2, #255	@ 0xff
 8002758:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800275c:	f001 f836 	bl	80037cc <vPortExitCritical>
}
 8002760:	bf00      	nop
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002770:	f000 fffc 	bl	800376c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002778:	2b00      	cmp	r3, #0
 800277a:	d102      	bne.n	8002782 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800277c:	2301      	movs	r3, #1
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	e001      	b.n	8002786 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002782:	2300      	movs	r3, #0
 8002784:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002786:	f001 f821 	bl	80037cc <vPortExitCritical>

	return xReturn;
 800278a:	68fb      	ldr	r3, [r7, #12]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800279c:	f000 ffe6 	bl	800376c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d102      	bne.n	80027b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80027ac:	2301      	movs	r3, #1
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	e001      	b.n	80027b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80027b6:	f001 f809 	bl	80037cc <vPortExitCritical>

	return xReturn;
 80027ba:	68fb      	ldr	r3, [r7, #12]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b08e      	sub	sp, #56	@ 0x38
 80027c8:	af04      	add	r7, sp, #16
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
 80027d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80027d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d10b      	bne.n	80027f0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80027d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027dc:	f383 8811 	msr	BASEPRI, r3
 80027e0:	f3bf 8f6f 	isb	sy
 80027e4:	f3bf 8f4f 	dsb	sy
 80027e8:	623b      	str	r3, [r7, #32]
}
 80027ea:	bf00      	nop
 80027ec:	bf00      	nop
 80027ee:	e7fd      	b.n	80027ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80027f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10b      	bne.n	800280e <xTaskCreateStatic+0x4a>
	__asm volatile
 80027f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027fa:	f383 8811 	msr	BASEPRI, r3
 80027fe:	f3bf 8f6f 	isb	sy
 8002802:	f3bf 8f4f 	dsb	sy
 8002806:	61fb      	str	r3, [r7, #28]
}
 8002808:	bf00      	nop
 800280a:	bf00      	nop
 800280c:	e7fd      	b.n	800280a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800280e:	2354      	movs	r3, #84	@ 0x54
 8002810:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	2b54      	cmp	r3, #84	@ 0x54
 8002816:	d00b      	beq.n	8002830 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800281c:	f383 8811 	msr	BASEPRI, r3
 8002820:	f3bf 8f6f 	isb	sy
 8002824:	f3bf 8f4f 	dsb	sy
 8002828:	61bb      	str	r3, [r7, #24]
}
 800282a:	bf00      	nop
 800282c:	bf00      	nop
 800282e:	e7fd      	b.n	800282c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002830:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002834:	2b00      	cmp	r3, #0
 8002836:	d01e      	beq.n	8002876 <xTaskCreateStatic+0xb2>
 8002838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800283a:	2b00      	cmp	r3, #0
 800283c:	d01b      	beq.n	8002876 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800283e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002840:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002844:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002846:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284a:	2202      	movs	r2, #2
 800284c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002850:	2300      	movs	r3, #0
 8002852:	9303      	str	r3, [sp, #12]
 8002854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002856:	9302      	str	r3, [sp, #8]
 8002858:	f107 0314 	add.w	r3, r7, #20
 800285c:	9301      	str	r3, [sp, #4]
 800285e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	68b9      	ldr	r1, [r7, #8]
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f000 f850 	bl	800290e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800286e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002870:	f000 f8d6 	bl	8002a20 <prvAddNewTaskToReadyList>
 8002874:	e001      	b.n	800287a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002876:	2300      	movs	r3, #0
 8002878:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800287a:	697b      	ldr	r3, [r7, #20]
	}
 800287c:	4618      	mov	r0, r3
 800287e:	3728      	adds	r7, #40	@ 0x28
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002884:	b580      	push	{r7, lr}
 8002886:	b08c      	sub	sp, #48	@ 0x30
 8002888:	af04      	add	r7, sp, #16
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	603b      	str	r3, [r7, #0]
 8002890:	4613      	mov	r3, r2
 8002892:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002894:	88fb      	ldrh	r3, [r7, #6]
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4618      	mov	r0, r3
 800289a:	f001 f829 	bl	80038f0 <pvPortMalloc>
 800289e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00e      	beq.n	80028c4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80028a6:	2054      	movs	r0, #84	@ 0x54
 80028a8:	f001 f822 	bl	80038f0 <pvPortMalloc>
 80028ac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d003      	beq.n	80028bc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80028ba:	e005      	b.n	80028c8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80028bc:	6978      	ldr	r0, [r7, #20]
 80028be:	f001 f8e5 	bl	8003a8c <vPortFree>
 80028c2:	e001      	b.n	80028c8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d017      	beq.n	80028fe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80028d6:	88fa      	ldrh	r2, [r7, #6]
 80028d8:	2300      	movs	r3, #0
 80028da:	9303      	str	r3, [sp, #12]
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	9302      	str	r3, [sp, #8]
 80028e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028e2:	9301      	str	r3, [sp, #4]
 80028e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	68b9      	ldr	r1, [r7, #8]
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f000 f80e 	bl	800290e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80028f2:	69f8      	ldr	r0, [r7, #28]
 80028f4:	f000 f894 	bl	8002a20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80028f8:	2301      	movs	r3, #1
 80028fa:	61bb      	str	r3, [r7, #24]
 80028fc:	e002      	b.n	8002904 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80028fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002902:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002904:	69bb      	ldr	r3, [r7, #24]
	}
 8002906:	4618      	mov	r0, r3
 8002908:	3720      	adds	r7, #32
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b088      	sub	sp, #32
 8002912:	af00      	add	r7, sp, #0
 8002914:	60f8      	str	r0, [r7, #12]
 8002916:	60b9      	str	r1, [r7, #8]
 8002918:	607a      	str	r2, [r7, #4]
 800291a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800291c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800291e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002926:	3b01      	subs	r3, #1
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	f023 0307 	bic.w	r3, r3, #7
 8002934:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00b      	beq.n	8002958 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8002940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002944:	f383 8811 	msr	BASEPRI, r3
 8002948:	f3bf 8f6f 	isb	sy
 800294c:	f3bf 8f4f 	dsb	sy
 8002950:	617b      	str	r3, [r7, #20]
}
 8002952:	bf00      	nop
 8002954:	bf00      	nop
 8002956:	e7fd      	b.n	8002954 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d01f      	beq.n	800299e <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800295e:	2300      	movs	r3, #0
 8002960:	61fb      	str	r3, [r7, #28]
 8002962:	e012      	b.n	800298a <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002964:	68ba      	ldr	r2, [r7, #8]
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	4413      	add	r3, r2
 800296a:	7819      	ldrb	r1, [r3, #0]
 800296c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	4413      	add	r3, r2
 8002972:	3334      	adds	r3, #52	@ 0x34
 8002974:	460a      	mov	r2, r1
 8002976:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002978:	68ba      	ldr	r2, [r7, #8]
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	4413      	add	r3, r2
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d006      	beq.n	8002992 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	3301      	adds	r3, #1
 8002988:	61fb      	str	r3, [r7, #28]
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	2b0f      	cmp	r3, #15
 800298e:	d9e9      	bls.n	8002964 <prvInitialiseNewTask+0x56>
 8002990:	e000      	b.n	8002994 <prvInitialiseNewTask+0x86>
			{
				break;
 8002992:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800299c:	e003      	b.n	80029a6 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800299e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80029a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029a8:	2b06      	cmp	r3, #6
 80029aa:	d901      	bls.n	80029b0 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80029ac:	2306      	movs	r3, #6
 80029ae:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80029b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80029b4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80029b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80029ba:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80029bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029be:	2200      	movs	r2, #0
 80029c0:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80029c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029c4:	3304      	adds	r3, #4
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff fab3 	bl	8001f32 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80029cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ce:	3318      	adds	r3, #24
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff faae 	bl	8001f32 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80029d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029de:	f1c3 0207 	rsb	r2, r3, #7
 80029e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80029e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029ea:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80029ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ee:	2200      	movs	r2, #0
 80029f0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80029f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	68f9      	ldr	r1, [r7, #12]
 80029fe:	69b8      	ldr	r0, [r7, #24]
 8002a00:	f000 fdc4 	bl	800358c <pxPortInitialiseStack>
 8002a04:	4602      	mov	r2, r0
 8002a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a08:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d002      	beq.n	8002a16 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a16:	bf00      	nop
 8002a18:	3720      	adds	r7, #32
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
	...

08002a20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002a28:	f000 fea0 	bl	800376c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002a2c:	4b2a      	ldr	r3, [pc, #168]	@ (8002ad8 <prvAddNewTaskToReadyList+0xb8>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	3301      	adds	r3, #1
 8002a32:	4a29      	ldr	r2, [pc, #164]	@ (8002ad8 <prvAddNewTaskToReadyList+0xb8>)
 8002a34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002a36:	4b29      	ldr	r3, [pc, #164]	@ (8002adc <prvAddNewTaskToReadyList+0xbc>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d109      	bne.n	8002a52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002a3e:	4a27      	ldr	r2, [pc, #156]	@ (8002adc <prvAddNewTaskToReadyList+0xbc>)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002a44:	4b24      	ldr	r3, [pc, #144]	@ (8002ad8 <prvAddNewTaskToReadyList+0xb8>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d110      	bne.n	8002a6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002a4c:	f000 fbd4 	bl	80031f8 <prvInitialiseTaskLists>
 8002a50:	e00d      	b.n	8002a6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002a52:	4b23      	ldr	r3, [pc, #140]	@ (8002ae0 <prvAddNewTaskToReadyList+0xc0>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d109      	bne.n	8002a6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002a5a:	4b20      	ldr	r3, [pc, #128]	@ (8002adc <prvAddNewTaskToReadyList+0xbc>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d802      	bhi.n	8002a6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002a68:	4a1c      	ldr	r2, [pc, #112]	@ (8002adc <prvAddNewTaskToReadyList+0xbc>)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002a6e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ae4 <prvAddNewTaskToReadyList+0xc4>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	3301      	adds	r3, #1
 8002a74:	4a1b      	ldr	r2, [pc, #108]	@ (8002ae4 <prvAddNewTaskToReadyList+0xc4>)
 8002a76:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	409a      	lsls	r2, r3
 8002a80:	4b19      	ldr	r3, [pc, #100]	@ (8002ae8 <prvAddNewTaskToReadyList+0xc8>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	4a18      	ldr	r2, [pc, #96]	@ (8002ae8 <prvAddNewTaskToReadyList+0xc8>)
 8002a88:	6013      	str	r3, [r2, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a8e:	4613      	mov	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4413      	add	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4a15      	ldr	r2, [pc, #84]	@ (8002aec <prvAddNewTaskToReadyList+0xcc>)
 8002a98:	441a      	add	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4610      	mov	r0, r2
 8002aa2:	f7ff fa52 	bl	8001f4a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002aa6:	f000 fe91 	bl	80037cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8002ae0 <prvAddNewTaskToReadyList+0xc0>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00e      	beq.n	8002ad0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8002adc <prvAddNewTaskToReadyList+0xbc>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d207      	bcs.n	8002ad0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8002af0 <prvAddNewTaskToReadyList+0xd0>)
 8002ac2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	f3bf 8f4f 	dsb	sy
 8002acc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ad0:	bf00      	nop
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	20000480 	.word	0x20000480
 8002adc:	20000380 	.word	0x20000380
 8002ae0:	2000048c 	.word	0x2000048c
 8002ae4:	2000049c 	.word	0x2000049c
 8002ae8:	20000488 	.word	0x20000488
 8002aec:	20000384 	.word	0x20000384
 8002af0:	e000ed04 	.word	0xe000ed04

08002af4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002afc:	2300      	movs	r3, #0
 8002afe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d018      	beq.n	8002b38 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002b06:	4b14      	ldr	r3, [pc, #80]	@ (8002b58 <vTaskDelay+0x64>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00b      	beq.n	8002b26 <vTaskDelay+0x32>
	__asm volatile
 8002b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b12:	f383 8811 	msr	BASEPRI, r3
 8002b16:	f3bf 8f6f 	isb	sy
 8002b1a:	f3bf 8f4f 	dsb	sy
 8002b1e:	60bb      	str	r3, [r7, #8]
}
 8002b20:	bf00      	nop
 8002b22:	bf00      	nop
 8002b24:	e7fd      	b.n	8002b22 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002b26:	f000 f87d 	bl	8002c24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 fcc7 	bl	80034c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002b32:	f000 f885 	bl	8002c40 <xTaskResumeAll>
 8002b36:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d107      	bne.n	8002b4e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002b3e:	4b07      	ldr	r3, [pc, #28]	@ (8002b5c <vTaskDelay+0x68>)
 8002b40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	f3bf 8f4f 	dsb	sy
 8002b4a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002b4e:	bf00      	nop
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	200004a8 	.word	0x200004a8
 8002b5c:	e000ed04 	.word	0xe000ed04

08002b60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b08a      	sub	sp, #40	@ 0x28
 8002b64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002b66:	2300      	movs	r3, #0
 8002b68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002b6e:	463a      	mov	r2, r7
 8002b70:	1d39      	adds	r1, r7, #4
 8002b72:	f107 0308 	add.w	r3, r7, #8
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fd faf2 	bl	8000160 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002b7c:	6839      	ldr	r1, [r7, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68ba      	ldr	r2, [r7, #8]
 8002b82:	9202      	str	r2, [sp, #8]
 8002b84:	9301      	str	r3, [sp, #4]
 8002b86:	2300      	movs	r3, #0
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	460a      	mov	r2, r1
 8002b8e:	491f      	ldr	r1, [pc, #124]	@ (8002c0c <vTaskStartScheduler+0xac>)
 8002b90:	481f      	ldr	r0, [pc, #124]	@ (8002c10 <vTaskStartScheduler+0xb0>)
 8002b92:	f7ff fe17 	bl	80027c4 <xTaskCreateStatic>
 8002b96:	4603      	mov	r3, r0
 8002b98:	4a1e      	ldr	r2, [pc, #120]	@ (8002c14 <vTaskStartScheduler+0xb4>)
 8002b9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002b9c:	4b1d      	ldr	r3, [pc, #116]	@ (8002c14 <vTaskStartScheduler+0xb4>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d002      	beq.n	8002baa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	e001      	b.n	8002bae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002baa:	2300      	movs	r3, #0
 8002bac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d116      	bne.n	8002be2 <vTaskStartScheduler+0x82>
	__asm volatile
 8002bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bb8:	f383 8811 	msr	BASEPRI, r3
 8002bbc:	f3bf 8f6f 	isb	sy
 8002bc0:	f3bf 8f4f 	dsb	sy
 8002bc4:	613b      	str	r3, [r7, #16]
}
 8002bc6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002bc8:	4b13      	ldr	r3, [pc, #76]	@ (8002c18 <vTaskStartScheduler+0xb8>)
 8002bca:	f04f 32ff 	mov.w	r2, #4294967295
 8002bce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002bd0:	4b12      	ldr	r3, [pc, #72]	@ (8002c1c <vTaskStartScheduler+0xbc>)
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002bd6:	4b12      	ldr	r3, [pc, #72]	@ (8002c20 <vTaskStartScheduler+0xc0>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002bdc:	f000 fd54 	bl	8003688 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002be0:	e00f      	b.n	8002c02 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be8:	d10b      	bne.n	8002c02 <vTaskStartScheduler+0xa2>
	__asm volatile
 8002bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bee:	f383 8811 	msr	BASEPRI, r3
 8002bf2:	f3bf 8f6f 	isb	sy
 8002bf6:	f3bf 8f4f 	dsb	sy
 8002bfa:	60fb      	str	r3, [r7, #12]
}
 8002bfc:	bf00      	nop
 8002bfe:	bf00      	nop
 8002c00:	e7fd      	b.n	8002bfe <vTaskStartScheduler+0x9e>
}
 8002c02:	bf00      	nop
 8002c04:	3718      	adds	r7, #24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	080047b8 	.word	0x080047b8
 8002c10:	080031c9 	.word	0x080031c9
 8002c14:	200004a4 	.word	0x200004a4
 8002c18:	200004a0 	.word	0x200004a0
 8002c1c:	2000048c 	.word	0x2000048c
 8002c20:	20000484 	.word	0x20000484

08002c24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002c28:	4b04      	ldr	r3, [pc, #16]	@ (8002c3c <vTaskSuspendAll+0x18>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	4a03      	ldr	r2, [pc, #12]	@ (8002c3c <vTaskSuspendAll+0x18>)
 8002c30:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002c32:	bf00      	nop
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bc80      	pop	{r7}
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	200004a8 	.word	0x200004a8

08002c40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002c46:	2300      	movs	r3, #0
 8002c48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002c4e:	4b42      	ldr	r3, [pc, #264]	@ (8002d58 <xTaskResumeAll+0x118>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10b      	bne.n	8002c6e <xTaskResumeAll+0x2e>
	__asm volatile
 8002c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c5a:	f383 8811 	msr	BASEPRI, r3
 8002c5e:	f3bf 8f6f 	isb	sy
 8002c62:	f3bf 8f4f 	dsb	sy
 8002c66:	603b      	str	r3, [r7, #0]
}
 8002c68:	bf00      	nop
 8002c6a:	bf00      	nop
 8002c6c:	e7fd      	b.n	8002c6a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002c6e:	f000 fd7d 	bl	800376c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002c72:	4b39      	ldr	r3, [pc, #228]	@ (8002d58 <xTaskResumeAll+0x118>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	3b01      	subs	r3, #1
 8002c78:	4a37      	ldr	r2, [pc, #220]	@ (8002d58 <xTaskResumeAll+0x118>)
 8002c7a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c7c:	4b36      	ldr	r3, [pc, #216]	@ (8002d58 <xTaskResumeAll+0x118>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d161      	bne.n	8002d48 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002c84:	4b35      	ldr	r3, [pc, #212]	@ (8002d5c <xTaskResumeAll+0x11c>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d05d      	beq.n	8002d48 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c8c:	e02e      	b.n	8002cec <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c8e:	4b34      	ldr	r3, [pc, #208]	@ (8002d60 <xTaskResumeAll+0x120>)
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	3318      	adds	r3, #24
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7ff f9b0 	bl	8002000 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	3304      	adds	r3, #4
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff f9ab 	bl	8002000 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cae:	2201      	movs	r2, #1
 8002cb0:	409a      	lsls	r2, r3
 8002cb2:	4b2c      	ldr	r3, [pc, #176]	@ (8002d64 <xTaskResumeAll+0x124>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	4a2a      	ldr	r2, [pc, #168]	@ (8002d64 <xTaskResumeAll+0x124>)
 8002cba:	6013      	str	r3, [r2, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4413      	add	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4a27      	ldr	r2, [pc, #156]	@ (8002d68 <xTaskResumeAll+0x128>)
 8002cca:	441a      	add	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	3304      	adds	r3, #4
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4610      	mov	r0, r2
 8002cd4:	f7ff f939 	bl	8001f4a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cdc:	4b23      	ldr	r3, [pc, #140]	@ (8002d6c <xTaskResumeAll+0x12c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d302      	bcc.n	8002cec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002ce6:	4b22      	ldr	r3, [pc, #136]	@ (8002d70 <xTaskResumeAll+0x130>)
 8002ce8:	2201      	movs	r2, #1
 8002cea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002cec:	4b1c      	ldr	r3, [pc, #112]	@ (8002d60 <xTaskResumeAll+0x120>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1cc      	bne.n	8002c8e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002cfa:	f000 fb1b 	bl	8003334 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002cfe:	4b1d      	ldr	r3, [pc, #116]	@ (8002d74 <xTaskResumeAll+0x134>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d010      	beq.n	8002d2c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002d0a:	f000 f837 	bl	8002d7c <xTaskIncrementTick>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d002      	beq.n	8002d1a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002d14:	4b16      	ldr	r3, [pc, #88]	@ (8002d70 <xTaskResumeAll+0x130>)
 8002d16:	2201      	movs	r2, #1
 8002d18:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1f1      	bne.n	8002d0a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002d26:	4b13      	ldr	r3, [pc, #76]	@ (8002d74 <xTaskResumeAll+0x134>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002d2c:	4b10      	ldr	r3, [pc, #64]	@ (8002d70 <xTaskResumeAll+0x130>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d009      	beq.n	8002d48 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002d34:	2301      	movs	r3, #1
 8002d36:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002d38:	4b0f      	ldr	r3, [pc, #60]	@ (8002d78 <xTaskResumeAll+0x138>)
 8002d3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	f3bf 8f4f 	dsb	sy
 8002d44:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002d48:	f000 fd40 	bl	80037cc <vPortExitCritical>

	return xAlreadyYielded;
 8002d4c:	68bb      	ldr	r3, [r7, #8]
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	200004a8 	.word	0x200004a8
 8002d5c:	20000480 	.word	0x20000480
 8002d60:	20000440 	.word	0x20000440
 8002d64:	20000488 	.word	0x20000488
 8002d68:	20000384 	.word	0x20000384
 8002d6c:	20000380 	.word	0x20000380
 8002d70:	20000494 	.word	0x20000494
 8002d74:	20000490 	.word	0x20000490
 8002d78:	e000ed04 	.word	0xe000ed04

08002d7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002d82:	2300      	movs	r3, #0
 8002d84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d86:	4b4f      	ldr	r3, [pc, #316]	@ (8002ec4 <xTaskIncrementTick+0x148>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f040 808f 	bne.w	8002eae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d90:	4b4d      	ldr	r3, [pc, #308]	@ (8002ec8 <xTaskIncrementTick+0x14c>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	3301      	adds	r3, #1
 8002d96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002d98:	4a4b      	ldr	r2, [pc, #300]	@ (8002ec8 <xTaskIncrementTick+0x14c>)
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d121      	bne.n	8002de8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002da4:	4b49      	ldr	r3, [pc, #292]	@ (8002ecc <xTaskIncrementTick+0x150>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00b      	beq.n	8002dc6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8002dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002db2:	f383 8811 	msr	BASEPRI, r3
 8002db6:	f3bf 8f6f 	isb	sy
 8002dba:	f3bf 8f4f 	dsb	sy
 8002dbe:	603b      	str	r3, [r7, #0]
}
 8002dc0:	bf00      	nop
 8002dc2:	bf00      	nop
 8002dc4:	e7fd      	b.n	8002dc2 <xTaskIncrementTick+0x46>
 8002dc6:	4b41      	ldr	r3, [pc, #260]	@ (8002ecc <xTaskIncrementTick+0x150>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	4b40      	ldr	r3, [pc, #256]	@ (8002ed0 <xTaskIncrementTick+0x154>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a3e      	ldr	r2, [pc, #248]	@ (8002ecc <xTaskIncrementTick+0x150>)
 8002dd2:	6013      	str	r3, [r2, #0]
 8002dd4:	4a3e      	ldr	r2, [pc, #248]	@ (8002ed0 <xTaskIncrementTick+0x154>)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	4b3e      	ldr	r3, [pc, #248]	@ (8002ed4 <xTaskIncrementTick+0x158>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	3301      	adds	r3, #1
 8002de0:	4a3c      	ldr	r2, [pc, #240]	@ (8002ed4 <xTaskIncrementTick+0x158>)
 8002de2:	6013      	str	r3, [r2, #0]
 8002de4:	f000 faa6 	bl	8003334 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002de8:	4b3b      	ldr	r3, [pc, #236]	@ (8002ed8 <xTaskIncrementTick+0x15c>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d348      	bcc.n	8002e84 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002df2:	4b36      	ldr	r3, [pc, #216]	@ (8002ecc <xTaskIncrementTick+0x150>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d104      	bne.n	8002e06 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dfc:	4b36      	ldr	r3, [pc, #216]	@ (8002ed8 <xTaskIncrementTick+0x15c>)
 8002dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8002e02:	601a      	str	r2, [r3, #0]
					break;
 8002e04:	e03e      	b.n	8002e84 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e06:	4b31      	ldr	r3, [pc, #196]	@ (8002ecc <xTaskIncrementTick+0x150>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d203      	bcs.n	8002e26 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002e1e:	4a2e      	ldr	r2, [pc, #184]	@ (8002ed8 <xTaskIncrementTick+0x15c>)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002e24:	e02e      	b.n	8002e84 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	3304      	adds	r3, #4
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff f8e8 	bl	8002000 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d004      	beq.n	8002e42 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	3318      	adds	r3, #24
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff f8df 	bl	8002000 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e46:	2201      	movs	r2, #1
 8002e48:	409a      	lsls	r2, r3
 8002e4a:	4b24      	ldr	r3, [pc, #144]	@ (8002edc <xTaskIncrementTick+0x160>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	4a22      	ldr	r2, [pc, #136]	@ (8002edc <xTaskIncrementTick+0x160>)
 8002e52:	6013      	str	r3, [r2, #0]
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e58:	4613      	mov	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4413      	add	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4a1f      	ldr	r2, [pc, #124]	@ (8002ee0 <xTaskIncrementTick+0x164>)
 8002e62:	441a      	add	r2, r3
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	3304      	adds	r3, #4
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4610      	mov	r0, r2
 8002e6c:	f7ff f86d 	bl	8001f4a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e74:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee4 <xTaskIncrementTick+0x168>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d3b9      	bcc.n	8002df2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e82:	e7b6      	b.n	8002df2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002e84:	4b17      	ldr	r3, [pc, #92]	@ (8002ee4 <xTaskIncrementTick+0x168>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e8a:	4915      	ldr	r1, [pc, #84]	@ (8002ee0 <xTaskIncrementTick+0x164>)
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4413      	add	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d901      	bls.n	8002ea0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002ea0:	4b11      	ldr	r3, [pc, #68]	@ (8002ee8 <xTaskIncrementTick+0x16c>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d007      	beq.n	8002eb8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	617b      	str	r3, [r7, #20]
 8002eac:	e004      	b.n	8002eb8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002eae:	4b0f      	ldr	r3, [pc, #60]	@ (8002eec <xTaskIncrementTick+0x170>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	4a0d      	ldr	r2, [pc, #52]	@ (8002eec <xTaskIncrementTick+0x170>)
 8002eb6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002eb8:	697b      	ldr	r3, [r7, #20]
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3718      	adds	r7, #24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	200004a8 	.word	0x200004a8
 8002ec8:	20000484 	.word	0x20000484
 8002ecc:	20000438 	.word	0x20000438
 8002ed0:	2000043c 	.word	0x2000043c
 8002ed4:	20000498 	.word	0x20000498
 8002ed8:	200004a0 	.word	0x200004a0
 8002edc:	20000488 	.word	0x20000488
 8002ee0:	20000384 	.word	0x20000384
 8002ee4:	20000380 	.word	0x20000380
 8002ee8:	20000494 	.word	0x20000494
 8002eec:	20000490 	.word	0x20000490

08002ef0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002ef6:	4b27      	ldr	r3, [pc, #156]	@ (8002f94 <vTaskSwitchContext+0xa4>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002efe:	4b26      	ldr	r3, [pc, #152]	@ (8002f98 <vTaskSwitchContext+0xa8>)
 8002f00:	2201      	movs	r2, #1
 8002f02:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002f04:	e040      	b.n	8002f88 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8002f06:	4b24      	ldr	r3, [pc, #144]	@ (8002f98 <vTaskSwitchContext+0xa8>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f0c:	4b23      	ldr	r3, [pc, #140]	@ (8002f9c <vTaskSwitchContext+0xac>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	fab3 f383 	clz	r3, r3
 8002f18:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002f1a:	7afb      	ldrb	r3, [r7, #11]
 8002f1c:	f1c3 031f 	rsb	r3, r3, #31
 8002f20:	617b      	str	r3, [r7, #20]
 8002f22:	491f      	ldr	r1, [pc, #124]	@ (8002fa0 <vTaskSwitchContext+0xb0>)
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	4613      	mov	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	440b      	add	r3, r1
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10b      	bne.n	8002f4e <vTaskSwitchContext+0x5e>
	__asm volatile
 8002f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f3a:	f383 8811 	msr	BASEPRI, r3
 8002f3e:	f3bf 8f6f 	isb	sy
 8002f42:	f3bf 8f4f 	dsb	sy
 8002f46:	607b      	str	r3, [r7, #4]
}
 8002f48:	bf00      	nop
 8002f4a:	bf00      	nop
 8002f4c:	e7fd      	b.n	8002f4a <vTaskSwitchContext+0x5a>
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	4613      	mov	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	4413      	add	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	4a11      	ldr	r2, [pc, #68]	@ (8002fa0 <vTaskSwitchContext+0xb0>)
 8002f5a:	4413      	add	r3, r2
 8002f5c:	613b      	str	r3, [r7, #16]
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	605a      	str	r2, [r3, #4]
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	685a      	ldr	r2, [r3, #4]
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	3308      	adds	r3, #8
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d104      	bne.n	8002f7e <vTaskSwitchContext+0x8e>
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	685a      	ldr	r2, [r3, #4]
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	605a      	str	r2, [r3, #4]
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	4a07      	ldr	r2, [pc, #28]	@ (8002fa4 <vTaskSwitchContext+0xb4>)
 8002f86:	6013      	str	r3, [r2, #0]
}
 8002f88:	bf00      	nop
 8002f8a:	371c      	adds	r7, #28
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bc80      	pop	{r7}
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	200004a8 	.word	0x200004a8
 8002f98:	20000494 	.word	0x20000494
 8002f9c:	20000488 	.word	0x20000488
 8002fa0:	20000384 	.word	0x20000384
 8002fa4:	20000380 	.word	0x20000380

08002fa8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10b      	bne.n	8002fd0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8002fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fbc:	f383 8811 	msr	BASEPRI, r3
 8002fc0:	f3bf 8f6f 	isb	sy
 8002fc4:	f3bf 8f4f 	dsb	sy
 8002fc8:	60fb      	str	r3, [r7, #12]
}
 8002fca:	bf00      	nop
 8002fcc:	bf00      	nop
 8002fce:	e7fd      	b.n	8002fcc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002fd0:	4b07      	ldr	r3, [pc, #28]	@ (8002ff0 <vTaskPlaceOnEventList+0x48>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	3318      	adds	r3, #24
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f7fe ffd9 	bl	8001f90 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002fde:	2101      	movs	r1, #1
 8002fe0:	6838      	ldr	r0, [r7, #0]
 8002fe2:	f000 fa6d 	bl	80034c0 <prvAddCurrentTaskToDelayedList>
}
 8002fe6:	bf00      	nop
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	20000380 	.word	0x20000380

08002ff4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10b      	bne.n	8003022 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800300a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800300e:	f383 8811 	msr	BASEPRI, r3
 8003012:	f3bf 8f6f 	isb	sy
 8003016:	f3bf 8f4f 	dsb	sy
 800301a:	60fb      	str	r3, [r7, #12]
}
 800301c:	bf00      	nop
 800301e:	bf00      	nop
 8003020:	e7fd      	b.n	800301e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	3318      	adds	r3, #24
 8003026:	4618      	mov	r0, r3
 8003028:	f7fe ffea 	bl	8002000 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800302c:	4b1d      	ldr	r3, [pc, #116]	@ (80030a4 <xTaskRemoveFromEventList+0xb0>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d11c      	bne.n	800306e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	3304      	adds	r3, #4
 8003038:	4618      	mov	r0, r3
 800303a:	f7fe ffe1 	bl	8002000 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003042:	2201      	movs	r2, #1
 8003044:	409a      	lsls	r2, r3
 8003046:	4b18      	ldr	r3, [pc, #96]	@ (80030a8 <xTaskRemoveFromEventList+0xb4>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4313      	orrs	r3, r2
 800304c:	4a16      	ldr	r2, [pc, #88]	@ (80030a8 <xTaskRemoveFromEventList+0xb4>)
 800304e:	6013      	str	r3, [r2, #0]
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003054:	4613      	mov	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4413      	add	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4a13      	ldr	r2, [pc, #76]	@ (80030ac <xTaskRemoveFromEventList+0xb8>)
 800305e:	441a      	add	r2, r3
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	3304      	adds	r3, #4
 8003064:	4619      	mov	r1, r3
 8003066:	4610      	mov	r0, r2
 8003068:	f7fe ff6f 	bl	8001f4a <vListInsertEnd>
 800306c:	e005      	b.n	800307a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	3318      	adds	r3, #24
 8003072:	4619      	mov	r1, r3
 8003074:	480e      	ldr	r0, [pc, #56]	@ (80030b0 <xTaskRemoveFromEventList+0xbc>)
 8003076:	f7fe ff68 	bl	8001f4a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800307e:	4b0d      	ldr	r3, [pc, #52]	@ (80030b4 <xTaskRemoveFromEventList+0xc0>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003084:	429a      	cmp	r2, r3
 8003086:	d905      	bls.n	8003094 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003088:	2301      	movs	r3, #1
 800308a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800308c:	4b0a      	ldr	r3, [pc, #40]	@ (80030b8 <xTaskRemoveFromEventList+0xc4>)
 800308e:	2201      	movs	r2, #1
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	e001      	b.n	8003098 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003094:	2300      	movs	r3, #0
 8003096:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003098:	697b      	ldr	r3, [r7, #20]
}
 800309a:	4618      	mov	r0, r3
 800309c:	3718      	adds	r7, #24
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	200004a8 	.word	0x200004a8
 80030a8:	20000488 	.word	0x20000488
 80030ac:	20000384 	.word	0x20000384
 80030b0:	20000440 	.word	0x20000440
 80030b4:	20000380 	.word	0x20000380
 80030b8:	20000494 	.word	0x20000494

080030bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80030c4:	4b06      	ldr	r3, [pc, #24]	@ (80030e0 <vTaskInternalSetTimeOutState+0x24>)
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80030cc:	4b05      	ldr	r3, [pc, #20]	@ (80030e4 <vTaskInternalSetTimeOutState+0x28>)
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	605a      	str	r2, [r3, #4]
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	bc80      	pop	{r7}
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	20000498 	.word	0x20000498
 80030e4:	20000484 	.word	0x20000484

080030e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b088      	sub	sp, #32
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10b      	bne.n	8003110 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80030f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030fc:	f383 8811 	msr	BASEPRI, r3
 8003100:	f3bf 8f6f 	isb	sy
 8003104:	f3bf 8f4f 	dsb	sy
 8003108:	613b      	str	r3, [r7, #16]
}
 800310a:	bf00      	nop
 800310c:	bf00      	nop
 800310e:	e7fd      	b.n	800310c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10b      	bne.n	800312e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800311a:	f383 8811 	msr	BASEPRI, r3
 800311e:	f3bf 8f6f 	isb	sy
 8003122:	f3bf 8f4f 	dsb	sy
 8003126:	60fb      	str	r3, [r7, #12]
}
 8003128:	bf00      	nop
 800312a:	bf00      	nop
 800312c:	e7fd      	b.n	800312a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800312e:	f000 fb1d 	bl	800376c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003132:	4b1d      	ldr	r3, [pc, #116]	@ (80031a8 <xTaskCheckForTimeOut+0xc0>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314a:	d102      	bne.n	8003152 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800314c:	2300      	movs	r3, #0
 800314e:	61fb      	str	r3, [r7, #28]
 8003150:	e023      	b.n	800319a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	4b15      	ldr	r3, [pc, #84]	@ (80031ac <xTaskCheckForTimeOut+0xc4>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	429a      	cmp	r2, r3
 800315c:	d007      	beq.n	800316e <xTaskCheckForTimeOut+0x86>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	429a      	cmp	r2, r3
 8003166:	d302      	bcc.n	800316e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003168:	2301      	movs	r3, #1
 800316a:	61fb      	str	r3, [r7, #28]
 800316c:	e015      	b.n	800319a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	429a      	cmp	r2, r3
 8003176:	d20b      	bcs.n	8003190 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	1ad2      	subs	r2, r2, r3
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f7ff ff99 	bl	80030bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800318a:	2300      	movs	r3, #0
 800318c:	61fb      	str	r3, [r7, #28]
 800318e:	e004      	b.n	800319a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	2200      	movs	r2, #0
 8003194:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003196:	2301      	movs	r3, #1
 8003198:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800319a:	f000 fb17 	bl	80037cc <vPortExitCritical>

	return xReturn;
 800319e:	69fb      	ldr	r3, [r7, #28]
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3720      	adds	r7, #32
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	20000484 	.word	0x20000484
 80031ac:	20000498 	.word	0x20000498

080031b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80031b4:	4b03      	ldr	r3, [pc, #12]	@ (80031c4 <vTaskMissedYield+0x14>)
 80031b6:	2201      	movs	r2, #1
 80031b8:	601a      	str	r2, [r3, #0]
}
 80031ba:	bf00      	nop
 80031bc:	46bd      	mov	sp, r7
 80031be:	bc80      	pop	{r7}
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	20000494 	.word	0x20000494

080031c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80031d0:	f000 f852 	bl	8003278 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80031d4:	4b06      	ldr	r3, [pc, #24]	@ (80031f0 <prvIdleTask+0x28>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d9f9      	bls.n	80031d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80031dc:	4b05      	ldr	r3, [pc, #20]	@ (80031f4 <prvIdleTask+0x2c>)
 80031de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	f3bf 8f4f 	dsb	sy
 80031e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80031ec:	e7f0      	b.n	80031d0 <prvIdleTask+0x8>
 80031ee:	bf00      	nop
 80031f0:	20000384 	.word	0x20000384
 80031f4:	e000ed04 	.word	0xe000ed04

080031f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031fe:	2300      	movs	r3, #0
 8003200:	607b      	str	r3, [r7, #4]
 8003202:	e00c      	b.n	800321e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4413      	add	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4a12      	ldr	r2, [pc, #72]	@ (8003258 <prvInitialiseTaskLists+0x60>)
 8003210:	4413      	add	r3, r2
 8003212:	4618      	mov	r0, r3
 8003214:	f7fe fe6e 	bl	8001ef4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3301      	adds	r3, #1
 800321c:	607b      	str	r3, [r7, #4]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b06      	cmp	r3, #6
 8003222:	d9ef      	bls.n	8003204 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003224:	480d      	ldr	r0, [pc, #52]	@ (800325c <prvInitialiseTaskLists+0x64>)
 8003226:	f7fe fe65 	bl	8001ef4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800322a:	480d      	ldr	r0, [pc, #52]	@ (8003260 <prvInitialiseTaskLists+0x68>)
 800322c:	f7fe fe62 	bl	8001ef4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003230:	480c      	ldr	r0, [pc, #48]	@ (8003264 <prvInitialiseTaskLists+0x6c>)
 8003232:	f7fe fe5f 	bl	8001ef4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003236:	480c      	ldr	r0, [pc, #48]	@ (8003268 <prvInitialiseTaskLists+0x70>)
 8003238:	f7fe fe5c 	bl	8001ef4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800323c:	480b      	ldr	r0, [pc, #44]	@ (800326c <prvInitialiseTaskLists+0x74>)
 800323e:	f7fe fe59 	bl	8001ef4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003242:	4b0b      	ldr	r3, [pc, #44]	@ (8003270 <prvInitialiseTaskLists+0x78>)
 8003244:	4a05      	ldr	r2, [pc, #20]	@ (800325c <prvInitialiseTaskLists+0x64>)
 8003246:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003248:	4b0a      	ldr	r3, [pc, #40]	@ (8003274 <prvInitialiseTaskLists+0x7c>)
 800324a:	4a05      	ldr	r2, [pc, #20]	@ (8003260 <prvInitialiseTaskLists+0x68>)
 800324c:	601a      	str	r2, [r3, #0]
}
 800324e:	bf00      	nop
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	20000384 	.word	0x20000384
 800325c:	20000410 	.word	0x20000410
 8003260:	20000424 	.word	0x20000424
 8003264:	20000440 	.word	0x20000440
 8003268:	20000454 	.word	0x20000454
 800326c:	2000046c 	.word	0x2000046c
 8003270:	20000438 	.word	0x20000438
 8003274:	2000043c 	.word	0x2000043c

08003278 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800327e:	e019      	b.n	80032b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003280:	f000 fa74 	bl	800376c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003284:	4b10      	ldr	r3, [pc, #64]	@ (80032c8 <prvCheckTasksWaitingTermination+0x50>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3304      	adds	r3, #4
 8003290:	4618      	mov	r0, r3
 8003292:	f7fe feb5 	bl	8002000 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003296:	4b0d      	ldr	r3, [pc, #52]	@ (80032cc <prvCheckTasksWaitingTermination+0x54>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	3b01      	subs	r3, #1
 800329c:	4a0b      	ldr	r2, [pc, #44]	@ (80032cc <prvCheckTasksWaitingTermination+0x54>)
 800329e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80032a0:	4b0b      	ldr	r3, [pc, #44]	@ (80032d0 <prvCheckTasksWaitingTermination+0x58>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	3b01      	subs	r3, #1
 80032a6:	4a0a      	ldr	r2, [pc, #40]	@ (80032d0 <prvCheckTasksWaitingTermination+0x58>)
 80032a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80032aa:	f000 fa8f 	bl	80037cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f810 	bl	80032d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80032b4:	4b06      	ldr	r3, [pc, #24]	@ (80032d0 <prvCheckTasksWaitingTermination+0x58>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1e1      	bne.n	8003280 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80032bc:	bf00      	nop
 80032be:	bf00      	nop
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	20000454 	.word	0x20000454
 80032cc:	20000480 	.word	0x20000480
 80032d0:	20000468 	.word	0x20000468

080032d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d108      	bne.n	80032f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 fbce 	bl	8003a8c <vPortFree>
				vPortFree( pxTCB );
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 fbcb 	bl	8003a8c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80032f6:	e019      	b.n	800332c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d103      	bne.n	800330a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 fbc2 	bl	8003a8c <vPortFree>
	}
 8003308:	e010      	b.n	800332c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003310:	2b02      	cmp	r3, #2
 8003312:	d00b      	beq.n	800332c <prvDeleteTCB+0x58>
	__asm volatile
 8003314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003318:	f383 8811 	msr	BASEPRI, r3
 800331c:	f3bf 8f6f 	isb	sy
 8003320:	f3bf 8f4f 	dsb	sy
 8003324:	60fb      	str	r3, [r7, #12]
}
 8003326:	bf00      	nop
 8003328:	bf00      	nop
 800332a:	e7fd      	b.n	8003328 <prvDeleteTCB+0x54>
	}
 800332c:	bf00      	nop
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800333a:	4b0c      	ldr	r3, [pc, #48]	@ (800336c <prvResetNextTaskUnblockTime+0x38>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d104      	bne.n	800334e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003344:	4b0a      	ldr	r3, [pc, #40]	@ (8003370 <prvResetNextTaskUnblockTime+0x3c>)
 8003346:	f04f 32ff 	mov.w	r2, #4294967295
 800334a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800334c:	e008      	b.n	8003360 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800334e:	4b07      	ldr	r3, [pc, #28]	@ (800336c <prvResetNextTaskUnblockTime+0x38>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	4a04      	ldr	r2, [pc, #16]	@ (8003370 <prvResetNextTaskUnblockTime+0x3c>)
 800335e:	6013      	str	r3, [r2, #0]
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	bc80      	pop	{r7}
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	20000438 	.word	0x20000438
 8003370:	200004a0 	.word	0x200004a0

08003374 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800337a:	4b0b      	ldr	r3, [pc, #44]	@ (80033a8 <xTaskGetSchedulerState+0x34>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d102      	bne.n	8003388 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003382:	2301      	movs	r3, #1
 8003384:	607b      	str	r3, [r7, #4]
 8003386:	e008      	b.n	800339a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003388:	4b08      	ldr	r3, [pc, #32]	@ (80033ac <xTaskGetSchedulerState+0x38>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d102      	bne.n	8003396 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003390:	2302      	movs	r3, #2
 8003392:	607b      	str	r3, [r7, #4]
 8003394:	e001      	b.n	800339a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003396:	2300      	movs	r3, #0
 8003398:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800339a:	687b      	ldr	r3, [r7, #4]
	}
 800339c:	4618      	mov	r0, r3
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bc80      	pop	{r7}
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	2000048c 	.word	0x2000048c
 80033ac:	200004a8 	.word	0x200004a8

080033b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80033bc:	2300      	movs	r3, #0
 80033be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d070      	beq.n	80034a8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80033c6:	4b3b      	ldr	r3, [pc, #236]	@ (80034b4 <xTaskPriorityDisinherit+0x104>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d00b      	beq.n	80033e8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80033d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033d4:	f383 8811 	msr	BASEPRI, r3
 80033d8:	f3bf 8f6f 	isb	sy
 80033dc:	f3bf 8f4f 	dsb	sy
 80033e0:	60fb      	str	r3, [r7, #12]
}
 80033e2:	bf00      	nop
 80033e4:	bf00      	nop
 80033e6:	e7fd      	b.n	80033e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10b      	bne.n	8003408 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80033f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033f4:	f383 8811 	msr	BASEPRI, r3
 80033f8:	f3bf 8f6f 	isb	sy
 80033fc:	f3bf 8f4f 	dsb	sy
 8003400:	60bb      	str	r3, [r7, #8]
}
 8003402:	bf00      	nop
 8003404:	bf00      	nop
 8003406:	e7fd      	b.n	8003404 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800340c:	1e5a      	subs	r2, r3, #1
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800341a:	429a      	cmp	r2, r3
 800341c:	d044      	beq.n	80034a8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003422:	2b00      	cmp	r3, #0
 8003424:	d140      	bne.n	80034a8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	3304      	adds	r3, #4
 800342a:	4618      	mov	r0, r3
 800342c:	f7fe fde8 	bl	8002000 <uxListRemove>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d115      	bne.n	8003462 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800343a:	491f      	ldr	r1, [pc, #124]	@ (80034b8 <xTaskPriorityDisinherit+0x108>)
 800343c:	4613      	mov	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	440b      	add	r3, r1
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10a      	bne.n	8003462 <xTaskPriorityDisinherit+0xb2>
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003450:	2201      	movs	r2, #1
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	43da      	mvns	r2, r3
 8003458:	4b18      	ldr	r3, [pc, #96]	@ (80034bc <xTaskPriorityDisinherit+0x10c>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4013      	ands	r3, r2
 800345e:	4a17      	ldr	r2, [pc, #92]	@ (80034bc <xTaskPriorityDisinherit+0x10c>)
 8003460:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800346e:	f1c3 0207 	rsb	r2, r3, #7
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800347a:	2201      	movs	r2, #1
 800347c:	409a      	lsls	r2, r3
 800347e:	4b0f      	ldr	r3, [pc, #60]	@ (80034bc <xTaskPriorityDisinherit+0x10c>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4313      	orrs	r3, r2
 8003484:	4a0d      	ldr	r2, [pc, #52]	@ (80034bc <xTaskPriorityDisinherit+0x10c>)
 8003486:	6013      	str	r3, [r2, #0]
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800348c:	4613      	mov	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4413      	add	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4a08      	ldr	r2, [pc, #32]	@ (80034b8 <xTaskPriorityDisinherit+0x108>)
 8003496:	441a      	add	r2, r3
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	3304      	adds	r3, #4
 800349c:	4619      	mov	r1, r3
 800349e:	4610      	mov	r0, r2
 80034a0:	f7fe fd53 	bl	8001f4a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80034a4:	2301      	movs	r3, #1
 80034a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80034a8:	697b      	ldr	r3, [r7, #20]
	}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3718      	adds	r7, #24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	20000380 	.word	0x20000380
 80034b8:	20000384 	.word	0x20000384
 80034bc:	20000488 	.word	0x20000488

080034c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80034ca:	4b29      	ldr	r3, [pc, #164]	@ (8003570 <prvAddCurrentTaskToDelayedList+0xb0>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034d0:	4b28      	ldr	r3, [pc, #160]	@ (8003574 <prvAddCurrentTaskToDelayedList+0xb4>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	3304      	adds	r3, #4
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fe fd92 	bl	8002000 <uxListRemove>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10b      	bne.n	80034fa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80034e2:	4b24      	ldr	r3, [pc, #144]	@ (8003574 <prvAddCurrentTaskToDelayedList+0xb4>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e8:	2201      	movs	r2, #1
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	43da      	mvns	r2, r3
 80034f0:	4b21      	ldr	r3, [pc, #132]	@ (8003578 <prvAddCurrentTaskToDelayedList+0xb8>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4013      	ands	r3, r2
 80034f6:	4a20      	ldr	r2, [pc, #128]	@ (8003578 <prvAddCurrentTaskToDelayedList+0xb8>)
 80034f8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003500:	d10a      	bne.n	8003518 <prvAddCurrentTaskToDelayedList+0x58>
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d007      	beq.n	8003518 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003508:	4b1a      	ldr	r3, [pc, #104]	@ (8003574 <prvAddCurrentTaskToDelayedList+0xb4>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	3304      	adds	r3, #4
 800350e:	4619      	mov	r1, r3
 8003510:	481a      	ldr	r0, [pc, #104]	@ (800357c <prvAddCurrentTaskToDelayedList+0xbc>)
 8003512:	f7fe fd1a 	bl	8001f4a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003516:	e026      	b.n	8003566 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4413      	add	r3, r2
 800351e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003520:	4b14      	ldr	r3, [pc, #80]	@ (8003574 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68ba      	ldr	r2, [r7, #8]
 8003526:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	429a      	cmp	r2, r3
 800352e:	d209      	bcs.n	8003544 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003530:	4b13      	ldr	r3, [pc, #76]	@ (8003580 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	4b0f      	ldr	r3, [pc, #60]	@ (8003574 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	3304      	adds	r3, #4
 800353a:	4619      	mov	r1, r3
 800353c:	4610      	mov	r0, r2
 800353e:	f7fe fd27 	bl	8001f90 <vListInsert>
}
 8003542:	e010      	b.n	8003566 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003544:	4b0f      	ldr	r3, [pc, #60]	@ (8003584 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	4b0a      	ldr	r3, [pc, #40]	@ (8003574 <prvAddCurrentTaskToDelayedList+0xb4>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	3304      	adds	r3, #4
 800354e:	4619      	mov	r1, r3
 8003550:	4610      	mov	r0, r2
 8003552:	f7fe fd1d 	bl	8001f90 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003556:	4b0c      	ldr	r3, [pc, #48]	@ (8003588 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	429a      	cmp	r2, r3
 800355e:	d202      	bcs.n	8003566 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003560:	4a09      	ldr	r2, [pc, #36]	@ (8003588 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	6013      	str	r3, [r2, #0]
}
 8003566:	bf00      	nop
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	20000484 	.word	0x20000484
 8003574:	20000380 	.word	0x20000380
 8003578:	20000488 	.word	0x20000488
 800357c:	2000046c 	.word	0x2000046c
 8003580:	2000043c 	.word	0x2000043c
 8003584:	20000438 	.word	0x20000438
 8003588:	200004a0 	.word	0x200004a0

0800358c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	3b04      	subs	r3, #4
 800359c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80035a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	3b04      	subs	r3, #4
 80035aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	f023 0201 	bic.w	r2, r3, #1
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	3b04      	subs	r3, #4
 80035ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80035bc:	4a08      	ldr	r2, [pc, #32]	@ (80035e0 <pxPortInitialiseStack+0x54>)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	3b14      	subs	r3, #20
 80035c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	3b20      	subs	r3, #32
 80035d2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80035d4:	68fb      	ldr	r3, [r7, #12]
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	bc80      	pop	{r7}
 80035de:	4770      	bx	lr
 80035e0:	080035e5 	.word	0x080035e5

080035e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80035ea:	2300      	movs	r3, #0
 80035ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80035ee:	4b12      	ldr	r3, [pc, #72]	@ (8003638 <prvTaskExitError+0x54>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f6:	d00b      	beq.n	8003610 <prvTaskExitError+0x2c>
	__asm volatile
 80035f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035fc:	f383 8811 	msr	BASEPRI, r3
 8003600:	f3bf 8f6f 	isb	sy
 8003604:	f3bf 8f4f 	dsb	sy
 8003608:	60fb      	str	r3, [r7, #12]
}
 800360a:	bf00      	nop
 800360c:	bf00      	nop
 800360e:	e7fd      	b.n	800360c <prvTaskExitError+0x28>
	__asm volatile
 8003610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003614:	f383 8811 	msr	BASEPRI, r3
 8003618:	f3bf 8f6f 	isb	sy
 800361c:	f3bf 8f4f 	dsb	sy
 8003620:	60bb      	str	r3, [r7, #8]
}
 8003622:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003624:	bf00      	nop
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0fc      	beq.n	8003626 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800362c:	bf00      	nop
 800362e:	bf00      	nop
 8003630:	3714      	adds	r7, #20
 8003632:	46bd      	mov	sp, r7
 8003634:	bc80      	pop	{r7}
 8003636:	4770      	bx	lr
 8003638:	2000000c 	.word	0x2000000c
 800363c:	00000000 	.word	0x00000000

08003640 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003640:	4b07      	ldr	r3, [pc, #28]	@ (8003660 <pxCurrentTCBConst2>)
 8003642:	6819      	ldr	r1, [r3, #0]
 8003644:	6808      	ldr	r0, [r1, #0]
 8003646:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800364a:	f380 8809 	msr	PSP, r0
 800364e:	f3bf 8f6f 	isb	sy
 8003652:	f04f 0000 	mov.w	r0, #0
 8003656:	f380 8811 	msr	BASEPRI, r0
 800365a:	f04e 0e0d 	orr.w	lr, lr, #13
 800365e:	4770      	bx	lr

08003660 <pxCurrentTCBConst2>:
 8003660:	20000380 	.word	0x20000380
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003664:	bf00      	nop
 8003666:	bf00      	nop

08003668 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003668:	4806      	ldr	r0, [pc, #24]	@ (8003684 <prvPortStartFirstTask+0x1c>)
 800366a:	6800      	ldr	r0, [r0, #0]
 800366c:	6800      	ldr	r0, [r0, #0]
 800366e:	f380 8808 	msr	MSP, r0
 8003672:	b662      	cpsie	i
 8003674:	b661      	cpsie	f
 8003676:	f3bf 8f4f 	dsb	sy
 800367a:	f3bf 8f6f 	isb	sy
 800367e:	df00      	svc	0
 8003680:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003682:	bf00      	nop
 8003684:	e000ed08 	.word	0xe000ed08

08003688 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800368e:	4b32      	ldr	r3, [pc, #200]	@ (8003758 <xPortStartScheduler+0xd0>)
 8003690:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	b2db      	uxtb	r3, r3
 8003698:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	22ff      	movs	r2, #255	@ 0xff
 800369e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80036a8:	78fb      	ldrb	r3, [r7, #3]
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	4b2a      	ldr	r3, [pc, #168]	@ (800375c <xPortStartScheduler+0xd4>)
 80036b4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80036b6:	4b2a      	ldr	r3, [pc, #168]	@ (8003760 <xPortStartScheduler+0xd8>)
 80036b8:	2207      	movs	r2, #7
 80036ba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80036bc:	e009      	b.n	80036d2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80036be:	4b28      	ldr	r3, [pc, #160]	@ (8003760 <xPortStartScheduler+0xd8>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	4a26      	ldr	r2, [pc, #152]	@ (8003760 <xPortStartScheduler+0xd8>)
 80036c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80036c8:	78fb      	ldrb	r3, [r7, #3]
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80036d2:	78fb      	ldrb	r3, [r7, #3]
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036da:	2b80      	cmp	r3, #128	@ 0x80
 80036dc:	d0ef      	beq.n	80036be <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80036de:	4b20      	ldr	r3, [pc, #128]	@ (8003760 <xPortStartScheduler+0xd8>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f1c3 0307 	rsb	r3, r3, #7
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	d00b      	beq.n	8003702 <xPortStartScheduler+0x7a>
	__asm volatile
 80036ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036ee:	f383 8811 	msr	BASEPRI, r3
 80036f2:	f3bf 8f6f 	isb	sy
 80036f6:	f3bf 8f4f 	dsb	sy
 80036fa:	60bb      	str	r3, [r7, #8]
}
 80036fc:	bf00      	nop
 80036fe:	bf00      	nop
 8003700:	e7fd      	b.n	80036fe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003702:	4b17      	ldr	r3, [pc, #92]	@ (8003760 <xPortStartScheduler+0xd8>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	021b      	lsls	r3, r3, #8
 8003708:	4a15      	ldr	r2, [pc, #84]	@ (8003760 <xPortStartScheduler+0xd8>)
 800370a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800370c:	4b14      	ldr	r3, [pc, #80]	@ (8003760 <xPortStartScheduler+0xd8>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003714:	4a12      	ldr	r2, [pc, #72]	@ (8003760 <xPortStartScheduler+0xd8>)
 8003716:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	b2da      	uxtb	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003720:	4b10      	ldr	r3, [pc, #64]	@ (8003764 <xPortStartScheduler+0xdc>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a0f      	ldr	r2, [pc, #60]	@ (8003764 <xPortStartScheduler+0xdc>)
 8003726:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800372a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800372c:	4b0d      	ldr	r3, [pc, #52]	@ (8003764 <xPortStartScheduler+0xdc>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a0c      	ldr	r2, [pc, #48]	@ (8003764 <xPortStartScheduler+0xdc>)
 8003732:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003736:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003738:	f000 f8b8 	bl	80038ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800373c:	4b0a      	ldr	r3, [pc, #40]	@ (8003768 <xPortStartScheduler+0xe0>)
 800373e:	2200      	movs	r2, #0
 8003740:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003742:	f7ff ff91 	bl	8003668 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003746:	f7ff fbd3 	bl	8002ef0 <vTaskSwitchContext>
	prvTaskExitError();
 800374a:	f7ff ff4b 	bl	80035e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	e000e400 	.word	0xe000e400
 800375c:	200004ac 	.word	0x200004ac
 8003760:	200004b0 	.word	0x200004b0
 8003764:	e000ed20 	.word	0xe000ed20
 8003768:	2000000c 	.word	0x2000000c

0800376c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
	__asm volatile
 8003772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003776:	f383 8811 	msr	BASEPRI, r3
 800377a:	f3bf 8f6f 	isb	sy
 800377e:	f3bf 8f4f 	dsb	sy
 8003782:	607b      	str	r3, [r7, #4]
}
 8003784:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003786:	4b0f      	ldr	r3, [pc, #60]	@ (80037c4 <vPortEnterCritical+0x58>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	3301      	adds	r3, #1
 800378c:	4a0d      	ldr	r2, [pc, #52]	@ (80037c4 <vPortEnterCritical+0x58>)
 800378e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003790:	4b0c      	ldr	r3, [pc, #48]	@ (80037c4 <vPortEnterCritical+0x58>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d110      	bne.n	80037ba <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003798:	4b0b      	ldr	r3, [pc, #44]	@ (80037c8 <vPortEnterCritical+0x5c>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00b      	beq.n	80037ba <vPortEnterCritical+0x4e>
	__asm volatile
 80037a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037a6:	f383 8811 	msr	BASEPRI, r3
 80037aa:	f3bf 8f6f 	isb	sy
 80037ae:	f3bf 8f4f 	dsb	sy
 80037b2:	603b      	str	r3, [r7, #0]
}
 80037b4:	bf00      	nop
 80037b6:	bf00      	nop
 80037b8:	e7fd      	b.n	80037b6 <vPortEnterCritical+0x4a>
	}
}
 80037ba:	bf00      	nop
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	bc80      	pop	{r7}
 80037c2:	4770      	bx	lr
 80037c4:	2000000c 	.word	0x2000000c
 80037c8:	e000ed04 	.word	0xe000ed04

080037cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80037d2:	4b12      	ldr	r3, [pc, #72]	@ (800381c <vPortExitCritical+0x50>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10b      	bne.n	80037f2 <vPortExitCritical+0x26>
	__asm volatile
 80037da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037de:	f383 8811 	msr	BASEPRI, r3
 80037e2:	f3bf 8f6f 	isb	sy
 80037e6:	f3bf 8f4f 	dsb	sy
 80037ea:	607b      	str	r3, [r7, #4]
}
 80037ec:	bf00      	nop
 80037ee:	bf00      	nop
 80037f0:	e7fd      	b.n	80037ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80037f2:	4b0a      	ldr	r3, [pc, #40]	@ (800381c <vPortExitCritical+0x50>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	3b01      	subs	r3, #1
 80037f8:	4a08      	ldr	r2, [pc, #32]	@ (800381c <vPortExitCritical+0x50>)
 80037fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80037fc:	4b07      	ldr	r3, [pc, #28]	@ (800381c <vPortExitCritical+0x50>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d105      	bne.n	8003810 <vPortExitCritical+0x44>
 8003804:	2300      	movs	r3, #0
 8003806:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800380e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	bc80      	pop	{r7}
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	2000000c 	.word	0x2000000c

08003820 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003820:	f3ef 8009 	mrs	r0, PSP
 8003824:	f3bf 8f6f 	isb	sy
 8003828:	4b0d      	ldr	r3, [pc, #52]	@ (8003860 <pxCurrentTCBConst>)
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003830:	6010      	str	r0, [r2, #0]
 8003832:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003836:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800383a:	f380 8811 	msr	BASEPRI, r0
 800383e:	f7ff fb57 	bl	8002ef0 <vTaskSwitchContext>
 8003842:	f04f 0000 	mov.w	r0, #0
 8003846:	f380 8811 	msr	BASEPRI, r0
 800384a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800384e:	6819      	ldr	r1, [r3, #0]
 8003850:	6808      	ldr	r0, [r1, #0]
 8003852:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003856:	f380 8809 	msr	PSP, r0
 800385a:	f3bf 8f6f 	isb	sy
 800385e:	4770      	bx	lr

08003860 <pxCurrentTCBConst>:
 8003860:	20000380 	.word	0x20000380
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003864:	bf00      	nop
 8003866:	bf00      	nop

08003868 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
	__asm volatile
 800386e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003872:	f383 8811 	msr	BASEPRI, r3
 8003876:	f3bf 8f6f 	isb	sy
 800387a:	f3bf 8f4f 	dsb	sy
 800387e:	607b      	str	r3, [r7, #4]
}
 8003880:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003882:	f7ff fa7b 	bl	8002d7c <xTaskIncrementTick>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d003      	beq.n	8003894 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800388c:	4b06      	ldr	r3, [pc, #24]	@ (80038a8 <SysTick_Handler+0x40>)
 800388e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	2300      	movs	r3, #0
 8003896:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	f383 8811 	msr	BASEPRI, r3
}
 800389e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80038a0:	bf00      	nop
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	e000ed04 	.word	0xe000ed04

080038ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80038b0:	4b0a      	ldr	r3, [pc, #40]	@ (80038dc <vPortSetupTimerInterrupt+0x30>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80038b6:	4b0a      	ldr	r3, [pc, #40]	@ (80038e0 <vPortSetupTimerInterrupt+0x34>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80038bc:	4b09      	ldr	r3, [pc, #36]	@ (80038e4 <vPortSetupTimerInterrupt+0x38>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a09      	ldr	r2, [pc, #36]	@ (80038e8 <vPortSetupTimerInterrupt+0x3c>)
 80038c2:	fba2 2303 	umull	r2, r3, r2, r3
 80038c6:	099b      	lsrs	r3, r3, #6
 80038c8:	4a08      	ldr	r2, [pc, #32]	@ (80038ec <vPortSetupTimerInterrupt+0x40>)
 80038ca:	3b01      	subs	r3, #1
 80038cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80038ce:	4b03      	ldr	r3, [pc, #12]	@ (80038dc <vPortSetupTimerInterrupt+0x30>)
 80038d0:	2207      	movs	r2, #7
 80038d2:	601a      	str	r2, [r3, #0]
}
 80038d4:	bf00      	nop
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bc80      	pop	{r7}
 80038da:	4770      	bx	lr
 80038dc:	e000e010 	.word	0xe000e010
 80038e0:	e000e018 	.word	0xe000e018
 80038e4:	20000000 	.word	0x20000000
 80038e8:	10624dd3 	.word	0x10624dd3
 80038ec:	e000e014 	.word	0xe000e014

080038f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b08a      	sub	sp, #40	@ 0x28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80038f8:	2300      	movs	r3, #0
 80038fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80038fc:	f7ff f992 	bl	8002c24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003900:	4b5c      	ldr	r3, [pc, #368]	@ (8003a74 <pvPortMalloc+0x184>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d101      	bne.n	800390c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003908:	f000 f924 	bl	8003b54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800390c:	4b5a      	ldr	r3, [pc, #360]	@ (8003a78 <pvPortMalloc+0x188>)
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4013      	ands	r3, r2
 8003914:	2b00      	cmp	r3, #0
 8003916:	f040 8095 	bne.w	8003a44 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d01e      	beq.n	800395e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003920:	2208      	movs	r2, #8
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4413      	add	r3, r2
 8003926:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f003 0307 	and.w	r3, r3, #7
 800392e:	2b00      	cmp	r3, #0
 8003930:	d015      	beq.n	800395e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f023 0307 	bic.w	r3, r3, #7
 8003938:	3308      	adds	r3, #8
 800393a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f003 0307 	and.w	r3, r3, #7
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00b      	beq.n	800395e <pvPortMalloc+0x6e>
	__asm volatile
 8003946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800394a:	f383 8811 	msr	BASEPRI, r3
 800394e:	f3bf 8f6f 	isb	sy
 8003952:	f3bf 8f4f 	dsb	sy
 8003956:	617b      	str	r3, [r7, #20]
}
 8003958:	bf00      	nop
 800395a:	bf00      	nop
 800395c:	e7fd      	b.n	800395a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d06f      	beq.n	8003a44 <pvPortMalloc+0x154>
 8003964:	4b45      	ldr	r3, [pc, #276]	@ (8003a7c <pvPortMalloc+0x18c>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	429a      	cmp	r2, r3
 800396c:	d86a      	bhi.n	8003a44 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800396e:	4b44      	ldr	r3, [pc, #272]	@ (8003a80 <pvPortMalloc+0x190>)
 8003970:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003972:	4b43      	ldr	r3, [pc, #268]	@ (8003a80 <pvPortMalloc+0x190>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003978:	e004      	b.n	8003984 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800397a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800397e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	429a      	cmp	r2, r3
 800398c:	d903      	bls.n	8003996 <pvPortMalloc+0xa6>
 800398e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1f1      	bne.n	800397a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003996:	4b37      	ldr	r3, [pc, #220]	@ (8003a74 <pvPortMalloc+0x184>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800399c:	429a      	cmp	r2, r3
 800399e:	d051      	beq.n	8003a44 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80039a0:	6a3b      	ldr	r3, [r7, #32]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2208      	movs	r2, #8
 80039a6:	4413      	add	r3, r2
 80039a8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80039aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	6a3b      	ldr	r3, [r7, #32]
 80039b0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80039b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	1ad2      	subs	r2, r2, r3
 80039ba:	2308      	movs	r3, #8
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	429a      	cmp	r2, r3
 80039c0:	d920      	bls.n	8003a04 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80039c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4413      	add	r3, r2
 80039c8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	f003 0307 	and.w	r3, r3, #7
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00b      	beq.n	80039ec <pvPortMalloc+0xfc>
	__asm volatile
 80039d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039d8:	f383 8811 	msr	BASEPRI, r3
 80039dc:	f3bf 8f6f 	isb	sy
 80039e0:	f3bf 8f4f 	dsb	sy
 80039e4:	613b      	str	r3, [r7, #16]
}
 80039e6:	bf00      	nop
 80039e8:	bf00      	nop
 80039ea:	e7fd      	b.n	80039e8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80039ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ee:	685a      	ldr	r2, [r3, #4]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	1ad2      	subs	r2, r2, r3
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80039f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80039fe:	69b8      	ldr	r0, [r7, #24]
 8003a00:	f000 f90a 	bl	8003c18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003a04:	4b1d      	ldr	r3, [pc, #116]	@ (8003a7c <pvPortMalloc+0x18c>)
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	4a1b      	ldr	r2, [pc, #108]	@ (8003a7c <pvPortMalloc+0x18c>)
 8003a10:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003a12:	4b1a      	ldr	r3, [pc, #104]	@ (8003a7c <pvPortMalloc+0x18c>)
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	4b1b      	ldr	r3, [pc, #108]	@ (8003a84 <pvPortMalloc+0x194>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d203      	bcs.n	8003a26 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003a1e:	4b17      	ldr	r3, [pc, #92]	@ (8003a7c <pvPortMalloc+0x18c>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a18      	ldr	r2, [pc, #96]	@ (8003a84 <pvPortMalloc+0x194>)
 8003a24:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	4b13      	ldr	r3, [pc, #76]	@ (8003a78 <pvPortMalloc+0x188>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a32:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a36:	2200      	movs	r2, #0
 8003a38:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003a3a:	4b13      	ldr	r3, [pc, #76]	@ (8003a88 <pvPortMalloc+0x198>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	4a11      	ldr	r2, [pc, #68]	@ (8003a88 <pvPortMalloc+0x198>)
 8003a42:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003a44:	f7ff f8fc 	bl	8002c40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	f003 0307 	and.w	r3, r3, #7
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00b      	beq.n	8003a6a <pvPortMalloc+0x17a>
	__asm volatile
 8003a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a56:	f383 8811 	msr	BASEPRI, r3
 8003a5a:	f3bf 8f6f 	isb	sy
 8003a5e:	f3bf 8f4f 	dsb	sy
 8003a62:	60fb      	str	r3, [r7, #12]
}
 8003a64:	bf00      	nop
 8003a66:	bf00      	nop
 8003a68:	e7fd      	b.n	8003a66 <pvPortMalloc+0x176>
	return pvReturn;
 8003a6a:	69fb      	ldr	r3, [r7, #28]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3728      	adds	r7, #40	@ 0x28
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	200010bc 	.word	0x200010bc
 8003a78:	200010d0 	.word	0x200010d0
 8003a7c:	200010c0 	.word	0x200010c0
 8003a80:	200010b4 	.word	0x200010b4
 8003a84:	200010c4 	.word	0x200010c4
 8003a88:	200010c8 	.word	0x200010c8

08003a8c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d04f      	beq.n	8003b3e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003a9e:	2308      	movs	r3, #8
 8003aa0:	425b      	negs	r3, r3
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	4b25      	ldr	r3, [pc, #148]	@ (8003b48 <vPortFree+0xbc>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10b      	bne.n	8003ad2 <vPortFree+0x46>
	__asm volatile
 8003aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003abe:	f383 8811 	msr	BASEPRI, r3
 8003ac2:	f3bf 8f6f 	isb	sy
 8003ac6:	f3bf 8f4f 	dsb	sy
 8003aca:	60fb      	str	r3, [r7, #12]
}
 8003acc:	bf00      	nop
 8003ace:	bf00      	nop
 8003ad0:	e7fd      	b.n	8003ace <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00b      	beq.n	8003af2 <vPortFree+0x66>
	__asm volatile
 8003ada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ade:	f383 8811 	msr	BASEPRI, r3
 8003ae2:	f3bf 8f6f 	isb	sy
 8003ae6:	f3bf 8f4f 	dsb	sy
 8003aea:	60bb      	str	r3, [r7, #8]
}
 8003aec:	bf00      	nop
 8003aee:	bf00      	nop
 8003af0:	e7fd      	b.n	8003aee <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	4b14      	ldr	r3, [pc, #80]	@ (8003b48 <vPortFree+0xbc>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4013      	ands	r3, r2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d01e      	beq.n	8003b3e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d11a      	bne.n	8003b3e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8003b48 <vPortFree+0xbc>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	43db      	mvns	r3, r3
 8003b12:	401a      	ands	r2, r3
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003b18:	f7ff f884 	bl	8002c24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	4b0a      	ldr	r3, [pc, #40]	@ (8003b4c <vPortFree+0xc0>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4413      	add	r3, r2
 8003b26:	4a09      	ldr	r2, [pc, #36]	@ (8003b4c <vPortFree+0xc0>)
 8003b28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003b2a:	6938      	ldr	r0, [r7, #16]
 8003b2c:	f000 f874 	bl	8003c18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003b30:	4b07      	ldr	r3, [pc, #28]	@ (8003b50 <vPortFree+0xc4>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	3301      	adds	r3, #1
 8003b36:	4a06      	ldr	r2, [pc, #24]	@ (8003b50 <vPortFree+0xc4>)
 8003b38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003b3a:	f7ff f881 	bl	8002c40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003b3e:	bf00      	nop
 8003b40:	3718      	adds	r7, #24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	200010d0 	.word	0x200010d0
 8003b4c:	200010c0 	.word	0x200010c0
 8003b50:	200010cc 	.word	0x200010cc

08003b54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003b5a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003b5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003b60:	4b27      	ldr	r3, [pc, #156]	@ (8003c00 <prvHeapInit+0xac>)
 8003b62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f003 0307 	and.w	r3, r3, #7
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00c      	beq.n	8003b88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	3307      	adds	r3, #7
 8003b72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f023 0307 	bic.w	r3, r3, #7
 8003b7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	4a1f      	ldr	r2, [pc, #124]	@ (8003c00 <prvHeapInit+0xac>)
 8003b84:	4413      	add	r3, r2
 8003b86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003b8c:	4a1d      	ldr	r2, [pc, #116]	@ (8003c04 <prvHeapInit+0xb0>)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003b92:	4b1c      	ldr	r3, [pc, #112]	@ (8003c04 <prvHeapInit+0xb0>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003ba0:	2208      	movs	r2, #8
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	1a9b      	subs	r3, r3, r2
 8003ba6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f023 0307 	bic.w	r3, r3, #7
 8003bae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4a15      	ldr	r2, [pc, #84]	@ (8003c08 <prvHeapInit+0xb4>)
 8003bb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003bb6:	4b14      	ldr	r3, [pc, #80]	@ (8003c08 <prvHeapInit+0xb4>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003bbe:	4b12      	ldr	r3, [pc, #72]	@ (8003c08 <prvHeapInit+0xb4>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	1ad2      	subs	r2, r2, r3
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8003c08 <prvHeapInit+0xb4>)
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	4a0a      	ldr	r2, [pc, #40]	@ (8003c0c <prvHeapInit+0xb8>)
 8003be2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	4a09      	ldr	r2, [pc, #36]	@ (8003c10 <prvHeapInit+0xbc>)
 8003bea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003bec:	4b09      	ldr	r3, [pc, #36]	@ (8003c14 <prvHeapInit+0xc0>)
 8003bee:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003bf2:	601a      	str	r2, [r3, #0]
}
 8003bf4:	bf00      	nop
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bc80      	pop	{r7}
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	200004b4 	.word	0x200004b4
 8003c04:	200010b4 	.word	0x200010b4
 8003c08:	200010bc 	.word	0x200010bc
 8003c0c:	200010c4 	.word	0x200010c4
 8003c10:	200010c0 	.word	0x200010c0
 8003c14:	200010d0 	.word	0x200010d0

08003c18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003c20:	4b27      	ldr	r3, [pc, #156]	@ (8003cc0 <prvInsertBlockIntoFreeList+0xa8>)
 8003c22:	60fb      	str	r3, [r7, #12]
 8003c24:	e002      	b.n	8003c2c <prvInsertBlockIntoFreeList+0x14>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	60fb      	str	r3, [r7, #12]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d8f7      	bhi.n	8003c26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	68ba      	ldr	r2, [r7, #8]
 8003c40:	4413      	add	r3, r2
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d108      	bne.n	8003c5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	441a      	add	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	68ba      	ldr	r2, [r7, #8]
 8003c64:	441a      	add	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d118      	bne.n	8003ca0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	4b14      	ldr	r3, [pc, #80]	@ (8003cc4 <prvInsertBlockIntoFreeList+0xac>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d00d      	beq.n	8003c96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	441a      	add	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	e008      	b.n	8003ca8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003c96:	4b0b      	ldr	r3, [pc, #44]	@ (8003cc4 <prvInsertBlockIntoFreeList+0xac>)
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	e003      	b.n	8003ca8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d002      	beq.n	8003cb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003cb6:	bf00      	nop
 8003cb8:	3714      	adds	r7, #20
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bc80      	pop	{r7}
 8003cbe:	4770      	bx	lr
 8003cc0:	200010b4 	.word	0x200010b4
 8003cc4:	200010bc 	.word	0x200010bc

08003cc8 <siprintf>:
 8003cc8:	b40e      	push	{r1, r2, r3}
 8003cca:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003cce:	b510      	push	{r4, lr}
 8003cd0:	2400      	movs	r4, #0
 8003cd2:	b09d      	sub	sp, #116	@ 0x74
 8003cd4:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003cd6:	9002      	str	r0, [sp, #8]
 8003cd8:	9006      	str	r0, [sp, #24]
 8003cda:	9107      	str	r1, [sp, #28]
 8003cdc:	9104      	str	r1, [sp, #16]
 8003cde:	4809      	ldr	r0, [pc, #36]	@ (8003d04 <siprintf+0x3c>)
 8003ce0:	4909      	ldr	r1, [pc, #36]	@ (8003d08 <siprintf+0x40>)
 8003ce2:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ce6:	9105      	str	r1, [sp, #20]
 8003ce8:	6800      	ldr	r0, [r0, #0]
 8003cea:	a902      	add	r1, sp, #8
 8003cec:	9301      	str	r3, [sp, #4]
 8003cee:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003cf0:	f000 f9a0 	bl	8004034 <_svfiprintf_r>
 8003cf4:	9b02      	ldr	r3, [sp, #8]
 8003cf6:	701c      	strb	r4, [r3, #0]
 8003cf8:	b01d      	add	sp, #116	@ 0x74
 8003cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cfe:	b003      	add	sp, #12
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	20000010 	.word	0x20000010
 8003d08:	ffff0208 	.word	0xffff0208

08003d0c <memset>:
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	4402      	add	r2, r0
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d100      	bne.n	8003d16 <memset+0xa>
 8003d14:	4770      	bx	lr
 8003d16:	f803 1b01 	strb.w	r1, [r3], #1
 8003d1a:	e7f9      	b.n	8003d10 <memset+0x4>

08003d1c <__errno>:
 8003d1c:	4b01      	ldr	r3, [pc, #4]	@ (8003d24 <__errno+0x8>)
 8003d1e:	6818      	ldr	r0, [r3, #0]
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	20000010 	.word	0x20000010

08003d28 <__libc_init_array>:
 8003d28:	b570      	push	{r4, r5, r6, lr}
 8003d2a:	2600      	movs	r6, #0
 8003d2c:	4d0c      	ldr	r5, [pc, #48]	@ (8003d60 <__libc_init_array+0x38>)
 8003d2e:	4c0d      	ldr	r4, [pc, #52]	@ (8003d64 <__libc_init_array+0x3c>)
 8003d30:	1b64      	subs	r4, r4, r5
 8003d32:	10a4      	asrs	r4, r4, #2
 8003d34:	42a6      	cmp	r6, r4
 8003d36:	d109      	bne.n	8003d4c <__libc_init_array+0x24>
 8003d38:	f000 fc76 	bl	8004628 <_init>
 8003d3c:	2600      	movs	r6, #0
 8003d3e:	4d0a      	ldr	r5, [pc, #40]	@ (8003d68 <__libc_init_array+0x40>)
 8003d40:	4c0a      	ldr	r4, [pc, #40]	@ (8003d6c <__libc_init_array+0x44>)
 8003d42:	1b64      	subs	r4, r4, r5
 8003d44:	10a4      	asrs	r4, r4, #2
 8003d46:	42a6      	cmp	r6, r4
 8003d48:	d105      	bne.n	8003d56 <__libc_init_array+0x2e>
 8003d4a:	bd70      	pop	{r4, r5, r6, pc}
 8003d4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d50:	4798      	blx	r3
 8003d52:	3601      	adds	r6, #1
 8003d54:	e7ee      	b.n	8003d34 <__libc_init_array+0xc>
 8003d56:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d5a:	4798      	blx	r3
 8003d5c:	3601      	adds	r6, #1
 8003d5e:	e7f2      	b.n	8003d46 <__libc_init_array+0x1e>
 8003d60:	08004828 	.word	0x08004828
 8003d64:	08004828 	.word	0x08004828
 8003d68:	08004828 	.word	0x08004828
 8003d6c:	0800482c 	.word	0x0800482c

08003d70 <__retarget_lock_acquire_recursive>:
 8003d70:	4770      	bx	lr

08003d72 <__retarget_lock_release_recursive>:
 8003d72:	4770      	bx	lr

08003d74 <memcpy>:
 8003d74:	440a      	add	r2, r1
 8003d76:	4291      	cmp	r1, r2
 8003d78:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d7c:	d100      	bne.n	8003d80 <memcpy+0xc>
 8003d7e:	4770      	bx	lr
 8003d80:	b510      	push	{r4, lr}
 8003d82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d86:	4291      	cmp	r1, r2
 8003d88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d8c:	d1f9      	bne.n	8003d82 <memcpy+0xe>
 8003d8e:	bd10      	pop	{r4, pc}

08003d90 <_free_r>:
 8003d90:	b538      	push	{r3, r4, r5, lr}
 8003d92:	4605      	mov	r5, r0
 8003d94:	2900      	cmp	r1, #0
 8003d96:	d040      	beq.n	8003e1a <_free_r+0x8a>
 8003d98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d9c:	1f0c      	subs	r4, r1, #4
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	bfb8      	it	lt
 8003da2:	18e4      	addlt	r4, r4, r3
 8003da4:	f000 f8de 	bl	8003f64 <__malloc_lock>
 8003da8:	4a1c      	ldr	r2, [pc, #112]	@ (8003e1c <_free_r+0x8c>)
 8003daa:	6813      	ldr	r3, [r2, #0]
 8003dac:	b933      	cbnz	r3, 8003dbc <_free_r+0x2c>
 8003dae:	6063      	str	r3, [r4, #4]
 8003db0:	6014      	str	r4, [r2, #0]
 8003db2:	4628      	mov	r0, r5
 8003db4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003db8:	f000 b8da 	b.w	8003f70 <__malloc_unlock>
 8003dbc:	42a3      	cmp	r3, r4
 8003dbe:	d908      	bls.n	8003dd2 <_free_r+0x42>
 8003dc0:	6820      	ldr	r0, [r4, #0]
 8003dc2:	1821      	adds	r1, r4, r0
 8003dc4:	428b      	cmp	r3, r1
 8003dc6:	bf01      	itttt	eq
 8003dc8:	6819      	ldreq	r1, [r3, #0]
 8003dca:	685b      	ldreq	r3, [r3, #4]
 8003dcc:	1809      	addeq	r1, r1, r0
 8003dce:	6021      	streq	r1, [r4, #0]
 8003dd0:	e7ed      	b.n	8003dae <_free_r+0x1e>
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	b10b      	cbz	r3, 8003ddc <_free_r+0x4c>
 8003dd8:	42a3      	cmp	r3, r4
 8003dda:	d9fa      	bls.n	8003dd2 <_free_r+0x42>
 8003ddc:	6811      	ldr	r1, [r2, #0]
 8003dde:	1850      	adds	r0, r2, r1
 8003de0:	42a0      	cmp	r0, r4
 8003de2:	d10b      	bne.n	8003dfc <_free_r+0x6c>
 8003de4:	6820      	ldr	r0, [r4, #0]
 8003de6:	4401      	add	r1, r0
 8003de8:	1850      	adds	r0, r2, r1
 8003dea:	4283      	cmp	r3, r0
 8003dec:	6011      	str	r1, [r2, #0]
 8003dee:	d1e0      	bne.n	8003db2 <_free_r+0x22>
 8003df0:	6818      	ldr	r0, [r3, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	4408      	add	r0, r1
 8003df6:	6010      	str	r0, [r2, #0]
 8003df8:	6053      	str	r3, [r2, #4]
 8003dfa:	e7da      	b.n	8003db2 <_free_r+0x22>
 8003dfc:	d902      	bls.n	8003e04 <_free_r+0x74>
 8003dfe:	230c      	movs	r3, #12
 8003e00:	602b      	str	r3, [r5, #0]
 8003e02:	e7d6      	b.n	8003db2 <_free_r+0x22>
 8003e04:	6820      	ldr	r0, [r4, #0]
 8003e06:	1821      	adds	r1, r4, r0
 8003e08:	428b      	cmp	r3, r1
 8003e0a:	bf01      	itttt	eq
 8003e0c:	6819      	ldreq	r1, [r3, #0]
 8003e0e:	685b      	ldreq	r3, [r3, #4]
 8003e10:	1809      	addeq	r1, r1, r0
 8003e12:	6021      	streq	r1, [r4, #0]
 8003e14:	6063      	str	r3, [r4, #4]
 8003e16:	6054      	str	r4, [r2, #4]
 8003e18:	e7cb      	b.n	8003db2 <_free_r+0x22>
 8003e1a:	bd38      	pop	{r3, r4, r5, pc}
 8003e1c:	20001218 	.word	0x20001218

08003e20 <sbrk_aligned>:
 8003e20:	b570      	push	{r4, r5, r6, lr}
 8003e22:	4e0f      	ldr	r6, [pc, #60]	@ (8003e60 <sbrk_aligned+0x40>)
 8003e24:	460c      	mov	r4, r1
 8003e26:	6831      	ldr	r1, [r6, #0]
 8003e28:	4605      	mov	r5, r0
 8003e2a:	b911      	cbnz	r1, 8003e32 <sbrk_aligned+0x12>
 8003e2c:	f000 fba8 	bl	8004580 <_sbrk_r>
 8003e30:	6030      	str	r0, [r6, #0]
 8003e32:	4621      	mov	r1, r4
 8003e34:	4628      	mov	r0, r5
 8003e36:	f000 fba3 	bl	8004580 <_sbrk_r>
 8003e3a:	1c43      	adds	r3, r0, #1
 8003e3c:	d103      	bne.n	8003e46 <sbrk_aligned+0x26>
 8003e3e:	f04f 34ff 	mov.w	r4, #4294967295
 8003e42:	4620      	mov	r0, r4
 8003e44:	bd70      	pop	{r4, r5, r6, pc}
 8003e46:	1cc4      	adds	r4, r0, #3
 8003e48:	f024 0403 	bic.w	r4, r4, #3
 8003e4c:	42a0      	cmp	r0, r4
 8003e4e:	d0f8      	beq.n	8003e42 <sbrk_aligned+0x22>
 8003e50:	1a21      	subs	r1, r4, r0
 8003e52:	4628      	mov	r0, r5
 8003e54:	f000 fb94 	bl	8004580 <_sbrk_r>
 8003e58:	3001      	adds	r0, #1
 8003e5a:	d1f2      	bne.n	8003e42 <sbrk_aligned+0x22>
 8003e5c:	e7ef      	b.n	8003e3e <sbrk_aligned+0x1e>
 8003e5e:	bf00      	nop
 8003e60:	20001214 	.word	0x20001214

08003e64 <_malloc_r>:
 8003e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e68:	1ccd      	adds	r5, r1, #3
 8003e6a:	f025 0503 	bic.w	r5, r5, #3
 8003e6e:	3508      	adds	r5, #8
 8003e70:	2d0c      	cmp	r5, #12
 8003e72:	bf38      	it	cc
 8003e74:	250c      	movcc	r5, #12
 8003e76:	2d00      	cmp	r5, #0
 8003e78:	4606      	mov	r6, r0
 8003e7a:	db01      	blt.n	8003e80 <_malloc_r+0x1c>
 8003e7c:	42a9      	cmp	r1, r5
 8003e7e:	d904      	bls.n	8003e8a <_malloc_r+0x26>
 8003e80:	230c      	movs	r3, #12
 8003e82:	6033      	str	r3, [r6, #0]
 8003e84:	2000      	movs	r0, #0
 8003e86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003f60 <_malloc_r+0xfc>
 8003e8e:	f000 f869 	bl	8003f64 <__malloc_lock>
 8003e92:	f8d8 3000 	ldr.w	r3, [r8]
 8003e96:	461c      	mov	r4, r3
 8003e98:	bb44      	cbnz	r4, 8003eec <_malloc_r+0x88>
 8003e9a:	4629      	mov	r1, r5
 8003e9c:	4630      	mov	r0, r6
 8003e9e:	f7ff ffbf 	bl	8003e20 <sbrk_aligned>
 8003ea2:	1c43      	adds	r3, r0, #1
 8003ea4:	4604      	mov	r4, r0
 8003ea6:	d158      	bne.n	8003f5a <_malloc_r+0xf6>
 8003ea8:	f8d8 4000 	ldr.w	r4, [r8]
 8003eac:	4627      	mov	r7, r4
 8003eae:	2f00      	cmp	r7, #0
 8003eb0:	d143      	bne.n	8003f3a <_malloc_r+0xd6>
 8003eb2:	2c00      	cmp	r4, #0
 8003eb4:	d04b      	beq.n	8003f4e <_malloc_r+0xea>
 8003eb6:	6823      	ldr	r3, [r4, #0]
 8003eb8:	4639      	mov	r1, r7
 8003eba:	4630      	mov	r0, r6
 8003ebc:	eb04 0903 	add.w	r9, r4, r3
 8003ec0:	f000 fb5e 	bl	8004580 <_sbrk_r>
 8003ec4:	4581      	cmp	r9, r0
 8003ec6:	d142      	bne.n	8003f4e <_malloc_r+0xea>
 8003ec8:	6821      	ldr	r1, [r4, #0]
 8003eca:	4630      	mov	r0, r6
 8003ecc:	1a6d      	subs	r5, r5, r1
 8003ece:	4629      	mov	r1, r5
 8003ed0:	f7ff ffa6 	bl	8003e20 <sbrk_aligned>
 8003ed4:	3001      	adds	r0, #1
 8003ed6:	d03a      	beq.n	8003f4e <_malloc_r+0xea>
 8003ed8:	6823      	ldr	r3, [r4, #0]
 8003eda:	442b      	add	r3, r5
 8003edc:	6023      	str	r3, [r4, #0]
 8003ede:	f8d8 3000 	ldr.w	r3, [r8]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	bb62      	cbnz	r2, 8003f40 <_malloc_r+0xdc>
 8003ee6:	f8c8 7000 	str.w	r7, [r8]
 8003eea:	e00f      	b.n	8003f0c <_malloc_r+0xa8>
 8003eec:	6822      	ldr	r2, [r4, #0]
 8003eee:	1b52      	subs	r2, r2, r5
 8003ef0:	d420      	bmi.n	8003f34 <_malloc_r+0xd0>
 8003ef2:	2a0b      	cmp	r2, #11
 8003ef4:	d917      	bls.n	8003f26 <_malloc_r+0xc2>
 8003ef6:	1961      	adds	r1, r4, r5
 8003ef8:	42a3      	cmp	r3, r4
 8003efa:	6025      	str	r5, [r4, #0]
 8003efc:	bf18      	it	ne
 8003efe:	6059      	strne	r1, [r3, #4]
 8003f00:	6863      	ldr	r3, [r4, #4]
 8003f02:	bf08      	it	eq
 8003f04:	f8c8 1000 	streq.w	r1, [r8]
 8003f08:	5162      	str	r2, [r4, r5]
 8003f0a:	604b      	str	r3, [r1, #4]
 8003f0c:	4630      	mov	r0, r6
 8003f0e:	f000 f82f 	bl	8003f70 <__malloc_unlock>
 8003f12:	f104 000b 	add.w	r0, r4, #11
 8003f16:	1d23      	adds	r3, r4, #4
 8003f18:	f020 0007 	bic.w	r0, r0, #7
 8003f1c:	1ac2      	subs	r2, r0, r3
 8003f1e:	bf1c      	itt	ne
 8003f20:	1a1b      	subne	r3, r3, r0
 8003f22:	50a3      	strne	r3, [r4, r2]
 8003f24:	e7af      	b.n	8003e86 <_malloc_r+0x22>
 8003f26:	6862      	ldr	r2, [r4, #4]
 8003f28:	42a3      	cmp	r3, r4
 8003f2a:	bf0c      	ite	eq
 8003f2c:	f8c8 2000 	streq.w	r2, [r8]
 8003f30:	605a      	strne	r2, [r3, #4]
 8003f32:	e7eb      	b.n	8003f0c <_malloc_r+0xa8>
 8003f34:	4623      	mov	r3, r4
 8003f36:	6864      	ldr	r4, [r4, #4]
 8003f38:	e7ae      	b.n	8003e98 <_malloc_r+0x34>
 8003f3a:	463c      	mov	r4, r7
 8003f3c:	687f      	ldr	r7, [r7, #4]
 8003f3e:	e7b6      	b.n	8003eae <_malloc_r+0x4a>
 8003f40:	461a      	mov	r2, r3
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	42a3      	cmp	r3, r4
 8003f46:	d1fb      	bne.n	8003f40 <_malloc_r+0xdc>
 8003f48:	2300      	movs	r3, #0
 8003f4a:	6053      	str	r3, [r2, #4]
 8003f4c:	e7de      	b.n	8003f0c <_malloc_r+0xa8>
 8003f4e:	230c      	movs	r3, #12
 8003f50:	4630      	mov	r0, r6
 8003f52:	6033      	str	r3, [r6, #0]
 8003f54:	f000 f80c 	bl	8003f70 <__malloc_unlock>
 8003f58:	e794      	b.n	8003e84 <_malloc_r+0x20>
 8003f5a:	6005      	str	r5, [r0, #0]
 8003f5c:	e7d6      	b.n	8003f0c <_malloc_r+0xa8>
 8003f5e:	bf00      	nop
 8003f60:	20001218 	.word	0x20001218

08003f64 <__malloc_lock>:
 8003f64:	4801      	ldr	r0, [pc, #4]	@ (8003f6c <__malloc_lock+0x8>)
 8003f66:	f7ff bf03 	b.w	8003d70 <__retarget_lock_acquire_recursive>
 8003f6a:	bf00      	nop
 8003f6c:	20001210 	.word	0x20001210

08003f70 <__malloc_unlock>:
 8003f70:	4801      	ldr	r0, [pc, #4]	@ (8003f78 <__malloc_unlock+0x8>)
 8003f72:	f7ff befe 	b.w	8003d72 <__retarget_lock_release_recursive>
 8003f76:	bf00      	nop
 8003f78:	20001210 	.word	0x20001210

08003f7c <__ssputs_r>:
 8003f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f80:	461f      	mov	r7, r3
 8003f82:	688e      	ldr	r6, [r1, #8]
 8003f84:	4682      	mov	sl, r0
 8003f86:	42be      	cmp	r6, r7
 8003f88:	460c      	mov	r4, r1
 8003f8a:	4690      	mov	r8, r2
 8003f8c:	680b      	ldr	r3, [r1, #0]
 8003f8e:	d82d      	bhi.n	8003fec <__ssputs_r+0x70>
 8003f90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003f94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003f98:	d026      	beq.n	8003fe8 <__ssputs_r+0x6c>
 8003f9a:	6965      	ldr	r5, [r4, #20]
 8003f9c:	6909      	ldr	r1, [r1, #16]
 8003f9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003fa2:	eba3 0901 	sub.w	r9, r3, r1
 8003fa6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003faa:	1c7b      	adds	r3, r7, #1
 8003fac:	444b      	add	r3, r9
 8003fae:	106d      	asrs	r5, r5, #1
 8003fb0:	429d      	cmp	r5, r3
 8003fb2:	bf38      	it	cc
 8003fb4:	461d      	movcc	r5, r3
 8003fb6:	0553      	lsls	r3, r2, #21
 8003fb8:	d527      	bpl.n	800400a <__ssputs_r+0x8e>
 8003fba:	4629      	mov	r1, r5
 8003fbc:	f7ff ff52 	bl	8003e64 <_malloc_r>
 8003fc0:	4606      	mov	r6, r0
 8003fc2:	b360      	cbz	r0, 800401e <__ssputs_r+0xa2>
 8003fc4:	464a      	mov	r2, r9
 8003fc6:	6921      	ldr	r1, [r4, #16]
 8003fc8:	f7ff fed4 	bl	8003d74 <memcpy>
 8003fcc:	89a3      	ldrh	r3, [r4, #12]
 8003fce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003fd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fd6:	81a3      	strh	r3, [r4, #12]
 8003fd8:	6126      	str	r6, [r4, #16]
 8003fda:	444e      	add	r6, r9
 8003fdc:	6026      	str	r6, [r4, #0]
 8003fde:	463e      	mov	r6, r7
 8003fe0:	6165      	str	r5, [r4, #20]
 8003fe2:	eba5 0509 	sub.w	r5, r5, r9
 8003fe6:	60a5      	str	r5, [r4, #8]
 8003fe8:	42be      	cmp	r6, r7
 8003fea:	d900      	bls.n	8003fee <__ssputs_r+0x72>
 8003fec:	463e      	mov	r6, r7
 8003fee:	4632      	mov	r2, r6
 8003ff0:	4641      	mov	r1, r8
 8003ff2:	6820      	ldr	r0, [r4, #0]
 8003ff4:	f000 faaa 	bl	800454c <memmove>
 8003ff8:	2000      	movs	r0, #0
 8003ffa:	68a3      	ldr	r3, [r4, #8]
 8003ffc:	1b9b      	subs	r3, r3, r6
 8003ffe:	60a3      	str	r3, [r4, #8]
 8004000:	6823      	ldr	r3, [r4, #0]
 8004002:	4433      	add	r3, r6
 8004004:	6023      	str	r3, [r4, #0]
 8004006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800400a:	462a      	mov	r2, r5
 800400c:	f000 fad6 	bl	80045bc <_realloc_r>
 8004010:	4606      	mov	r6, r0
 8004012:	2800      	cmp	r0, #0
 8004014:	d1e0      	bne.n	8003fd8 <__ssputs_r+0x5c>
 8004016:	4650      	mov	r0, sl
 8004018:	6921      	ldr	r1, [r4, #16]
 800401a:	f7ff feb9 	bl	8003d90 <_free_r>
 800401e:	230c      	movs	r3, #12
 8004020:	f8ca 3000 	str.w	r3, [sl]
 8004024:	89a3      	ldrh	r3, [r4, #12]
 8004026:	f04f 30ff 	mov.w	r0, #4294967295
 800402a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800402e:	81a3      	strh	r3, [r4, #12]
 8004030:	e7e9      	b.n	8004006 <__ssputs_r+0x8a>
	...

08004034 <_svfiprintf_r>:
 8004034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004038:	4698      	mov	r8, r3
 800403a:	898b      	ldrh	r3, [r1, #12]
 800403c:	4607      	mov	r7, r0
 800403e:	061b      	lsls	r3, r3, #24
 8004040:	460d      	mov	r5, r1
 8004042:	4614      	mov	r4, r2
 8004044:	b09d      	sub	sp, #116	@ 0x74
 8004046:	d510      	bpl.n	800406a <_svfiprintf_r+0x36>
 8004048:	690b      	ldr	r3, [r1, #16]
 800404a:	b973      	cbnz	r3, 800406a <_svfiprintf_r+0x36>
 800404c:	2140      	movs	r1, #64	@ 0x40
 800404e:	f7ff ff09 	bl	8003e64 <_malloc_r>
 8004052:	6028      	str	r0, [r5, #0]
 8004054:	6128      	str	r0, [r5, #16]
 8004056:	b930      	cbnz	r0, 8004066 <_svfiprintf_r+0x32>
 8004058:	230c      	movs	r3, #12
 800405a:	603b      	str	r3, [r7, #0]
 800405c:	f04f 30ff 	mov.w	r0, #4294967295
 8004060:	b01d      	add	sp, #116	@ 0x74
 8004062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004066:	2340      	movs	r3, #64	@ 0x40
 8004068:	616b      	str	r3, [r5, #20]
 800406a:	2300      	movs	r3, #0
 800406c:	9309      	str	r3, [sp, #36]	@ 0x24
 800406e:	2320      	movs	r3, #32
 8004070:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004074:	2330      	movs	r3, #48	@ 0x30
 8004076:	f04f 0901 	mov.w	r9, #1
 800407a:	f8cd 800c 	str.w	r8, [sp, #12]
 800407e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004218 <_svfiprintf_r+0x1e4>
 8004082:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004086:	4623      	mov	r3, r4
 8004088:	469a      	mov	sl, r3
 800408a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800408e:	b10a      	cbz	r2, 8004094 <_svfiprintf_r+0x60>
 8004090:	2a25      	cmp	r2, #37	@ 0x25
 8004092:	d1f9      	bne.n	8004088 <_svfiprintf_r+0x54>
 8004094:	ebba 0b04 	subs.w	fp, sl, r4
 8004098:	d00b      	beq.n	80040b2 <_svfiprintf_r+0x7e>
 800409a:	465b      	mov	r3, fp
 800409c:	4622      	mov	r2, r4
 800409e:	4629      	mov	r1, r5
 80040a0:	4638      	mov	r0, r7
 80040a2:	f7ff ff6b 	bl	8003f7c <__ssputs_r>
 80040a6:	3001      	adds	r0, #1
 80040a8:	f000 80a7 	beq.w	80041fa <_svfiprintf_r+0x1c6>
 80040ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80040ae:	445a      	add	r2, fp
 80040b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80040b2:	f89a 3000 	ldrb.w	r3, [sl]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f000 809f 	beq.w	80041fa <_svfiprintf_r+0x1c6>
 80040bc:	2300      	movs	r3, #0
 80040be:	f04f 32ff 	mov.w	r2, #4294967295
 80040c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040c6:	f10a 0a01 	add.w	sl, sl, #1
 80040ca:	9304      	str	r3, [sp, #16]
 80040cc:	9307      	str	r3, [sp, #28]
 80040ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80040d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80040d4:	4654      	mov	r4, sl
 80040d6:	2205      	movs	r2, #5
 80040d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040dc:	484e      	ldr	r0, [pc, #312]	@ (8004218 <_svfiprintf_r+0x1e4>)
 80040de:	f000 fa5f 	bl	80045a0 <memchr>
 80040e2:	9a04      	ldr	r2, [sp, #16]
 80040e4:	b9d8      	cbnz	r0, 800411e <_svfiprintf_r+0xea>
 80040e6:	06d0      	lsls	r0, r2, #27
 80040e8:	bf44      	itt	mi
 80040ea:	2320      	movmi	r3, #32
 80040ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040f0:	0711      	lsls	r1, r2, #28
 80040f2:	bf44      	itt	mi
 80040f4:	232b      	movmi	r3, #43	@ 0x2b
 80040f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040fa:	f89a 3000 	ldrb.w	r3, [sl]
 80040fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8004100:	d015      	beq.n	800412e <_svfiprintf_r+0xfa>
 8004102:	4654      	mov	r4, sl
 8004104:	2000      	movs	r0, #0
 8004106:	f04f 0c0a 	mov.w	ip, #10
 800410a:	9a07      	ldr	r2, [sp, #28]
 800410c:	4621      	mov	r1, r4
 800410e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004112:	3b30      	subs	r3, #48	@ 0x30
 8004114:	2b09      	cmp	r3, #9
 8004116:	d94b      	bls.n	80041b0 <_svfiprintf_r+0x17c>
 8004118:	b1b0      	cbz	r0, 8004148 <_svfiprintf_r+0x114>
 800411a:	9207      	str	r2, [sp, #28]
 800411c:	e014      	b.n	8004148 <_svfiprintf_r+0x114>
 800411e:	eba0 0308 	sub.w	r3, r0, r8
 8004122:	fa09 f303 	lsl.w	r3, r9, r3
 8004126:	4313      	orrs	r3, r2
 8004128:	46a2      	mov	sl, r4
 800412a:	9304      	str	r3, [sp, #16]
 800412c:	e7d2      	b.n	80040d4 <_svfiprintf_r+0xa0>
 800412e:	9b03      	ldr	r3, [sp, #12]
 8004130:	1d19      	adds	r1, r3, #4
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	9103      	str	r1, [sp, #12]
 8004136:	2b00      	cmp	r3, #0
 8004138:	bfbb      	ittet	lt
 800413a:	425b      	neglt	r3, r3
 800413c:	f042 0202 	orrlt.w	r2, r2, #2
 8004140:	9307      	strge	r3, [sp, #28]
 8004142:	9307      	strlt	r3, [sp, #28]
 8004144:	bfb8      	it	lt
 8004146:	9204      	strlt	r2, [sp, #16]
 8004148:	7823      	ldrb	r3, [r4, #0]
 800414a:	2b2e      	cmp	r3, #46	@ 0x2e
 800414c:	d10a      	bne.n	8004164 <_svfiprintf_r+0x130>
 800414e:	7863      	ldrb	r3, [r4, #1]
 8004150:	2b2a      	cmp	r3, #42	@ 0x2a
 8004152:	d132      	bne.n	80041ba <_svfiprintf_r+0x186>
 8004154:	9b03      	ldr	r3, [sp, #12]
 8004156:	3402      	adds	r4, #2
 8004158:	1d1a      	adds	r2, r3, #4
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	9203      	str	r2, [sp, #12]
 800415e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004162:	9305      	str	r3, [sp, #20]
 8004164:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800421c <_svfiprintf_r+0x1e8>
 8004168:	2203      	movs	r2, #3
 800416a:	4650      	mov	r0, sl
 800416c:	7821      	ldrb	r1, [r4, #0]
 800416e:	f000 fa17 	bl	80045a0 <memchr>
 8004172:	b138      	cbz	r0, 8004184 <_svfiprintf_r+0x150>
 8004174:	2240      	movs	r2, #64	@ 0x40
 8004176:	9b04      	ldr	r3, [sp, #16]
 8004178:	eba0 000a 	sub.w	r0, r0, sl
 800417c:	4082      	lsls	r2, r0
 800417e:	4313      	orrs	r3, r2
 8004180:	3401      	adds	r4, #1
 8004182:	9304      	str	r3, [sp, #16]
 8004184:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004188:	2206      	movs	r2, #6
 800418a:	4825      	ldr	r0, [pc, #148]	@ (8004220 <_svfiprintf_r+0x1ec>)
 800418c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004190:	f000 fa06 	bl	80045a0 <memchr>
 8004194:	2800      	cmp	r0, #0
 8004196:	d036      	beq.n	8004206 <_svfiprintf_r+0x1d2>
 8004198:	4b22      	ldr	r3, [pc, #136]	@ (8004224 <_svfiprintf_r+0x1f0>)
 800419a:	bb1b      	cbnz	r3, 80041e4 <_svfiprintf_r+0x1b0>
 800419c:	9b03      	ldr	r3, [sp, #12]
 800419e:	3307      	adds	r3, #7
 80041a0:	f023 0307 	bic.w	r3, r3, #7
 80041a4:	3308      	adds	r3, #8
 80041a6:	9303      	str	r3, [sp, #12]
 80041a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041aa:	4433      	add	r3, r6
 80041ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80041ae:	e76a      	b.n	8004086 <_svfiprintf_r+0x52>
 80041b0:	460c      	mov	r4, r1
 80041b2:	2001      	movs	r0, #1
 80041b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80041b8:	e7a8      	b.n	800410c <_svfiprintf_r+0xd8>
 80041ba:	2300      	movs	r3, #0
 80041bc:	f04f 0c0a 	mov.w	ip, #10
 80041c0:	4619      	mov	r1, r3
 80041c2:	3401      	adds	r4, #1
 80041c4:	9305      	str	r3, [sp, #20]
 80041c6:	4620      	mov	r0, r4
 80041c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041cc:	3a30      	subs	r2, #48	@ 0x30
 80041ce:	2a09      	cmp	r2, #9
 80041d0:	d903      	bls.n	80041da <_svfiprintf_r+0x1a6>
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d0c6      	beq.n	8004164 <_svfiprintf_r+0x130>
 80041d6:	9105      	str	r1, [sp, #20]
 80041d8:	e7c4      	b.n	8004164 <_svfiprintf_r+0x130>
 80041da:	4604      	mov	r4, r0
 80041dc:	2301      	movs	r3, #1
 80041de:	fb0c 2101 	mla	r1, ip, r1, r2
 80041e2:	e7f0      	b.n	80041c6 <_svfiprintf_r+0x192>
 80041e4:	ab03      	add	r3, sp, #12
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	462a      	mov	r2, r5
 80041ea:	4638      	mov	r0, r7
 80041ec:	4b0e      	ldr	r3, [pc, #56]	@ (8004228 <_svfiprintf_r+0x1f4>)
 80041ee:	a904      	add	r1, sp, #16
 80041f0:	f3af 8000 	nop.w
 80041f4:	1c42      	adds	r2, r0, #1
 80041f6:	4606      	mov	r6, r0
 80041f8:	d1d6      	bne.n	80041a8 <_svfiprintf_r+0x174>
 80041fa:	89ab      	ldrh	r3, [r5, #12]
 80041fc:	065b      	lsls	r3, r3, #25
 80041fe:	f53f af2d 	bmi.w	800405c <_svfiprintf_r+0x28>
 8004202:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004204:	e72c      	b.n	8004060 <_svfiprintf_r+0x2c>
 8004206:	ab03      	add	r3, sp, #12
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	462a      	mov	r2, r5
 800420c:	4638      	mov	r0, r7
 800420e:	4b06      	ldr	r3, [pc, #24]	@ (8004228 <_svfiprintf_r+0x1f4>)
 8004210:	a904      	add	r1, sp, #16
 8004212:	f000 f87d 	bl	8004310 <_printf_i>
 8004216:	e7ed      	b.n	80041f4 <_svfiprintf_r+0x1c0>
 8004218:	080047ea 	.word	0x080047ea
 800421c:	080047f0 	.word	0x080047f0
 8004220:	080047f4 	.word	0x080047f4
 8004224:	00000000 	.word	0x00000000
 8004228:	08003f7d 	.word	0x08003f7d

0800422c <_printf_common>:
 800422c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004230:	4616      	mov	r6, r2
 8004232:	4698      	mov	r8, r3
 8004234:	688a      	ldr	r2, [r1, #8]
 8004236:	690b      	ldr	r3, [r1, #16]
 8004238:	4607      	mov	r7, r0
 800423a:	4293      	cmp	r3, r2
 800423c:	bfb8      	it	lt
 800423e:	4613      	movlt	r3, r2
 8004240:	6033      	str	r3, [r6, #0]
 8004242:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004246:	460c      	mov	r4, r1
 8004248:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800424c:	b10a      	cbz	r2, 8004252 <_printf_common+0x26>
 800424e:	3301      	adds	r3, #1
 8004250:	6033      	str	r3, [r6, #0]
 8004252:	6823      	ldr	r3, [r4, #0]
 8004254:	0699      	lsls	r1, r3, #26
 8004256:	bf42      	ittt	mi
 8004258:	6833      	ldrmi	r3, [r6, #0]
 800425a:	3302      	addmi	r3, #2
 800425c:	6033      	strmi	r3, [r6, #0]
 800425e:	6825      	ldr	r5, [r4, #0]
 8004260:	f015 0506 	ands.w	r5, r5, #6
 8004264:	d106      	bne.n	8004274 <_printf_common+0x48>
 8004266:	f104 0a19 	add.w	sl, r4, #25
 800426a:	68e3      	ldr	r3, [r4, #12]
 800426c:	6832      	ldr	r2, [r6, #0]
 800426e:	1a9b      	subs	r3, r3, r2
 8004270:	42ab      	cmp	r3, r5
 8004272:	dc2b      	bgt.n	80042cc <_printf_common+0xa0>
 8004274:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004278:	6822      	ldr	r2, [r4, #0]
 800427a:	3b00      	subs	r3, #0
 800427c:	bf18      	it	ne
 800427e:	2301      	movne	r3, #1
 8004280:	0692      	lsls	r2, r2, #26
 8004282:	d430      	bmi.n	80042e6 <_printf_common+0xba>
 8004284:	4641      	mov	r1, r8
 8004286:	4638      	mov	r0, r7
 8004288:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800428c:	47c8      	blx	r9
 800428e:	3001      	adds	r0, #1
 8004290:	d023      	beq.n	80042da <_printf_common+0xae>
 8004292:	6823      	ldr	r3, [r4, #0]
 8004294:	6922      	ldr	r2, [r4, #16]
 8004296:	f003 0306 	and.w	r3, r3, #6
 800429a:	2b04      	cmp	r3, #4
 800429c:	bf14      	ite	ne
 800429e:	2500      	movne	r5, #0
 80042a0:	6833      	ldreq	r3, [r6, #0]
 80042a2:	f04f 0600 	mov.w	r6, #0
 80042a6:	bf08      	it	eq
 80042a8:	68e5      	ldreq	r5, [r4, #12]
 80042aa:	f104 041a 	add.w	r4, r4, #26
 80042ae:	bf08      	it	eq
 80042b0:	1aed      	subeq	r5, r5, r3
 80042b2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80042b6:	bf08      	it	eq
 80042b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042bc:	4293      	cmp	r3, r2
 80042be:	bfc4      	itt	gt
 80042c0:	1a9b      	subgt	r3, r3, r2
 80042c2:	18ed      	addgt	r5, r5, r3
 80042c4:	42b5      	cmp	r5, r6
 80042c6:	d11a      	bne.n	80042fe <_printf_common+0xd2>
 80042c8:	2000      	movs	r0, #0
 80042ca:	e008      	b.n	80042de <_printf_common+0xb2>
 80042cc:	2301      	movs	r3, #1
 80042ce:	4652      	mov	r2, sl
 80042d0:	4641      	mov	r1, r8
 80042d2:	4638      	mov	r0, r7
 80042d4:	47c8      	blx	r9
 80042d6:	3001      	adds	r0, #1
 80042d8:	d103      	bne.n	80042e2 <_printf_common+0xb6>
 80042da:	f04f 30ff 	mov.w	r0, #4294967295
 80042de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042e2:	3501      	adds	r5, #1
 80042e4:	e7c1      	b.n	800426a <_printf_common+0x3e>
 80042e6:	2030      	movs	r0, #48	@ 0x30
 80042e8:	18e1      	adds	r1, r4, r3
 80042ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80042ee:	1c5a      	adds	r2, r3, #1
 80042f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80042f4:	4422      	add	r2, r4
 80042f6:	3302      	adds	r3, #2
 80042f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80042fc:	e7c2      	b.n	8004284 <_printf_common+0x58>
 80042fe:	2301      	movs	r3, #1
 8004300:	4622      	mov	r2, r4
 8004302:	4641      	mov	r1, r8
 8004304:	4638      	mov	r0, r7
 8004306:	47c8      	blx	r9
 8004308:	3001      	adds	r0, #1
 800430a:	d0e6      	beq.n	80042da <_printf_common+0xae>
 800430c:	3601      	adds	r6, #1
 800430e:	e7d9      	b.n	80042c4 <_printf_common+0x98>

08004310 <_printf_i>:
 8004310:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004314:	7e0f      	ldrb	r7, [r1, #24]
 8004316:	4691      	mov	r9, r2
 8004318:	2f78      	cmp	r7, #120	@ 0x78
 800431a:	4680      	mov	r8, r0
 800431c:	460c      	mov	r4, r1
 800431e:	469a      	mov	sl, r3
 8004320:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004322:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004326:	d807      	bhi.n	8004338 <_printf_i+0x28>
 8004328:	2f62      	cmp	r7, #98	@ 0x62
 800432a:	d80a      	bhi.n	8004342 <_printf_i+0x32>
 800432c:	2f00      	cmp	r7, #0
 800432e:	f000 80d1 	beq.w	80044d4 <_printf_i+0x1c4>
 8004332:	2f58      	cmp	r7, #88	@ 0x58
 8004334:	f000 80b8 	beq.w	80044a8 <_printf_i+0x198>
 8004338:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800433c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004340:	e03a      	b.n	80043b8 <_printf_i+0xa8>
 8004342:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004346:	2b15      	cmp	r3, #21
 8004348:	d8f6      	bhi.n	8004338 <_printf_i+0x28>
 800434a:	a101      	add	r1, pc, #4	@ (adr r1, 8004350 <_printf_i+0x40>)
 800434c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004350:	080043a9 	.word	0x080043a9
 8004354:	080043bd 	.word	0x080043bd
 8004358:	08004339 	.word	0x08004339
 800435c:	08004339 	.word	0x08004339
 8004360:	08004339 	.word	0x08004339
 8004364:	08004339 	.word	0x08004339
 8004368:	080043bd 	.word	0x080043bd
 800436c:	08004339 	.word	0x08004339
 8004370:	08004339 	.word	0x08004339
 8004374:	08004339 	.word	0x08004339
 8004378:	08004339 	.word	0x08004339
 800437c:	080044bb 	.word	0x080044bb
 8004380:	080043e7 	.word	0x080043e7
 8004384:	08004475 	.word	0x08004475
 8004388:	08004339 	.word	0x08004339
 800438c:	08004339 	.word	0x08004339
 8004390:	080044dd 	.word	0x080044dd
 8004394:	08004339 	.word	0x08004339
 8004398:	080043e7 	.word	0x080043e7
 800439c:	08004339 	.word	0x08004339
 80043a0:	08004339 	.word	0x08004339
 80043a4:	0800447d 	.word	0x0800447d
 80043a8:	6833      	ldr	r3, [r6, #0]
 80043aa:	1d1a      	adds	r2, r3, #4
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	6032      	str	r2, [r6, #0]
 80043b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80043b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80043b8:	2301      	movs	r3, #1
 80043ba:	e09c      	b.n	80044f6 <_printf_i+0x1e6>
 80043bc:	6833      	ldr	r3, [r6, #0]
 80043be:	6820      	ldr	r0, [r4, #0]
 80043c0:	1d19      	adds	r1, r3, #4
 80043c2:	6031      	str	r1, [r6, #0]
 80043c4:	0606      	lsls	r6, r0, #24
 80043c6:	d501      	bpl.n	80043cc <_printf_i+0xbc>
 80043c8:	681d      	ldr	r5, [r3, #0]
 80043ca:	e003      	b.n	80043d4 <_printf_i+0xc4>
 80043cc:	0645      	lsls	r5, r0, #25
 80043ce:	d5fb      	bpl.n	80043c8 <_printf_i+0xb8>
 80043d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80043d4:	2d00      	cmp	r5, #0
 80043d6:	da03      	bge.n	80043e0 <_printf_i+0xd0>
 80043d8:	232d      	movs	r3, #45	@ 0x2d
 80043da:	426d      	negs	r5, r5
 80043dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043e0:	230a      	movs	r3, #10
 80043e2:	4858      	ldr	r0, [pc, #352]	@ (8004544 <_printf_i+0x234>)
 80043e4:	e011      	b.n	800440a <_printf_i+0xfa>
 80043e6:	6821      	ldr	r1, [r4, #0]
 80043e8:	6833      	ldr	r3, [r6, #0]
 80043ea:	0608      	lsls	r0, r1, #24
 80043ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80043f0:	d402      	bmi.n	80043f8 <_printf_i+0xe8>
 80043f2:	0649      	lsls	r1, r1, #25
 80043f4:	bf48      	it	mi
 80043f6:	b2ad      	uxthmi	r5, r5
 80043f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80043fa:	6033      	str	r3, [r6, #0]
 80043fc:	bf14      	ite	ne
 80043fe:	230a      	movne	r3, #10
 8004400:	2308      	moveq	r3, #8
 8004402:	4850      	ldr	r0, [pc, #320]	@ (8004544 <_printf_i+0x234>)
 8004404:	2100      	movs	r1, #0
 8004406:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800440a:	6866      	ldr	r6, [r4, #4]
 800440c:	2e00      	cmp	r6, #0
 800440e:	60a6      	str	r6, [r4, #8]
 8004410:	db05      	blt.n	800441e <_printf_i+0x10e>
 8004412:	6821      	ldr	r1, [r4, #0]
 8004414:	432e      	orrs	r6, r5
 8004416:	f021 0104 	bic.w	r1, r1, #4
 800441a:	6021      	str	r1, [r4, #0]
 800441c:	d04b      	beq.n	80044b6 <_printf_i+0x1a6>
 800441e:	4616      	mov	r6, r2
 8004420:	fbb5 f1f3 	udiv	r1, r5, r3
 8004424:	fb03 5711 	mls	r7, r3, r1, r5
 8004428:	5dc7      	ldrb	r7, [r0, r7]
 800442a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800442e:	462f      	mov	r7, r5
 8004430:	42bb      	cmp	r3, r7
 8004432:	460d      	mov	r5, r1
 8004434:	d9f4      	bls.n	8004420 <_printf_i+0x110>
 8004436:	2b08      	cmp	r3, #8
 8004438:	d10b      	bne.n	8004452 <_printf_i+0x142>
 800443a:	6823      	ldr	r3, [r4, #0]
 800443c:	07df      	lsls	r7, r3, #31
 800443e:	d508      	bpl.n	8004452 <_printf_i+0x142>
 8004440:	6923      	ldr	r3, [r4, #16]
 8004442:	6861      	ldr	r1, [r4, #4]
 8004444:	4299      	cmp	r1, r3
 8004446:	bfde      	ittt	le
 8004448:	2330      	movle	r3, #48	@ 0x30
 800444a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800444e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004452:	1b92      	subs	r2, r2, r6
 8004454:	6122      	str	r2, [r4, #16]
 8004456:	464b      	mov	r3, r9
 8004458:	4621      	mov	r1, r4
 800445a:	4640      	mov	r0, r8
 800445c:	f8cd a000 	str.w	sl, [sp]
 8004460:	aa03      	add	r2, sp, #12
 8004462:	f7ff fee3 	bl	800422c <_printf_common>
 8004466:	3001      	adds	r0, #1
 8004468:	d14a      	bne.n	8004500 <_printf_i+0x1f0>
 800446a:	f04f 30ff 	mov.w	r0, #4294967295
 800446e:	b004      	add	sp, #16
 8004470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004474:	6823      	ldr	r3, [r4, #0]
 8004476:	f043 0320 	orr.w	r3, r3, #32
 800447a:	6023      	str	r3, [r4, #0]
 800447c:	2778      	movs	r7, #120	@ 0x78
 800447e:	4832      	ldr	r0, [pc, #200]	@ (8004548 <_printf_i+0x238>)
 8004480:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004484:	6823      	ldr	r3, [r4, #0]
 8004486:	6831      	ldr	r1, [r6, #0]
 8004488:	061f      	lsls	r7, r3, #24
 800448a:	f851 5b04 	ldr.w	r5, [r1], #4
 800448e:	d402      	bmi.n	8004496 <_printf_i+0x186>
 8004490:	065f      	lsls	r7, r3, #25
 8004492:	bf48      	it	mi
 8004494:	b2ad      	uxthmi	r5, r5
 8004496:	6031      	str	r1, [r6, #0]
 8004498:	07d9      	lsls	r1, r3, #31
 800449a:	bf44      	itt	mi
 800449c:	f043 0320 	orrmi.w	r3, r3, #32
 80044a0:	6023      	strmi	r3, [r4, #0]
 80044a2:	b11d      	cbz	r5, 80044ac <_printf_i+0x19c>
 80044a4:	2310      	movs	r3, #16
 80044a6:	e7ad      	b.n	8004404 <_printf_i+0xf4>
 80044a8:	4826      	ldr	r0, [pc, #152]	@ (8004544 <_printf_i+0x234>)
 80044aa:	e7e9      	b.n	8004480 <_printf_i+0x170>
 80044ac:	6823      	ldr	r3, [r4, #0]
 80044ae:	f023 0320 	bic.w	r3, r3, #32
 80044b2:	6023      	str	r3, [r4, #0]
 80044b4:	e7f6      	b.n	80044a4 <_printf_i+0x194>
 80044b6:	4616      	mov	r6, r2
 80044b8:	e7bd      	b.n	8004436 <_printf_i+0x126>
 80044ba:	6833      	ldr	r3, [r6, #0]
 80044bc:	6825      	ldr	r5, [r4, #0]
 80044be:	1d18      	adds	r0, r3, #4
 80044c0:	6961      	ldr	r1, [r4, #20]
 80044c2:	6030      	str	r0, [r6, #0]
 80044c4:	062e      	lsls	r6, r5, #24
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	d501      	bpl.n	80044ce <_printf_i+0x1be>
 80044ca:	6019      	str	r1, [r3, #0]
 80044cc:	e002      	b.n	80044d4 <_printf_i+0x1c4>
 80044ce:	0668      	lsls	r0, r5, #25
 80044d0:	d5fb      	bpl.n	80044ca <_printf_i+0x1ba>
 80044d2:	8019      	strh	r1, [r3, #0]
 80044d4:	2300      	movs	r3, #0
 80044d6:	4616      	mov	r6, r2
 80044d8:	6123      	str	r3, [r4, #16]
 80044da:	e7bc      	b.n	8004456 <_printf_i+0x146>
 80044dc:	6833      	ldr	r3, [r6, #0]
 80044de:	2100      	movs	r1, #0
 80044e0:	1d1a      	adds	r2, r3, #4
 80044e2:	6032      	str	r2, [r6, #0]
 80044e4:	681e      	ldr	r6, [r3, #0]
 80044e6:	6862      	ldr	r2, [r4, #4]
 80044e8:	4630      	mov	r0, r6
 80044ea:	f000 f859 	bl	80045a0 <memchr>
 80044ee:	b108      	cbz	r0, 80044f4 <_printf_i+0x1e4>
 80044f0:	1b80      	subs	r0, r0, r6
 80044f2:	6060      	str	r0, [r4, #4]
 80044f4:	6863      	ldr	r3, [r4, #4]
 80044f6:	6123      	str	r3, [r4, #16]
 80044f8:	2300      	movs	r3, #0
 80044fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044fe:	e7aa      	b.n	8004456 <_printf_i+0x146>
 8004500:	4632      	mov	r2, r6
 8004502:	4649      	mov	r1, r9
 8004504:	4640      	mov	r0, r8
 8004506:	6923      	ldr	r3, [r4, #16]
 8004508:	47d0      	blx	sl
 800450a:	3001      	adds	r0, #1
 800450c:	d0ad      	beq.n	800446a <_printf_i+0x15a>
 800450e:	6823      	ldr	r3, [r4, #0]
 8004510:	079b      	lsls	r3, r3, #30
 8004512:	d413      	bmi.n	800453c <_printf_i+0x22c>
 8004514:	68e0      	ldr	r0, [r4, #12]
 8004516:	9b03      	ldr	r3, [sp, #12]
 8004518:	4298      	cmp	r0, r3
 800451a:	bfb8      	it	lt
 800451c:	4618      	movlt	r0, r3
 800451e:	e7a6      	b.n	800446e <_printf_i+0x15e>
 8004520:	2301      	movs	r3, #1
 8004522:	4632      	mov	r2, r6
 8004524:	4649      	mov	r1, r9
 8004526:	4640      	mov	r0, r8
 8004528:	47d0      	blx	sl
 800452a:	3001      	adds	r0, #1
 800452c:	d09d      	beq.n	800446a <_printf_i+0x15a>
 800452e:	3501      	adds	r5, #1
 8004530:	68e3      	ldr	r3, [r4, #12]
 8004532:	9903      	ldr	r1, [sp, #12]
 8004534:	1a5b      	subs	r3, r3, r1
 8004536:	42ab      	cmp	r3, r5
 8004538:	dcf2      	bgt.n	8004520 <_printf_i+0x210>
 800453a:	e7eb      	b.n	8004514 <_printf_i+0x204>
 800453c:	2500      	movs	r5, #0
 800453e:	f104 0619 	add.w	r6, r4, #25
 8004542:	e7f5      	b.n	8004530 <_printf_i+0x220>
 8004544:	080047fb 	.word	0x080047fb
 8004548:	0800480c 	.word	0x0800480c

0800454c <memmove>:
 800454c:	4288      	cmp	r0, r1
 800454e:	b510      	push	{r4, lr}
 8004550:	eb01 0402 	add.w	r4, r1, r2
 8004554:	d902      	bls.n	800455c <memmove+0x10>
 8004556:	4284      	cmp	r4, r0
 8004558:	4623      	mov	r3, r4
 800455a:	d807      	bhi.n	800456c <memmove+0x20>
 800455c:	1e43      	subs	r3, r0, #1
 800455e:	42a1      	cmp	r1, r4
 8004560:	d008      	beq.n	8004574 <memmove+0x28>
 8004562:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004566:	f803 2f01 	strb.w	r2, [r3, #1]!
 800456a:	e7f8      	b.n	800455e <memmove+0x12>
 800456c:	4601      	mov	r1, r0
 800456e:	4402      	add	r2, r0
 8004570:	428a      	cmp	r2, r1
 8004572:	d100      	bne.n	8004576 <memmove+0x2a>
 8004574:	bd10      	pop	{r4, pc}
 8004576:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800457a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800457e:	e7f7      	b.n	8004570 <memmove+0x24>

08004580 <_sbrk_r>:
 8004580:	b538      	push	{r3, r4, r5, lr}
 8004582:	2300      	movs	r3, #0
 8004584:	4d05      	ldr	r5, [pc, #20]	@ (800459c <_sbrk_r+0x1c>)
 8004586:	4604      	mov	r4, r0
 8004588:	4608      	mov	r0, r1
 800458a:	602b      	str	r3, [r5, #0]
 800458c:	f7fc f930 	bl	80007f0 <_sbrk>
 8004590:	1c43      	adds	r3, r0, #1
 8004592:	d102      	bne.n	800459a <_sbrk_r+0x1a>
 8004594:	682b      	ldr	r3, [r5, #0]
 8004596:	b103      	cbz	r3, 800459a <_sbrk_r+0x1a>
 8004598:	6023      	str	r3, [r4, #0]
 800459a:	bd38      	pop	{r3, r4, r5, pc}
 800459c:	2000120c 	.word	0x2000120c

080045a0 <memchr>:
 80045a0:	4603      	mov	r3, r0
 80045a2:	b510      	push	{r4, lr}
 80045a4:	b2c9      	uxtb	r1, r1
 80045a6:	4402      	add	r2, r0
 80045a8:	4293      	cmp	r3, r2
 80045aa:	4618      	mov	r0, r3
 80045ac:	d101      	bne.n	80045b2 <memchr+0x12>
 80045ae:	2000      	movs	r0, #0
 80045b0:	e003      	b.n	80045ba <memchr+0x1a>
 80045b2:	7804      	ldrb	r4, [r0, #0]
 80045b4:	3301      	adds	r3, #1
 80045b6:	428c      	cmp	r4, r1
 80045b8:	d1f6      	bne.n	80045a8 <memchr+0x8>
 80045ba:	bd10      	pop	{r4, pc}

080045bc <_realloc_r>:
 80045bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045c0:	4607      	mov	r7, r0
 80045c2:	4614      	mov	r4, r2
 80045c4:	460d      	mov	r5, r1
 80045c6:	b921      	cbnz	r1, 80045d2 <_realloc_r+0x16>
 80045c8:	4611      	mov	r1, r2
 80045ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045ce:	f7ff bc49 	b.w	8003e64 <_malloc_r>
 80045d2:	b92a      	cbnz	r2, 80045e0 <_realloc_r+0x24>
 80045d4:	f7ff fbdc 	bl	8003d90 <_free_r>
 80045d8:	4625      	mov	r5, r4
 80045da:	4628      	mov	r0, r5
 80045dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045e0:	f000 f81a 	bl	8004618 <_malloc_usable_size_r>
 80045e4:	4284      	cmp	r4, r0
 80045e6:	4606      	mov	r6, r0
 80045e8:	d802      	bhi.n	80045f0 <_realloc_r+0x34>
 80045ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80045ee:	d8f4      	bhi.n	80045da <_realloc_r+0x1e>
 80045f0:	4621      	mov	r1, r4
 80045f2:	4638      	mov	r0, r7
 80045f4:	f7ff fc36 	bl	8003e64 <_malloc_r>
 80045f8:	4680      	mov	r8, r0
 80045fa:	b908      	cbnz	r0, 8004600 <_realloc_r+0x44>
 80045fc:	4645      	mov	r5, r8
 80045fe:	e7ec      	b.n	80045da <_realloc_r+0x1e>
 8004600:	42b4      	cmp	r4, r6
 8004602:	4622      	mov	r2, r4
 8004604:	4629      	mov	r1, r5
 8004606:	bf28      	it	cs
 8004608:	4632      	movcs	r2, r6
 800460a:	f7ff fbb3 	bl	8003d74 <memcpy>
 800460e:	4629      	mov	r1, r5
 8004610:	4638      	mov	r0, r7
 8004612:	f7ff fbbd 	bl	8003d90 <_free_r>
 8004616:	e7f1      	b.n	80045fc <_realloc_r+0x40>

08004618 <_malloc_usable_size_r>:
 8004618:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800461c:	1f18      	subs	r0, r3, #4
 800461e:	2b00      	cmp	r3, #0
 8004620:	bfbc      	itt	lt
 8004622:	580b      	ldrlt	r3, [r1, r0]
 8004624:	18c0      	addlt	r0, r0, r3
 8004626:	4770      	bx	lr

08004628 <_init>:
 8004628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800462a:	bf00      	nop
 800462c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800462e:	bc08      	pop	{r3}
 8004630:	469e      	mov	lr, r3
 8004632:	4770      	bx	lr

08004634 <_fini>:
 8004634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004636:	bf00      	nop
 8004638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800463a:	bc08      	pop	{r3}
 800463c:	469e      	mov	lr, r3
 800463e:	4770      	bx	lr
