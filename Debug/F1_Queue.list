
F1_Queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000465c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  0800476c  0800476c  0000576c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004970  08004970  00006060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004970  08004970  00005970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004978  08004978  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004978  08004978  00005978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800497c  0800497c  0000597c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004980  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001208  20000060  080049e0  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001268  080049e0  00006268  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001271a  00000000  00000000  00006089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000295a  00000000  00000000  000187a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000088ce  00000000  00000000  0001b0fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f78  00000000  00000000  000239d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e50  00000000  00000000  00024948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019189  00000000  00000000  00025798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000126e4  00000000  00000000  0003e921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000901ec  00000000  00000000  00051005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e11f1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000044d4  00000000  00000000  000e1234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000084  00000000  00000000  000e5708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_rnglists 00000019  00000000  00000000  000e578c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08004754 	.word	0x08004754

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08004754 	.word	0x08004754

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	4a06      	ldr	r2, [pc, #24]	@ (8000188 <vApplicationGetIdleTaskMemory+0x28>)
 8000170:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000172:	68bb      	ldr	r3, [r7, #8]
 8000174:	4a05      	ldr	r2, [pc, #20]	@ (800018c <vApplicationGetIdleTaskMemory+0x2c>)
 8000176:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2280      	movs	r2, #128	@ 0x80
 800017c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800017e:	bf00      	nop
 8000180:	3714      	adds	r7, #20
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	2000007c 	.word	0x2000007c
 800018c:	2000011c 	.word	0x2000011c

08000190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b086      	sub	sp, #24
 8000194:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000196:	f000 fba1 	bl	80008dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800019a:	f000 f877 	bl	800028c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800019e:	f000 f8df 	bl	8000360 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001a2:	f000 f8b3 	bl	800030c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  //se crea la Queue
  St_Queue_Handler = xQueueCreate(2,sizeof(my_struct)); /*puede guardar dos elementos del tamaño
 80001a6:	2200      	movs	r2, #0
 80001a8:	210c      	movs	r1, #12
 80001aa:	2002      	movs	r0, #2
 80001ac:	f001 ffd0 	bl	8002150 <xQueueGenericCreate>
 80001b0:	4603      	mov	r3, r0
 80001b2:	4a28      	ldr	r2, [pc, #160]	@ (8000254 <main+0xc4>)
 80001b4:	6013      	str	r3, [r2, #0]
  de la estructura */
  char *prueba= "Hola mundo\r\n";
 80001b6:	4b28      	ldr	r3, [pc, #160]	@ (8000258 <main+0xc8>)
 80001b8:	60fb      	str	r3, [r7, #12]
  	  HAL_UART_Transmit(&huart1,(uint8_t *)prueba,strlen(prueba),HAL_MAX_DELAY);
 80001ba:	68f8      	ldr	r0, [r7, #12]
 80001bc:	f7ff ffc8 	bl	8000150 <strlen>
 80001c0:	4603      	mov	r3, r0
 80001c2:	b29a      	uxth	r2, r3
 80001c4:	f04f 33ff 	mov.w	r3, #4294967295
 80001c8:	68f9      	ldr	r1, [r7, #12]
 80001ca:	4824      	ldr	r0, [pc, #144]	@ (800025c <main+0xcc>)
 80001cc:	f001 fcd2 	bl	8001b74 <HAL_UART_Transmit>

  if(St_Queue_Handler==0){
 80001d0:	4b20      	ldr	r3, [pc, #128]	@ (8000254 <main+0xc4>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d10d      	bne.n	80001f4 <main+0x64>
	  char *str= "Unable to create Structure Queue\r\n";
 80001d8:	4b21      	ldr	r3, [pc, #132]	@ (8000260 <main+0xd0>)
 80001da:	607b      	str	r3, [r7, #4]
	  HAL_UART_Transmit(&huart1,(uint8_t *)str,strlen(str),HAL_MAX_DELAY);
 80001dc:	6878      	ldr	r0, [r7, #4]
 80001de:	f7ff ffb7 	bl	8000150 <strlen>
 80001e2:	4603      	mov	r3, r0
 80001e4:	b29a      	uxth	r2, r3
 80001e6:	f04f 33ff 	mov.w	r3, #4294967295
 80001ea:	6879      	ldr	r1, [r7, #4]
 80001ec:	481b      	ldr	r0, [pc, #108]	@ (800025c <main+0xcc>)
 80001ee:	f001 fcc1 	bl	8001b74 <HAL_UART_Transmit>
 80001f2:	e00c      	b.n	800020e <main+0x7e>
  }else{
	  char *str= "Structure created\r\n";
 80001f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000264 <main+0xd4>)
 80001f6:	60bb      	str	r3, [r7, #8]
	  HAL_UART_Transmit(&huart1,(uint8_t *)str,strlen(str),HAL_MAX_DELAY);
 80001f8:	68b8      	ldr	r0, [r7, #8]
 80001fa:	f7ff ffa9 	bl	8000150 <strlen>
 80001fe:	4603      	mov	r3, r0
 8000200:	b29a      	uxth	r2, r3
 8000202:	f04f 33ff 	mov.w	r3, #4294967295
 8000206:	68b9      	ldr	r1, [r7, #8]
 8000208:	4814      	ldr	r0, [pc, #80]	@ (800025c <main+0xcc>)
 800020a:	f001 fcb3 	bl	8001b74 <HAL_UART_Transmit>
  }


  /**Se crea la tarea***/
  //función de la tarea, nombre de la tarea,stack depth, parámetro, prioridad y handler
  xTaskCreate(Sender1_Task,"Sender1",128,NULL,2,&Sender1_Task_Handler);
 800020e:	4b16      	ldr	r3, [pc, #88]	@ (8000268 <main+0xd8>)
 8000210:	9301      	str	r3, [sp, #4]
 8000212:	2302      	movs	r3, #2
 8000214:	9300      	str	r3, [sp, #0]
 8000216:	2300      	movs	r3, #0
 8000218:	2280      	movs	r2, #128	@ 0x80
 800021a:	4914      	ldr	r1, [pc, #80]	@ (800026c <main+0xdc>)
 800021c:	4814      	ldr	r0, [pc, #80]	@ (8000270 <main+0xe0>)
 800021e:	f002 fb45 	bl	80028ac <xTaskCreate>
  xTaskCreate(Sender2_Task,"Sender2",128,NULL,2,&Sender2_Task_Handler);
 8000222:	4b14      	ldr	r3, [pc, #80]	@ (8000274 <main+0xe4>)
 8000224:	9301      	str	r3, [sp, #4]
 8000226:	2302      	movs	r3, #2
 8000228:	9300      	str	r3, [sp, #0]
 800022a:	2300      	movs	r3, #0
 800022c:	2280      	movs	r2, #128	@ 0x80
 800022e:	4912      	ldr	r1, [pc, #72]	@ (8000278 <main+0xe8>)
 8000230:	4812      	ldr	r0, [pc, #72]	@ (800027c <main+0xec>)
 8000232:	f002 fb3b 	bl	80028ac <xTaskCreate>
  xTaskCreate(Receiver_Task,"Receiver",128,NULL,1,&Receiver_Task_Handler);
 8000236:	4b12      	ldr	r3, [pc, #72]	@ (8000280 <main+0xf0>)
 8000238:	9301      	str	r3, [sp, #4]
 800023a:	2301      	movs	r3, #1
 800023c:	9300      	str	r3, [sp, #0]
 800023e:	2300      	movs	r3, #0
 8000240:	2280      	movs	r2, #128	@ 0x80
 8000242:	4910      	ldr	r1, [pc, #64]	@ (8000284 <main+0xf4>)
 8000244:	4810      	ldr	r0, [pc, #64]	@ (8000288 <main+0xf8>)
 8000246:	f002 fb31 	bl	80028ac <xTaskCreate>

  //scheduler
  vTaskStartScheduler();
 800024a:	f002 fcb5 	bl	8002bb8 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800024e:	bf00      	nop
 8000250:	e7fd      	b.n	800024e <main+0xbe>
 8000252:	bf00      	nop
 8000254:	20000364 	.word	0x20000364
 8000258:	0800476c 	.word	0x0800476c
 800025c:	2000031c 	.word	0x2000031c
 8000260:	0800477c 	.word	0x0800477c
 8000264:	080047a0 	.word	0x080047a0
 8000268:	20000368 	.word	0x20000368
 800026c:	080047b4 	.word	0x080047b4
 8000270:	0800038d 	.word	0x0800038d
 8000274:	2000036c 	.word	0x2000036c
 8000278:	080047bc 	.word	0x080047bc
 800027c:	08000451 	.word	0x08000451
 8000280:	20000370 	.word	0x20000370
 8000284:	080047c4 	.word	0x080047c4
 8000288:	08000515 	.word	0x08000515

0800028c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b090      	sub	sp, #64	@ 0x40
 8000290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000292:	f107 0318 	add.w	r3, r7, #24
 8000296:	2228      	movs	r2, #40	@ 0x28
 8000298:	2100      	movs	r1, #0
 800029a:	4618      	mov	r0, r3
 800029c:	f003 fd6e 	bl	8003d7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	605a      	str	r2, [r3, #4]
 80002a8:	609a      	str	r2, [r3, #8]
 80002aa:	60da      	str	r2, [r3, #12]
 80002ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ae:	2302      	movs	r3, #2
 80002b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b2:	2301      	movs	r3, #1
 80002b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b6:	2310      	movs	r3, #16
 80002b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ba:	2302      	movs	r3, #2
 80002bc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80002be:	2300      	movs	r3, #0
 80002c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80002c2:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80002c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c8:	f107 0318 	add.w	r3, r7, #24
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 fd93 	bl	8000df8 <HAL_RCC_OscConfig>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002d8:	f000 f97e 	bl	80005d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002dc:	230f      	movs	r3, #15
 80002de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e0:	2302      	movs	r3, #2
 80002e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e4:	2300      	movs	r3, #0
 80002e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002e8:	2300      	movs	r3, #0
 80002ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ec:	2300      	movs	r3, #0
 80002ee:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	2100      	movs	r1, #0
 80002f4:	4618      	mov	r0, r3
 80002f6:	f001 f801 	bl	80012fc <HAL_RCC_ClockConfig>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000300:	f000 f96a 	bl	80005d8 <Error_Handler>
  }
}
 8000304:	bf00      	nop
 8000306:	3740      	adds	r7, #64	@ 0x40
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}

0800030c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */
//
  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000310:	4b11      	ldr	r3, [pc, #68]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 8000312:	4a12      	ldr	r2, [pc, #72]	@ (800035c <MX_USART1_UART_Init+0x50>)
 8000314:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000316:	4b10      	ldr	r3, [pc, #64]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 8000318:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800031c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800031e:	4b0e      	ldr	r3, [pc, #56]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 8000320:	2200      	movs	r2, #0
 8000322:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000324:	4b0c      	ldr	r3, [pc, #48]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 8000326:	2200      	movs	r2, #0
 8000328:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800032a:	4b0b      	ldr	r3, [pc, #44]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 800032c:	2200      	movs	r2, #0
 800032e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000330:	4b09      	ldr	r3, [pc, #36]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 8000332:	220c      	movs	r2, #12
 8000334:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000336:	4b08      	ldr	r3, [pc, #32]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 8000338:	2200      	movs	r2, #0
 800033a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800033c:	4b06      	ldr	r3, [pc, #24]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 800033e:	2200      	movs	r2, #0
 8000340:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000342:	4805      	ldr	r0, [pc, #20]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 8000344:	f001 fbc6 	bl	8001ad4 <HAL_UART_Init>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800034e:	f000 f943 	bl	80005d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	2000031c 	.word	0x2000031c
 800035c:	40013800 	.word	0x40013800

08000360 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000366:	4b08      	ldr	r3, [pc, #32]	@ (8000388 <MX_GPIO_Init+0x28>)
 8000368:	699b      	ldr	r3, [r3, #24]
 800036a:	4a07      	ldr	r2, [pc, #28]	@ (8000388 <MX_GPIO_Init+0x28>)
 800036c:	f043 0304 	orr.w	r3, r3, #4
 8000370:	6193      	str	r3, [r2, #24]
 8000372:	4b05      	ldr	r3, [pc, #20]	@ (8000388 <MX_GPIO_Init+0x28>)
 8000374:	699b      	ldr	r3, [r3, #24]
 8000376:	f003 0304 	and.w	r3, r3, #4
 800037a:	607b      	str	r3, [r7, #4]
 800037c:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800037e:	bf00      	nop
 8000380:	370c      	adds	r7, #12
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr
 8000388:	40021000 	.word	0x40021000

0800038c <Sender1_Task>:

/* USER CODE BEGIN 4 */

void Sender1_Task(void *argument){
 800038c:	b580      	push	{r7, lr}
 800038e:	b086      	sub	sp, #24
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
	my_struct *ptrtostruct;
	uint32_t TickDelay=pdMS_TO_TICKS(2000);
 8000394:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000398:	617b      	str	r3, [r7, #20]
	while(1){
		char *str= "Entered SENDER1_Task\r\n";
 800039a:	4b27      	ldr	r3, [pc, #156]	@ (8000438 <Sender1_Task+0xac>)
 800039c:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),HAL_MAX_DELAY);
 800039e:	6938      	ldr	r0, [r7, #16]
 80003a0:	f7ff fed6 	bl	8000150 <strlen>
 80003a4:	4603      	mov	r3, r0
 80003a6:	b29a      	uxth	r2, r3
 80003a8:	f04f 33ff 	mov.w	r3, #4294967295
 80003ac:	6939      	ldr	r1, [r7, #16]
 80003ae:	4823      	ldr	r0, [pc, #140]	@ (800043c <Sender1_Task+0xb0>)
 80003b0:	f001 fbe0 	bl	8001b74 <HAL_UART_Transmit>

		//Allocate memory to the pointer
		ptrtostruct = pvPortMalloc(sizeof(my_struct));
 80003b4:	200c      	movs	r0, #12
 80003b6:	f003 fad3 	bl	8003960 <pvPortMalloc>
 80003ba:	4603      	mov	r3, r0
 80003bc:	60bb      	str	r3, [r7, #8]
//
		//cargar los datos a la estructura
		ptrtostruct->counter=1+indx1;
 80003be:	4b20      	ldr	r3, [pc, #128]	@ (8000440 <Sender1_Task+0xb4>)
 80003c0:	681a      	ldr	r2, [r3, #0]
 80003c2:	68bb      	ldr	r3, [r7, #8]
 80003c4:	3201      	adds	r2, #1
 80003c6:	605a      	str	r2, [r3, #4]
		ptrtostruct->large_value=1000+indx1*100;
 80003c8:	4b1d      	ldr	r3, [pc, #116]	@ (8000440 <Sender1_Task+0xb4>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	b29b      	uxth	r3, r3
 80003ce:	461a      	mov	r2, r3
 80003d0:	0092      	lsls	r2, r2, #2
 80003d2:	4413      	add	r3, r2
 80003d4:	461a      	mov	r2, r3
 80003d6:	0091      	lsls	r1, r2, #2
 80003d8:	461a      	mov	r2, r3
 80003da:	460b      	mov	r3, r1
 80003dc:	4413      	add	r3, r2
 80003de:	009b      	lsls	r3, r3, #2
 80003e0:	b29a      	uxth	r2, r3
 80003e2:	68bb      	ldr	r3, [r7, #8]
 80003e4:	f502 727a 	add.w	r2, r2, #1000	@ 0x3e8
 80003e8:	b292      	uxth	r2, r2
 80003ea:	811a      	strh	r2, [r3, #8]
		ptrtostruct->str="Hello from sender1\r\n";
 80003ec:	68bb      	ldr	r3, [r7, #8]
 80003ee:	4a15      	ldr	r2, [pc, #84]	@ (8000444 <Sender1_Task+0xb8>)
 80003f0:	601a      	str	r2, [r3, #0]

		//enviar a la queue
		if(xQueueSend(St_Queue_Handler,&ptrtostruct,portMAX_DELAY)==pdPASS){
 80003f2:	4b15      	ldr	r3, [pc, #84]	@ (8000448 <Sender1_Task+0xbc>)
 80003f4:	6818      	ldr	r0, [r3, #0]
 80003f6:	f107 0108 	add.w	r1, r7, #8
 80003fa:	2300      	movs	r3, #0
 80003fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000400:	f001 ff00 	bl	8002204 <xQueueGenericSend>
 8000404:	4603      	mov	r3, r0
 8000406:	2b01      	cmp	r3, #1
 8000408:	d10c      	bne.n	8000424 <Sender1_Task+0x98>
			char *str2= "Enviado a la queue con éxito, terminando Sender1_Task\r\n";
 800040a:	4b10      	ldr	r3, [pc, #64]	@ (800044c <Sender1_Task+0xc0>)
 800040c:	60fb      	str	r3, [r7, #12]
			HAL_UART_Transmit(&huart1,(uint8_t*)str2,strlen(str2),HAL_MAX_DELAY);
 800040e:	68f8      	ldr	r0, [r7, #12]
 8000410:	f7ff fe9e 	bl	8000150 <strlen>
 8000414:	4603      	mov	r3, r0
 8000416:	b29a      	uxth	r2, r3
 8000418:	f04f 33ff 	mov.w	r3, #4294967295
 800041c:	68f9      	ldr	r1, [r7, #12]
 800041e:	4807      	ldr	r0, [pc, #28]	@ (800043c <Sender1_Task+0xb0>)
 8000420:	f001 fba8 	bl	8001b74 <HAL_UART_Transmit>
		}
		indx1=indx1+1;
 8000424:	4b06      	ldr	r3, [pc, #24]	@ (8000440 <Sender1_Task+0xb4>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	3301      	adds	r3, #1
 800042a:	4a05      	ldr	r2, [pc, #20]	@ (8000440 <Sender1_Task+0xb4>)
 800042c:	6013      	str	r3, [r2, #0]
		vTaskDelay(TickDelay);
 800042e:	6978      	ldr	r0, [r7, #20]
 8000430:	f002 fb8c 	bl	8002b4c <vTaskDelay>
	while(1){
 8000434:	e7b1      	b.n	800039a <Sender1_Task+0xe>
 8000436:	bf00      	nop
 8000438:	080047d0 	.word	0x080047d0
 800043c:	2000031c 	.word	0x2000031c
 8000440:	20000374 	.word	0x20000374
 8000444:	080047e8 	.word	0x080047e8
 8000448:	20000364 	.word	0x20000364
 800044c:	08004800 	.word	0x08004800

08000450 <Sender2_Task>:
	}
}



void Sender2_Task(void *argument){
 8000450:	b580      	push	{r7, lr}
 8000452:	b086      	sub	sp, #24
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
	my_struct *ptrtostruct;
	uint32_t TickDelay=pdMS_TO_TICKS(2000);
 8000458:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800045c:	617b      	str	r3, [r7, #20]
	while(1){
		char *str= "Entered SENDER2_Task\r\n";
 800045e:	4b27      	ldr	r3, [pc, #156]	@ (80004fc <Sender2_Task+0xac>)
 8000460:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),HAL_MAX_DELAY);
 8000462:	6938      	ldr	r0, [r7, #16]
 8000464:	f7ff fe74 	bl	8000150 <strlen>
 8000468:	4603      	mov	r3, r0
 800046a:	b29a      	uxth	r2, r3
 800046c:	f04f 33ff 	mov.w	r3, #4294967295
 8000470:	6939      	ldr	r1, [r7, #16]
 8000472:	4823      	ldr	r0, [pc, #140]	@ (8000500 <Sender2_Task+0xb0>)
 8000474:	f001 fb7e 	bl	8001b74 <HAL_UART_Transmit>

		//Allocate memory to the pointer
		ptrtostruct = pvPortMalloc(sizeof(my_struct));
 8000478:	200c      	movs	r0, #12
 800047a:	f003 fa71 	bl	8003960 <pvPortMalloc>
 800047e:	4603      	mov	r3, r0
 8000480:	60bb      	str	r3, [r7, #8]

		//cargar los datos a la estructura
		ptrtostruct->counter=1+indx2;
 8000482:	4b20      	ldr	r3, [pc, #128]	@ (8000504 <Sender2_Task+0xb4>)
 8000484:	681a      	ldr	r2, [r3, #0]
 8000486:	68bb      	ldr	r3, [r7, #8]
 8000488:	3201      	adds	r2, #1
 800048a:	605a      	str	r2, [r3, #4]
		ptrtostruct->large_value=2000+indx2*200;
 800048c:	4b1d      	ldr	r3, [pc, #116]	@ (8000504 <Sender2_Task+0xb4>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	b29b      	uxth	r3, r3
 8000492:	461a      	mov	r2, r3
 8000494:	0092      	lsls	r2, r2, #2
 8000496:	4413      	add	r3, r2
 8000498:	461a      	mov	r2, r3
 800049a:	0091      	lsls	r1, r2, #2
 800049c:	461a      	mov	r2, r3
 800049e:	460b      	mov	r3, r1
 80004a0:	4413      	add	r3, r2
 80004a2:	00db      	lsls	r3, r3, #3
 80004a4:	b29a      	uxth	r2, r3
 80004a6:	68bb      	ldr	r3, [r7, #8]
 80004a8:	f502 62fa 	add.w	r2, r2, #2000	@ 0x7d0
 80004ac:	b292      	uxth	r2, r2
 80004ae:	811a      	strh	r2, [r3, #8]
		ptrtostruct->str="Hello from sender2\r\n";
 80004b0:	68bb      	ldr	r3, [r7, #8]
 80004b2:	4a15      	ldr	r2, [pc, #84]	@ (8000508 <Sender2_Task+0xb8>)
 80004b4:	601a      	str	r2, [r3, #0]

		//enviar a la queue
		if(xQueueSend(St_Queue_Handler,&ptrtostruct,portMAX_DELAY)==pdPASS){
 80004b6:	4b15      	ldr	r3, [pc, #84]	@ (800050c <Sender2_Task+0xbc>)
 80004b8:	6818      	ldr	r0, [r3, #0]
 80004ba:	f107 0108 	add.w	r1, r7, #8
 80004be:	2300      	movs	r3, #0
 80004c0:	f04f 32ff 	mov.w	r2, #4294967295
 80004c4:	f001 fe9e 	bl	8002204 <xQueueGenericSend>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b01      	cmp	r3, #1
 80004cc:	d10c      	bne.n	80004e8 <Sender2_Task+0x98>
			char *str2= "Enviado a la queue con éxito, terminando Sender2_Task\r\n";
 80004ce:	4b10      	ldr	r3, [pc, #64]	@ (8000510 <Sender2_Task+0xc0>)
 80004d0:	60fb      	str	r3, [r7, #12]
			HAL_UART_Transmit(&huart1,(uint8_t*)str2,strlen(str2),HAL_MAX_DELAY);
 80004d2:	68f8      	ldr	r0, [r7, #12]
 80004d4:	f7ff fe3c 	bl	8000150 <strlen>
 80004d8:	4603      	mov	r3, r0
 80004da:	b29a      	uxth	r2, r3
 80004dc:	f04f 33ff 	mov.w	r3, #4294967295
 80004e0:	68f9      	ldr	r1, [r7, #12]
 80004e2:	4807      	ldr	r0, [pc, #28]	@ (8000500 <Sender2_Task+0xb0>)
 80004e4:	f001 fb46 	bl	8001b74 <HAL_UART_Transmit>
		}
		indx2=indx2+1;
 80004e8:	4b06      	ldr	r3, [pc, #24]	@ (8000504 <Sender2_Task+0xb4>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	3301      	adds	r3, #1
 80004ee:	4a05      	ldr	r2, [pc, #20]	@ (8000504 <Sender2_Task+0xb4>)
 80004f0:	6013      	str	r3, [r2, #0]
		vTaskDelay(TickDelay);
 80004f2:	6978      	ldr	r0, [r7, #20]
 80004f4:	f002 fb2a 	bl	8002b4c <vTaskDelay>
	while(1){
 80004f8:	e7b1      	b.n	800045e <Sender2_Task+0xe>
 80004fa:	bf00      	nop
 80004fc:	0800483c 	.word	0x0800483c
 8000500:	2000031c 	.word	0x2000031c
 8000504:	20000378 	.word	0x20000378
 8000508:	08004854 	.word	0x08004854
 800050c:	20000364 	.word	0x20000364
 8000510:	0800486c 	.word	0x0800486c

08000514 <Receiver_Task>:
	}
}
void Receiver_Task(void *argument){
 8000514:	b580      	push	{r7, lr}
 8000516:	b088      	sub	sp, #32
 8000518:	af02      	add	r7, sp, #8
 800051a:	6078      	str	r0, [r7, #4]
	my_struct *Rptrtostruct;
	uint32_t TickDelay=pdMS_TO_TICKS(3000);
 800051c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000520:	617b      	str	r3, [r7, #20]
	char *ptr;

	while(1){
		char *str= "Entered Receiver_Task\r\n";
 8000522:	4b20      	ldr	r3, [pc, #128]	@ (80005a4 <Receiver_Task+0x90>)
 8000524:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),HAL_MAX_DELAY);
 8000526:	6938      	ldr	r0, [r7, #16]
 8000528:	f7ff fe12 	bl	8000150 <strlen>
 800052c:	4603      	mov	r3, r0
 800052e:	b29a      	uxth	r2, r3
 8000530:	f04f 33ff 	mov.w	r3, #4294967295
 8000534:	6939      	ldr	r1, [r7, #16]
 8000536:	481c      	ldr	r0, [pc, #112]	@ (80005a8 <Receiver_Task+0x94>)
 8000538:	f001 fb1c 	bl	8001b74 <HAL_UART_Transmit>

		//recibir datos de la queue
		if(xQueueReceive(St_Queue_Handler,&Rptrtostruct,portMAX_DELAY)==pdPASS){
 800053c:	4b1b      	ldr	r3, [pc, #108]	@ (80005ac <Receiver_Task+0x98>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f107 0108 	add.w	r1, r7, #8
 8000544:	f04f 32ff 	mov.w	r2, #4294967295
 8000548:	4618      	mov	r0, r3
 800054a:	f001 ff5d 	bl	8002408 <xQueueReceive>
 800054e:	4603      	mov	r3, r0
 8000550:	2b01      	cmp	r3, #1
 8000552:	d11e      	bne.n	8000592 <Receiver_Task+0x7e>
			ptr=pvPortMalloc(100*sizeof(char));
 8000554:	2064      	movs	r0, #100	@ 0x64
 8000556:	f003 fa03 	bl	8003960 <pvPortMalloc>
 800055a:	60f8      	str	r0, [r7, #12]
			sprintf(ptr,"Received from QUEUE: \r\n Counter %d\r\n Large value= %u\r\n String %s \r\n\r\n\r\n",Rptrtostruct->counter,Rptrtostruct->large_value,Rptrtostruct->str);
 800055c:	68bb      	ldr	r3, [r7, #8]
 800055e:	685a      	ldr	r2, [r3, #4]
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	891b      	ldrh	r3, [r3, #8]
 8000564:	4619      	mov	r1, r3
 8000566:	68bb      	ldr	r3, [r7, #8]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	9300      	str	r3, [sp, #0]
 800056c:	460b      	mov	r3, r1
 800056e:	4910      	ldr	r1, [pc, #64]	@ (80005b0 <Receiver_Task+0x9c>)
 8000570:	68f8      	ldr	r0, [r7, #12]
 8000572:	f003 fbe1 	bl	8003d38 <siprintf>
			HAL_UART_Transmit(&huart1,(uint8_t*)ptr,strlen(ptr),HAL_MAX_DELAY);
 8000576:	68f8      	ldr	r0, [r7, #12]
 8000578:	f7ff fdea 	bl	8000150 <strlen>
 800057c:	4603      	mov	r3, r0
 800057e:	b29a      	uxth	r2, r3
 8000580:	f04f 33ff 	mov.w	r3, #4294967295
 8000584:	68f9      	ldr	r1, [r7, #12]
 8000586:	4808      	ldr	r0, [pc, #32]	@ (80005a8 <Receiver_Task+0x94>)
 8000588:	f001 faf4 	bl	8001b74 <HAL_UART_Transmit>
			vPortFree(ptr); //se libera la memoria del pointer
 800058c:	68f8      	ldr	r0, [r7, #12]
 800058e:	f003 fab5 	bl	8003afc <vPortFree>
		}
		//se debe liberar la memoria de los senders
		vPortFree(Rptrtostruct);
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	4618      	mov	r0, r3
 8000596:	f003 fab1 	bl	8003afc <vPortFree>
		vTaskDelay(TickDelay);
 800059a:	6978      	ldr	r0, [r7, #20]
 800059c:	f002 fad6 	bl	8002b4c <vTaskDelay>
	while(1){
 80005a0:	e7bf      	b.n	8000522 <Receiver_Task+0xe>
 80005a2:	bf00      	nop
 80005a4:	080048a8 	.word	0x080048a8
 80005a8:	2000031c 	.word	0x2000031c
 80005ac:	20000364 	.word	0x20000364
 80005b0:	080048c0 	.word	0x080048c0

080005b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a04      	ldr	r2, [pc, #16]	@ (80005d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d101      	bne.n	80005ca <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80005c6:	f000 f99f 	bl	8000908 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40012c00 	.word	0x40012c00

080005d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005dc:	b672      	cpsid	i
}
 80005de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005e0:	bf00      	nop
 80005e2:	e7fd      	b.n	80005e0 <Error_Handler+0x8>

080005e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ea:	4b18      	ldr	r3, [pc, #96]	@ (800064c <HAL_MspInit+0x68>)
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	4a17      	ldr	r2, [pc, #92]	@ (800064c <HAL_MspInit+0x68>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6193      	str	r3, [r2, #24]
 80005f6:	4b15      	ldr	r3, [pc, #84]	@ (800064c <HAL_MspInit+0x68>)
 80005f8:	699b      	ldr	r3, [r3, #24]
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000602:	4b12      	ldr	r3, [pc, #72]	@ (800064c <HAL_MspInit+0x68>)
 8000604:	69db      	ldr	r3, [r3, #28]
 8000606:	4a11      	ldr	r2, [pc, #68]	@ (800064c <HAL_MspInit+0x68>)
 8000608:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800060c:	61d3      	str	r3, [r2, #28]
 800060e:	4b0f      	ldr	r3, [pc, #60]	@ (800064c <HAL_MspInit+0x68>)
 8000610:	69db      	ldr	r3, [r3, #28]
 8000612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800061a:	2200      	movs	r2, #0
 800061c:	210f      	movs	r1, #15
 800061e:	f06f 0001 	mvn.w	r0, #1
 8000622:	f000 fa42 	bl	8000aaa <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000626:	4b0a      	ldr	r3, [pc, #40]	@ (8000650 <HAL_MspInit+0x6c>)
 8000628:	685b      	ldr	r3, [r3, #4]
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	4a04      	ldr	r2, [pc, #16]	@ (8000650 <HAL_MspInit+0x6c>)
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000642:	bf00      	nop
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40021000 	.word	0x40021000
 8000650:	40010000 	.word	0x40010000

08000654 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	f107 0310 	add.w	r3, r7, #16
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a1c      	ldr	r2, [pc, #112]	@ (80006e0 <HAL_UART_MspInit+0x8c>)
 8000670:	4293      	cmp	r3, r2
 8000672:	d131      	bne.n	80006d8 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000674:	4b1b      	ldr	r3, [pc, #108]	@ (80006e4 <HAL_UART_MspInit+0x90>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	4a1a      	ldr	r2, [pc, #104]	@ (80006e4 <HAL_UART_MspInit+0x90>)
 800067a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800067e:	6193      	str	r3, [r2, #24]
 8000680:	4b18      	ldr	r3, [pc, #96]	@ (80006e4 <HAL_UART_MspInit+0x90>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800068c:	4b15      	ldr	r3, [pc, #84]	@ (80006e4 <HAL_UART_MspInit+0x90>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a14      	ldr	r2, [pc, #80]	@ (80006e4 <HAL_UART_MspInit+0x90>)
 8000692:	f043 0304 	orr.w	r3, r3, #4
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b12      	ldr	r3, [pc, #72]	@ (80006e4 <HAL_UART_MspInit+0x90>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f003 0304 	and.w	r3, r3, #4
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006aa:	2302      	movs	r3, #2
 80006ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ae:	2303      	movs	r3, #3
 80006b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b2:	f107 0310 	add.w	r3, r7, #16
 80006b6:	4619      	mov	r1, r3
 80006b8:	480b      	ldr	r0, [pc, #44]	@ (80006e8 <HAL_UART_MspInit+0x94>)
 80006ba:	f000 fa21 	bl	8000b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006cc:	f107 0310 	add.w	r3, r7, #16
 80006d0:	4619      	mov	r1, r3
 80006d2:	4805      	ldr	r0, [pc, #20]	@ (80006e8 <HAL_UART_MspInit+0x94>)
 80006d4:	f000 fa14 	bl	8000b00 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80006d8:	bf00      	nop
 80006da:	3720      	adds	r7, #32
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40013800 	.word	0x40013800
 80006e4:	40021000 	.word	0x40021000
 80006e8:	40010800 	.word	0x40010800

080006ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08c      	sub	sp, #48	@ 0x30
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80006f4:	2300      	movs	r3, #0
 80006f6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80006f8:	2300      	movs	r3, #0
 80006fa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80006fc:	2300      	movs	r3, #0
 80006fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000702:	4b2e      	ldr	r3, [pc, #184]	@ (80007bc <HAL_InitTick+0xd0>)
 8000704:	699b      	ldr	r3, [r3, #24]
 8000706:	4a2d      	ldr	r2, [pc, #180]	@ (80007bc <HAL_InitTick+0xd0>)
 8000708:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800070c:	6193      	str	r3, [r2, #24]
 800070e:	4b2b      	ldr	r3, [pc, #172]	@ (80007bc <HAL_InitTick+0xd0>)
 8000710:	699b      	ldr	r3, [r3, #24]
 8000712:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800071a:	f107 020c 	add.w	r2, r7, #12
 800071e:	f107 0310 	add.w	r3, r7, #16
 8000722:	4611      	mov	r1, r2
 8000724:	4618      	mov	r0, r3
 8000726:	f000 ff59 	bl	80015dc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800072a:	f000 ff43 	bl	80015b4 <HAL_RCC_GetPCLK2Freq>
 800072e:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000732:	4a23      	ldr	r2, [pc, #140]	@ (80007c0 <HAL_InitTick+0xd4>)
 8000734:	fba2 2303 	umull	r2, r3, r2, r3
 8000738:	0c9b      	lsrs	r3, r3, #18
 800073a:	3b01      	subs	r3, #1
 800073c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800073e:	4b21      	ldr	r3, [pc, #132]	@ (80007c4 <HAL_InitTick+0xd8>)
 8000740:	4a21      	ldr	r2, [pc, #132]	@ (80007c8 <HAL_InitTick+0xdc>)
 8000742:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000744:	4b1f      	ldr	r3, [pc, #124]	@ (80007c4 <HAL_InitTick+0xd8>)
 8000746:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800074a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800074c:	4a1d      	ldr	r2, [pc, #116]	@ (80007c4 <HAL_InitTick+0xd8>)
 800074e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000750:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000752:	4b1c      	ldr	r3, [pc, #112]	@ (80007c4 <HAL_InitTick+0xd8>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000758:	4b1a      	ldr	r3, [pc, #104]	@ (80007c4 <HAL_InitTick+0xd8>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800075e:	4b19      	ldr	r3, [pc, #100]	@ (80007c4 <HAL_InitTick+0xd8>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000764:	4817      	ldr	r0, [pc, #92]	@ (80007c4 <HAL_InitTick+0xd8>)
 8000766:	f000 ff87 	bl	8001678 <HAL_TIM_Base_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000770:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000774:	2b00      	cmp	r3, #0
 8000776:	d11b      	bne.n	80007b0 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000778:	4812      	ldr	r0, [pc, #72]	@ (80007c4 <HAL_InitTick+0xd8>)
 800077a:	f000 ffd5 	bl	8001728 <HAL_TIM_Base_Start_IT>
 800077e:	4603      	mov	r3, r0
 8000780:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000784:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000788:	2b00      	cmp	r3, #0
 800078a:	d111      	bne.n	80007b0 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800078c:	2019      	movs	r0, #25
 800078e:	f000 f9a8 	bl	8000ae2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	2b0f      	cmp	r3, #15
 8000796:	d808      	bhi.n	80007aa <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000798:	2200      	movs	r2, #0
 800079a:	6879      	ldr	r1, [r7, #4]
 800079c:	2019      	movs	r0, #25
 800079e:	f000 f984 	bl	8000aaa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007a2:	4a0a      	ldr	r2, [pc, #40]	@ (80007cc <HAL_InitTick+0xe0>)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	6013      	str	r3, [r2, #0]
 80007a8:	e002      	b.n	80007b0 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80007aa:	2301      	movs	r3, #1
 80007ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80007b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3730      	adds	r7, #48	@ 0x30
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40021000 	.word	0x40021000
 80007c0:	431bde83 	.word	0x431bde83
 80007c4:	2000037c 	.word	0x2000037c
 80007c8:	40012c00 	.word	0x40012c00
 80007cc:	20000004 	.word	0x20000004

080007d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007d4:	bf00      	nop
 80007d6:	e7fd      	b.n	80007d4 <NMI_Handler+0x4>

080007d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007dc:	bf00      	nop
 80007de:	e7fd      	b.n	80007dc <HardFault_Handler+0x4>

080007e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007e4:	bf00      	nop
 80007e6:	e7fd      	b.n	80007e4 <MemManage_Handler+0x4>

080007e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ec:	bf00      	nop
 80007ee:	e7fd      	b.n	80007ec <BusFault_Handler+0x4>

080007f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f4:	bf00      	nop
 80007f6:	e7fd      	b.n	80007f4 <UsageFault_Handler+0x4>

080007f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr

08000804 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000808:	4802      	ldr	r0, [pc, #8]	@ (8000814 <TIM1_UP_IRQHandler+0x10>)
 800080a:	f000 ffd9 	bl	80017c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	2000037c 	.word	0x2000037c

08000818 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000820:	4a14      	ldr	r2, [pc, #80]	@ (8000874 <_sbrk+0x5c>)
 8000822:	4b15      	ldr	r3, [pc, #84]	@ (8000878 <_sbrk+0x60>)
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800082c:	4b13      	ldr	r3, [pc, #76]	@ (800087c <_sbrk+0x64>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d102      	bne.n	800083a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000834:	4b11      	ldr	r3, [pc, #68]	@ (800087c <_sbrk+0x64>)
 8000836:	4a12      	ldr	r2, [pc, #72]	@ (8000880 <_sbrk+0x68>)
 8000838:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800083a:	4b10      	ldr	r3, [pc, #64]	@ (800087c <_sbrk+0x64>)
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4413      	add	r3, r2
 8000842:	693a      	ldr	r2, [r7, #16]
 8000844:	429a      	cmp	r2, r3
 8000846:	d207      	bcs.n	8000858 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000848:	f003 fafe 	bl	8003e48 <__errno>
 800084c:	4603      	mov	r3, r0
 800084e:	220c      	movs	r2, #12
 8000850:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000852:	f04f 33ff 	mov.w	r3, #4294967295
 8000856:	e009      	b.n	800086c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000858:	4b08      	ldr	r3, [pc, #32]	@ (800087c <_sbrk+0x64>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800085e:	4b07      	ldr	r3, [pc, #28]	@ (800087c <_sbrk+0x64>)
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4413      	add	r3, r2
 8000866:	4a05      	ldr	r2, [pc, #20]	@ (800087c <_sbrk+0x64>)
 8000868:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800086a:	68fb      	ldr	r3, [r7, #12]
}
 800086c:	4618      	mov	r0, r3
 800086e:	3718      	adds	r7, #24
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20002800 	.word	0x20002800
 8000878:	00000400 	.word	0x00000400
 800087c:	200003c4 	.word	0x200003c4
 8000880:	20001268 	.word	0x20001268

08000884 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr

08000890 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000890:	f7ff fff8 	bl	8000884 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000894:	480b      	ldr	r0, [pc, #44]	@ (80008c4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000896:	490c      	ldr	r1, [pc, #48]	@ (80008c8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000898:	4a0c      	ldr	r2, [pc, #48]	@ (80008cc <LoopFillZerobss+0x16>)
  movs r3, #0
 800089a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800089c:	e002      	b.n	80008a4 <LoopCopyDataInit>

0800089e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800089e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008a2:	3304      	adds	r3, #4

080008a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008a8:	d3f9      	bcc.n	800089e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008aa:	4a09      	ldr	r2, [pc, #36]	@ (80008d0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008ac:	4c09      	ldr	r4, [pc, #36]	@ (80008d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b0:	e001      	b.n	80008b6 <LoopFillZerobss>

080008b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b4:	3204      	adds	r2, #4

080008b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008b8:	d3fb      	bcc.n	80008b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008ba:	f003 facb 	bl	8003e54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008be:	f7ff fc67 	bl	8000190 <main>
  bx lr
 80008c2:	4770      	bx	lr
  ldr r0, =_sdata
 80008c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80008cc:	08004980 	.word	0x08004980
  ldr r2, =_sbss
 80008d0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80008d4:	20001268 	.word	0x20001268

080008d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008d8:	e7fe      	b.n	80008d8 <ADC1_2_IRQHandler>
	...

080008dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008e0:	4b08      	ldr	r3, [pc, #32]	@ (8000904 <HAL_Init+0x28>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a07      	ldr	r2, [pc, #28]	@ (8000904 <HAL_Init+0x28>)
 80008e6:	f043 0310 	orr.w	r3, r3, #16
 80008ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008ec:	2003      	movs	r0, #3
 80008ee:	f000 f8d1 	bl	8000a94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008f2:	200f      	movs	r0, #15
 80008f4:	f7ff fefa 	bl	80006ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008f8:	f7ff fe74 	bl	80005e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008fc:	2300      	movs	r3, #0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40022000 	.word	0x40022000

08000908 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800090c:	4b05      	ldr	r3, [pc, #20]	@ (8000924 <HAL_IncTick+0x1c>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	461a      	mov	r2, r3
 8000912:	4b05      	ldr	r3, [pc, #20]	@ (8000928 <HAL_IncTick+0x20>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4413      	add	r3, r2
 8000918:	4a03      	ldr	r2, [pc, #12]	@ (8000928 <HAL_IncTick+0x20>)
 800091a:	6013      	str	r3, [r2, #0]
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr
 8000924:	20000008 	.word	0x20000008
 8000928:	200003c8 	.word	0x200003c8

0800092c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  return uwTick;
 8000930:	4b02      	ldr	r3, [pc, #8]	@ (800093c <HAL_GetTick+0x10>)
 8000932:	681b      	ldr	r3, [r3, #0]
}
 8000934:	4618      	mov	r0, r3
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr
 800093c:	200003c8 	.word	0x200003c8

08000940 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000940:	b480      	push	{r7}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	f003 0307 	and.w	r3, r3, #7
 800094e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000950:	4b0c      	ldr	r3, [pc, #48]	@ (8000984 <__NVIC_SetPriorityGrouping+0x44>)
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000956:	68ba      	ldr	r2, [r7, #8]
 8000958:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800095c:	4013      	ands	r3, r2
 800095e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000968:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800096c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000970:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000972:	4a04      	ldr	r2, [pc, #16]	@ (8000984 <__NVIC_SetPriorityGrouping+0x44>)
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	60d3      	str	r3, [r2, #12]
}
 8000978:	bf00      	nop
 800097a:	3714      	adds	r7, #20
 800097c:	46bd      	mov	sp, r7
 800097e:	bc80      	pop	{r7}
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800098c:	4b04      	ldr	r3, [pc, #16]	@ (80009a0 <__NVIC_GetPriorityGrouping+0x18>)
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	0a1b      	lsrs	r3, r3, #8
 8000992:	f003 0307 	and.w	r3, r3, #7
}
 8000996:	4618      	mov	r0, r3
 8000998:	46bd      	mov	sp, r7
 800099a:	bc80      	pop	{r7}
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	db0b      	blt.n	80009ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	f003 021f 	and.w	r2, r3, #31
 80009bc:	4906      	ldr	r1, [pc, #24]	@ (80009d8 <__NVIC_EnableIRQ+0x34>)
 80009be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c2:	095b      	lsrs	r3, r3, #5
 80009c4:	2001      	movs	r0, #1
 80009c6:	fa00 f202 	lsl.w	r2, r0, r2
 80009ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr
 80009d8:	e000e100 	.word	0xe000e100

080009dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	6039      	str	r1, [r7, #0]
 80009e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	db0a      	blt.n	8000a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	b2da      	uxtb	r2, r3
 80009f4:	490c      	ldr	r1, [pc, #48]	@ (8000a28 <__NVIC_SetPriority+0x4c>)
 80009f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fa:	0112      	lsls	r2, r2, #4
 80009fc:	b2d2      	uxtb	r2, r2
 80009fe:	440b      	add	r3, r1
 8000a00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a04:	e00a      	b.n	8000a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	b2da      	uxtb	r2, r3
 8000a0a:	4908      	ldr	r1, [pc, #32]	@ (8000a2c <__NVIC_SetPriority+0x50>)
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	f003 030f 	and.w	r3, r3, #15
 8000a12:	3b04      	subs	r3, #4
 8000a14:	0112      	lsls	r2, r2, #4
 8000a16:	b2d2      	uxtb	r2, r2
 8000a18:	440b      	add	r3, r1
 8000a1a:	761a      	strb	r2, [r3, #24]
}
 8000a1c:	bf00      	nop
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bc80      	pop	{r7}
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	e000e100 	.word	0xe000e100
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b089      	sub	sp, #36	@ 0x24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	f003 0307 	and.w	r3, r3, #7
 8000a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a44:	69fb      	ldr	r3, [r7, #28]
 8000a46:	f1c3 0307 	rsb	r3, r3, #7
 8000a4a:	2b04      	cmp	r3, #4
 8000a4c:	bf28      	it	cs
 8000a4e:	2304      	movcs	r3, #4
 8000a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	3304      	adds	r3, #4
 8000a56:	2b06      	cmp	r3, #6
 8000a58:	d902      	bls.n	8000a60 <NVIC_EncodePriority+0x30>
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	3b03      	subs	r3, #3
 8000a5e:	e000      	b.n	8000a62 <NVIC_EncodePriority+0x32>
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a64:	f04f 32ff 	mov.w	r2, #4294967295
 8000a68:	69bb      	ldr	r3, [r7, #24]
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	43da      	mvns	r2, r3
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	401a      	ands	r2, r3
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a78:	f04f 31ff 	mov.w	r1, #4294967295
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a82:	43d9      	mvns	r1, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a88:	4313      	orrs	r3, r2
         );
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3724      	adds	r7, #36	@ 0x24
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr

08000a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f7ff ff4f 	bl	8000940 <__NVIC_SetPriorityGrouping>
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b086      	sub	sp, #24
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	60b9      	str	r1, [r7, #8]
 8000ab4:	607a      	str	r2, [r7, #4]
 8000ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000abc:	f7ff ff64 	bl	8000988 <__NVIC_GetPriorityGrouping>
 8000ac0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	68b9      	ldr	r1, [r7, #8]
 8000ac6:	6978      	ldr	r0, [r7, #20]
 8000ac8:	f7ff ffb2 	bl	8000a30 <NVIC_EncodePriority>
 8000acc:	4602      	mov	r2, r0
 8000ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ad2:	4611      	mov	r1, r2
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff ff81 	bl	80009dc <__NVIC_SetPriority>
}
 8000ada:	bf00      	nop
 8000adc:	3718      	adds	r7, #24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b082      	sub	sp, #8
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	4603      	mov	r3, r0
 8000aea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff ff57 	bl	80009a4 <__NVIC_EnableIRQ>
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
	...

08000b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b08b      	sub	sp, #44	@ 0x2c
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b12:	e161      	b.n	8000dd8 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b14:	2201      	movs	r2, #1
 8000b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b18:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	69fa      	ldr	r2, [r7, #28]
 8000b24:	4013      	ands	r3, r2
 8000b26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b28:	69ba      	ldr	r2, [r7, #24]
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	f040 8150 	bne.w	8000dd2 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	4a97      	ldr	r2, [pc, #604]	@ (8000d94 <HAL_GPIO_Init+0x294>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d05e      	beq.n	8000bfa <HAL_GPIO_Init+0xfa>
 8000b3c:	4a95      	ldr	r2, [pc, #596]	@ (8000d94 <HAL_GPIO_Init+0x294>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d875      	bhi.n	8000c2e <HAL_GPIO_Init+0x12e>
 8000b42:	4a95      	ldr	r2, [pc, #596]	@ (8000d98 <HAL_GPIO_Init+0x298>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d058      	beq.n	8000bfa <HAL_GPIO_Init+0xfa>
 8000b48:	4a93      	ldr	r2, [pc, #588]	@ (8000d98 <HAL_GPIO_Init+0x298>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d86f      	bhi.n	8000c2e <HAL_GPIO_Init+0x12e>
 8000b4e:	4a93      	ldr	r2, [pc, #588]	@ (8000d9c <HAL_GPIO_Init+0x29c>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d052      	beq.n	8000bfa <HAL_GPIO_Init+0xfa>
 8000b54:	4a91      	ldr	r2, [pc, #580]	@ (8000d9c <HAL_GPIO_Init+0x29c>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d869      	bhi.n	8000c2e <HAL_GPIO_Init+0x12e>
 8000b5a:	4a91      	ldr	r2, [pc, #580]	@ (8000da0 <HAL_GPIO_Init+0x2a0>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d04c      	beq.n	8000bfa <HAL_GPIO_Init+0xfa>
 8000b60:	4a8f      	ldr	r2, [pc, #572]	@ (8000da0 <HAL_GPIO_Init+0x2a0>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d863      	bhi.n	8000c2e <HAL_GPIO_Init+0x12e>
 8000b66:	4a8f      	ldr	r2, [pc, #572]	@ (8000da4 <HAL_GPIO_Init+0x2a4>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d046      	beq.n	8000bfa <HAL_GPIO_Init+0xfa>
 8000b6c:	4a8d      	ldr	r2, [pc, #564]	@ (8000da4 <HAL_GPIO_Init+0x2a4>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d85d      	bhi.n	8000c2e <HAL_GPIO_Init+0x12e>
 8000b72:	2b12      	cmp	r3, #18
 8000b74:	d82a      	bhi.n	8000bcc <HAL_GPIO_Init+0xcc>
 8000b76:	2b12      	cmp	r3, #18
 8000b78:	d859      	bhi.n	8000c2e <HAL_GPIO_Init+0x12e>
 8000b7a:	a201      	add	r2, pc, #4	@ (adr r2, 8000b80 <HAL_GPIO_Init+0x80>)
 8000b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b80:	08000bfb 	.word	0x08000bfb
 8000b84:	08000bd5 	.word	0x08000bd5
 8000b88:	08000be7 	.word	0x08000be7
 8000b8c:	08000c29 	.word	0x08000c29
 8000b90:	08000c2f 	.word	0x08000c2f
 8000b94:	08000c2f 	.word	0x08000c2f
 8000b98:	08000c2f 	.word	0x08000c2f
 8000b9c:	08000c2f 	.word	0x08000c2f
 8000ba0:	08000c2f 	.word	0x08000c2f
 8000ba4:	08000c2f 	.word	0x08000c2f
 8000ba8:	08000c2f 	.word	0x08000c2f
 8000bac:	08000c2f 	.word	0x08000c2f
 8000bb0:	08000c2f 	.word	0x08000c2f
 8000bb4:	08000c2f 	.word	0x08000c2f
 8000bb8:	08000c2f 	.word	0x08000c2f
 8000bbc:	08000c2f 	.word	0x08000c2f
 8000bc0:	08000c2f 	.word	0x08000c2f
 8000bc4:	08000bdd 	.word	0x08000bdd
 8000bc8:	08000bf1 	.word	0x08000bf1
 8000bcc:	4a76      	ldr	r2, [pc, #472]	@ (8000da8 <HAL_GPIO_Init+0x2a8>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d013      	beq.n	8000bfa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bd2:	e02c      	b.n	8000c2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	623b      	str	r3, [r7, #32]
          break;
 8000bda:	e029      	b.n	8000c30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	3304      	adds	r3, #4
 8000be2:	623b      	str	r3, [r7, #32]
          break;
 8000be4:	e024      	b.n	8000c30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	68db      	ldr	r3, [r3, #12]
 8000bea:	3308      	adds	r3, #8
 8000bec:	623b      	str	r3, [r7, #32]
          break;
 8000bee:	e01f      	b.n	8000c30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	330c      	adds	r3, #12
 8000bf6:	623b      	str	r3, [r7, #32]
          break;
 8000bf8:	e01a      	b.n	8000c30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d102      	bne.n	8000c08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c02:	2304      	movs	r3, #4
 8000c04:	623b      	str	r3, [r7, #32]
          break;
 8000c06:	e013      	b.n	8000c30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d105      	bne.n	8000c1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c10:	2308      	movs	r3, #8
 8000c12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	69fa      	ldr	r2, [r7, #28]
 8000c18:	611a      	str	r2, [r3, #16]
          break;
 8000c1a:	e009      	b.n	8000c30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c1c:	2308      	movs	r3, #8
 8000c1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	69fa      	ldr	r2, [r7, #28]
 8000c24:	615a      	str	r2, [r3, #20]
          break;
 8000c26:	e003      	b.n	8000c30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	623b      	str	r3, [r7, #32]
          break;
 8000c2c:	e000      	b.n	8000c30 <HAL_GPIO_Init+0x130>
          break;
 8000c2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	2bff      	cmp	r3, #255	@ 0xff
 8000c34:	d801      	bhi.n	8000c3a <HAL_GPIO_Init+0x13a>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	e001      	b.n	8000c3e <HAL_GPIO_Init+0x13e>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	2bff      	cmp	r3, #255	@ 0xff
 8000c44:	d802      	bhi.n	8000c4c <HAL_GPIO_Init+0x14c>
 8000c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	e002      	b.n	8000c52 <HAL_GPIO_Init+0x152>
 8000c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c4e:	3b08      	subs	r3, #8
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	210f      	movs	r1, #15
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c60:	43db      	mvns	r3, r3
 8000c62:	401a      	ands	r2, r3
 8000c64:	6a39      	ldr	r1, [r7, #32]
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6c:	431a      	orrs	r2, r3
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	f000 80a9 	beq.w	8000dd2 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c80:	4b4a      	ldr	r3, [pc, #296]	@ (8000dac <HAL_GPIO_Init+0x2ac>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	4a49      	ldr	r2, [pc, #292]	@ (8000dac <HAL_GPIO_Init+0x2ac>)
 8000c86:	f043 0301 	orr.w	r3, r3, #1
 8000c8a:	6193      	str	r3, [r2, #24]
 8000c8c:	4b47      	ldr	r3, [pc, #284]	@ (8000dac <HAL_GPIO_Init+0x2ac>)
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	f003 0301 	and.w	r3, r3, #1
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c98:	4a45      	ldr	r2, [pc, #276]	@ (8000db0 <HAL_GPIO_Init+0x2b0>)
 8000c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c9c:	089b      	lsrs	r3, r3, #2
 8000c9e:	3302      	adds	r3, #2
 8000ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ca4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ca8:	f003 0303 	and.w	r3, r3, #3
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	220f      	movs	r2, #15
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	68fa      	ldr	r2, [r7, #12]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4a3d      	ldr	r2, [pc, #244]	@ (8000db4 <HAL_GPIO_Init+0x2b4>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d00d      	beq.n	8000ce0 <HAL_GPIO_Init+0x1e0>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4a3c      	ldr	r2, [pc, #240]	@ (8000db8 <HAL_GPIO_Init+0x2b8>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d007      	beq.n	8000cdc <HAL_GPIO_Init+0x1dc>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4a3b      	ldr	r2, [pc, #236]	@ (8000dbc <HAL_GPIO_Init+0x2bc>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d101      	bne.n	8000cd8 <HAL_GPIO_Init+0x1d8>
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	e004      	b.n	8000ce2 <HAL_GPIO_Init+0x1e2>
 8000cd8:	2303      	movs	r3, #3
 8000cda:	e002      	b.n	8000ce2 <HAL_GPIO_Init+0x1e2>
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e000      	b.n	8000ce2 <HAL_GPIO_Init+0x1e2>
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ce4:	f002 0203 	and.w	r2, r2, #3
 8000ce8:	0092      	lsls	r2, r2, #2
 8000cea:	4093      	lsls	r3, r2
 8000cec:	68fa      	ldr	r2, [r7, #12]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000cf2:	492f      	ldr	r1, [pc, #188]	@ (8000db0 <HAL_GPIO_Init+0x2b0>)
 8000cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cf6:	089b      	lsrs	r3, r3, #2
 8000cf8:	3302      	adds	r3, #2
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d006      	beq.n	8000d1a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d0c:	4b2c      	ldr	r3, [pc, #176]	@ (8000dc0 <HAL_GPIO_Init+0x2c0>)
 8000d0e:	689a      	ldr	r2, [r3, #8]
 8000d10:	492b      	ldr	r1, [pc, #172]	@ (8000dc0 <HAL_GPIO_Init+0x2c0>)
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	608b      	str	r3, [r1, #8]
 8000d18:	e006      	b.n	8000d28 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d1a:	4b29      	ldr	r3, [pc, #164]	@ (8000dc0 <HAL_GPIO_Init+0x2c0>)
 8000d1c:	689a      	ldr	r2, [r3, #8]
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	43db      	mvns	r3, r3
 8000d22:	4927      	ldr	r1, [pc, #156]	@ (8000dc0 <HAL_GPIO_Init+0x2c0>)
 8000d24:	4013      	ands	r3, r2
 8000d26:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d006      	beq.n	8000d42 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d34:	4b22      	ldr	r3, [pc, #136]	@ (8000dc0 <HAL_GPIO_Init+0x2c0>)
 8000d36:	68da      	ldr	r2, [r3, #12]
 8000d38:	4921      	ldr	r1, [pc, #132]	@ (8000dc0 <HAL_GPIO_Init+0x2c0>)
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	60cb      	str	r3, [r1, #12]
 8000d40:	e006      	b.n	8000d50 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d42:	4b1f      	ldr	r3, [pc, #124]	@ (8000dc0 <HAL_GPIO_Init+0x2c0>)
 8000d44:	68da      	ldr	r2, [r3, #12]
 8000d46:	69bb      	ldr	r3, [r7, #24]
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	491d      	ldr	r1, [pc, #116]	@ (8000dc0 <HAL_GPIO_Init+0x2c0>)
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d006      	beq.n	8000d6a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d5c:	4b18      	ldr	r3, [pc, #96]	@ (8000dc0 <HAL_GPIO_Init+0x2c0>)
 8000d5e:	685a      	ldr	r2, [r3, #4]
 8000d60:	4917      	ldr	r1, [pc, #92]	@ (8000dc0 <HAL_GPIO_Init+0x2c0>)
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	604b      	str	r3, [r1, #4]
 8000d68:	e006      	b.n	8000d78 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d6a:	4b15      	ldr	r3, [pc, #84]	@ (8000dc0 <HAL_GPIO_Init+0x2c0>)
 8000d6c:	685a      	ldr	r2, [r3, #4]
 8000d6e:	69bb      	ldr	r3, [r7, #24]
 8000d70:	43db      	mvns	r3, r3
 8000d72:	4913      	ldr	r1, [pc, #76]	@ (8000dc0 <HAL_GPIO_Init+0x2c0>)
 8000d74:	4013      	ands	r3, r2
 8000d76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d01f      	beq.n	8000dc4 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d84:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc0 <HAL_GPIO_Init+0x2c0>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	490d      	ldr	r1, [pc, #52]	@ (8000dc0 <HAL_GPIO_Init+0x2c0>)
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	600b      	str	r3, [r1, #0]
 8000d90:	e01f      	b.n	8000dd2 <HAL_GPIO_Init+0x2d2>
 8000d92:	bf00      	nop
 8000d94:	10320000 	.word	0x10320000
 8000d98:	10310000 	.word	0x10310000
 8000d9c:	10220000 	.word	0x10220000
 8000da0:	10210000 	.word	0x10210000
 8000da4:	10120000 	.word	0x10120000
 8000da8:	10110000 	.word	0x10110000
 8000dac:	40021000 	.word	0x40021000
 8000db0:	40010000 	.word	0x40010000
 8000db4:	40010800 	.word	0x40010800
 8000db8:	40010c00 	.word	0x40010c00
 8000dbc:	40011000 	.word	0x40011000
 8000dc0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000df4 <HAL_GPIO_Init+0x2f4>)
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	4909      	ldr	r1, [pc, #36]	@ (8000df4 <HAL_GPIO_Init+0x2f4>)
 8000dce:	4013      	ands	r3, r2
 8000dd0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dde:	fa22 f303 	lsr.w	r3, r2, r3
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f47f ae96 	bne.w	8000b14 <HAL_GPIO_Init+0x14>
  }
}
 8000de8:	bf00      	nop
 8000dea:	bf00      	nop
 8000dec:	372c      	adds	r7, #44	@ 0x2c
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr
 8000df4:	40010400 	.word	0x40010400

08000df8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d101      	bne.n	8000e0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e272      	b.n	80012f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f000 8087 	beq.w	8000f26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e18:	4b92      	ldr	r3, [pc, #584]	@ (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f003 030c 	and.w	r3, r3, #12
 8000e20:	2b04      	cmp	r3, #4
 8000e22:	d00c      	beq.n	8000e3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e24:	4b8f      	ldr	r3, [pc, #572]	@ (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f003 030c 	and.w	r3, r3, #12
 8000e2c:	2b08      	cmp	r3, #8
 8000e2e:	d112      	bne.n	8000e56 <HAL_RCC_OscConfig+0x5e>
 8000e30:	4b8c      	ldr	r3, [pc, #560]	@ (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e3c:	d10b      	bne.n	8000e56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e3e:	4b89      	ldr	r3, [pc, #548]	@ (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d06c      	beq.n	8000f24 <HAL_RCC_OscConfig+0x12c>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d168      	bne.n	8000f24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e24c      	b.n	80012f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e5e:	d106      	bne.n	8000e6e <HAL_RCC_OscConfig+0x76>
 8000e60:	4b80      	ldr	r3, [pc, #512]	@ (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a7f      	ldr	r2, [pc, #508]	@ (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000e66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e6a:	6013      	str	r3, [r2, #0]
 8000e6c:	e02e      	b.n	8000ecc <HAL_RCC_OscConfig+0xd4>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d10c      	bne.n	8000e90 <HAL_RCC_OscConfig+0x98>
 8000e76:	4b7b      	ldr	r3, [pc, #492]	@ (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a7a      	ldr	r2, [pc, #488]	@ (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000e7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e80:	6013      	str	r3, [r2, #0]
 8000e82:	4b78      	ldr	r3, [pc, #480]	@ (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a77      	ldr	r2, [pc, #476]	@ (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000e88:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e8c:	6013      	str	r3, [r2, #0]
 8000e8e:	e01d      	b.n	8000ecc <HAL_RCC_OscConfig+0xd4>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e98:	d10c      	bne.n	8000eb4 <HAL_RCC_OscConfig+0xbc>
 8000e9a:	4b72      	ldr	r3, [pc, #456]	@ (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a71      	ldr	r2, [pc, #452]	@ (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000ea0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ea4:	6013      	str	r3, [r2, #0]
 8000ea6:	4b6f      	ldr	r3, [pc, #444]	@ (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a6e      	ldr	r2, [pc, #440]	@ (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000eac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000eb0:	6013      	str	r3, [r2, #0]
 8000eb2:	e00b      	b.n	8000ecc <HAL_RCC_OscConfig+0xd4>
 8000eb4:	4b6b      	ldr	r3, [pc, #428]	@ (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a6a      	ldr	r2, [pc, #424]	@ (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000eba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ebe:	6013      	str	r3, [r2, #0]
 8000ec0:	4b68      	ldr	r3, [pc, #416]	@ (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a67      	ldr	r2, [pc, #412]	@ (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000ec6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000eca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d013      	beq.n	8000efc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ed4:	f7ff fd2a 	bl	800092c <HAL_GetTick>
 8000ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eda:	e008      	b.n	8000eee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000edc:	f7ff fd26 	bl	800092c <HAL_GetTick>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	2b64      	cmp	r3, #100	@ 0x64
 8000ee8:	d901      	bls.n	8000eee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000eea:	2303      	movs	r3, #3
 8000eec:	e200      	b.n	80012f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eee:	4b5d      	ldr	r3, [pc, #372]	@ (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d0f0      	beq.n	8000edc <HAL_RCC_OscConfig+0xe4>
 8000efa:	e014      	b.n	8000f26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000efc:	f7ff fd16 	bl	800092c <HAL_GetTick>
 8000f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f02:	e008      	b.n	8000f16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f04:	f7ff fd12 	bl	800092c <HAL_GetTick>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	2b64      	cmp	r3, #100	@ 0x64
 8000f10:	d901      	bls.n	8000f16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f12:	2303      	movs	r3, #3
 8000f14:	e1ec      	b.n	80012f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f16:	4b53      	ldr	r3, [pc, #332]	@ (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d1f0      	bne.n	8000f04 <HAL_RCC_OscConfig+0x10c>
 8000f22:	e000      	b.n	8000f26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f003 0302 	and.w	r3, r3, #2
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d063      	beq.n	8000ffa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f32:	4b4c      	ldr	r3, [pc, #304]	@ (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f003 030c 	and.w	r3, r3, #12
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d00b      	beq.n	8000f56 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f3e:	4b49      	ldr	r3, [pc, #292]	@ (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 030c 	and.w	r3, r3, #12
 8000f46:	2b08      	cmp	r3, #8
 8000f48:	d11c      	bne.n	8000f84 <HAL_RCC_OscConfig+0x18c>
 8000f4a:	4b46      	ldr	r3, [pc, #280]	@ (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d116      	bne.n	8000f84 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f56:	4b43      	ldr	r3, [pc, #268]	@ (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d005      	beq.n	8000f6e <HAL_RCC_OscConfig+0x176>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	691b      	ldr	r3, [r3, #16]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d001      	beq.n	8000f6e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e1c0      	b.n	80012f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f6e:	4b3d      	ldr	r3, [pc, #244]	@ (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	4939      	ldr	r1, [pc, #228]	@ (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f82:	e03a      	b.n	8000ffa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	691b      	ldr	r3, [r3, #16]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d020      	beq.n	8000fce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f8c:	4b36      	ldr	r3, [pc, #216]	@ (8001068 <HAL_RCC_OscConfig+0x270>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f92:	f7ff fccb 	bl	800092c <HAL_GetTick>
 8000f96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f98:	e008      	b.n	8000fac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f9a:	f7ff fcc7 	bl	800092c <HAL_GetTick>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d901      	bls.n	8000fac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	e1a1      	b.n	80012f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fac:	4b2d      	ldr	r3, [pc, #180]	@ (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f003 0302 	and.w	r3, r3, #2
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d0f0      	beq.n	8000f9a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fb8:	4b2a      	ldr	r3, [pc, #168]	@ (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	695b      	ldr	r3, [r3, #20]
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	4927      	ldr	r1, [pc, #156]	@ (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	600b      	str	r3, [r1, #0]
 8000fcc:	e015      	b.n	8000ffa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fce:	4b26      	ldr	r3, [pc, #152]	@ (8001068 <HAL_RCC_OscConfig+0x270>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd4:	f7ff fcaa 	bl	800092c <HAL_GetTick>
 8000fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fda:	e008      	b.n	8000fee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fdc:	f7ff fca6 	bl	800092c <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d901      	bls.n	8000fee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e180      	b.n	80012f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fee:	4b1d      	ldr	r3, [pc, #116]	@ (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d1f0      	bne.n	8000fdc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f003 0308 	and.w	r3, r3, #8
 8001002:	2b00      	cmp	r3, #0
 8001004:	d03a      	beq.n	800107c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	699b      	ldr	r3, [r3, #24]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d019      	beq.n	8001042 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800100e:	4b17      	ldr	r3, [pc, #92]	@ (800106c <HAL_RCC_OscConfig+0x274>)
 8001010:	2201      	movs	r2, #1
 8001012:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001014:	f7ff fc8a 	bl	800092c <HAL_GetTick>
 8001018:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800101a:	e008      	b.n	800102e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800101c:	f7ff fc86 	bl	800092c <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	2b02      	cmp	r3, #2
 8001028:	d901      	bls.n	800102e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800102a:	2303      	movs	r3, #3
 800102c:	e160      	b.n	80012f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800102e:	4b0d      	ldr	r3, [pc, #52]	@ (8001064 <HAL_RCC_OscConfig+0x26c>)
 8001030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	2b00      	cmp	r3, #0
 8001038:	d0f0      	beq.n	800101c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800103a:	2001      	movs	r0, #1
 800103c:	f000 fafe 	bl	800163c <RCC_Delay>
 8001040:	e01c      	b.n	800107c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001042:	4b0a      	ldr	r3, [pc, #40]	@ (800106c <HAL_RCC_OscConfig+0x274>)
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001048:	f7ff fc70 	bl	800092c <HAL_GetTick>
 800104c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800104e:	e00f      	b.n	8001070 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001050:	f7ff fc6c 	bl	800092c <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b02      	cmp	r3, #2
 800105c:	d908      	bls.n	8001070 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800105e:	2303      	movs	r3, #3
 8001060:	e146      	b.n	80012f0 <HAL_RCC_OscConfig+0x4f8>
 8001062:	bf00      	nop
 8001064:	40021000 	.word	0x40021000
 8001068:	42420000 	.word	0x42420000
 800106c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001070:	4b92      	ldr	r3, [pc, #584]	@ (80012bc <HAL_RCC_OscConfig+0x4c4>)
 8001072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001074:	f003 0302 	and.w	r3, r3, #2
 8001078:	2b00      	cmp	r3, #0
 800107a:	d1e9      	bne.n	8001050 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 0304 	and.w	r3, r3, #4
 8001084:	2b00      	cmp	r3, #0
 8001086:	f000 80a6 	beq.w	80011d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800108a:	2300      	movs	r3, #0
 800108c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800108e:	4b8b      	ldr	r3, [pc, #556]	@ (80012bc <HAL_RCC_OscConfig+0x4c4>)
 8001090:	69db      	ldr	r3, [r3, #28]
 8001092:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d10d      	bne.n	80010b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800109a:	4b88      	ldr	r3, [pc, #544]	@ (80012bc <HAL_RCC_OscConfig+0x4c4>)
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	4a87      	ldr	r2, [pc, #540]	@ (80012bc <HAL_RCC_OscConfig+0x4c4>)
 80010a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010a4:	61d3      	str	r3, [r2, #28]
 80010a6:	4b85      	ldr	r3, [pc, #532]	@ (80012bc <HAL_RCC_OscConfig+0x4c4>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010b2:	2301      	movs	r3, #1
 80010b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010b6:	4b82      	ldr	r3, [pc, #520]	@ (80012c0 <HAL_RCC_OscConfig+0x4c8>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d118      	bne.n	80010f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010c2:	4b7f      	ldr	r3, [pc, #508]	@ (80012c0 <HAL_RCC_OscConfig+0x4c8>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a7e      	ldr	r2, [pc, #504]	@ (80012c0 <HAL_RCC_OscConfig+0x4c8>)
 80010c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010ce:	f7ff fc2d 	bl	800092c <HAL_GetTick>
 80010d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010d4:	e008      	b.n	80010e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010d6:	f7ff fc29 	bl	800092c <HAL_GetTick>
 80010da:	4602      	mov	r2, r0
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	2b64      	cmp	r3, #100	@ 0x64
 80010e2:	d901      	bls.n	80010e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80010e4:	2303      	movs	r3, #3
 80010e6:	e103      	b.n	80012f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010e8:	4b75      	ldr	r3, [pc, #468]	@ (80012c0 <HAL_RCC_OscConfig+0x4c8>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d0f0      	beq.n	80010d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d106      	bne.n	800110a <HAL_RCC_OscConfig+0x312>
 80010fc:	4b6f      	ldr	r3, [pc, #444]	@ (80012bc <HAL_RCC_OscConfig+0x4c4>)
 80010fe:	6a1b      	ldr	r3, [r3, #32]
 8001100:	4a6e      	ldr	r2, [pc, #440]	@ (80012bc <HAL_RCC_OscConfig+0x4c4>)
 8001102:	f043 0301 	orr.w	r3, r3, #1
 8001106:	6213      	str	r3, [r2, #32]
 8001108:	e02d      	b.n	8001166 <HAL_RCC_OscConfig+0x36e>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d10c      	bne.n	800112c <HAL_RCC_OscConfig+0x334>
 8001112:	4b6a      	ldr	r3, [pc, #424]	@ (80012bc <HAL_RCC_OscConfig+0x4c4>)
 8001114:	6a1b      	ldr	r3, [r3, #32]
 8001116:	4a69      	ldr	r2, [pc, #420]	@ (80012bc <HAL_RCC_OscConfig+0x4c4>)
 8001118:	f023 0301 	bic.w	r3, r3, #1
 800111c:	6213      	str	r3, [r2, #32]
 800111e:	4b67      	ldr	r3, [pc, #412]	@ (80012bc <HAL_RCC_OscConfig+0x4c4>)
 8001120:	6a1b      	ldr	r3, [r3, #32]
 8001122:	4a66      	ldr	r2, [pc, #408]	@ (80012bc <HAL_RCC_OscConfig+0x4c4>)
 8001124:	f023 0304 	bic.w	r3, r3, #4
 8001128:	6213      	str	r3, [r2, #32]
 800112a:	e01c      	b.n	8001166 <HAL_RCC_OscConfig+0x36e>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	2b05      	cmp	r3, #5
 8001132:	d10c      	bne.n	800114e <HAL_RCC_OscConfig+0x356>
 8001134:	4b61      	ldr	r3, [pc, #388]	@ (80012bc <HAL_RCC_OscConfig+0x4c4>)
 8001136:	6a1b      	ldr	r3, [r3, #32]
 8001138:	4a60      	ldr	r2, [pc, #384]	@ (80012bc <HAL_RCC_OscConfig+0x4c4>)
 800113a:	f043 0304 	orr.w	r3, r3, #4
 800113e:	6213      	str	r3, [r2, #32]
 8001140:	4b5e      	ldr	r3, [pc, #376]	@ (80012bc <HAL_RCC_OscConfig+0x4c4>)
 8001142:	6a1b      	ldr	r3, [r3, #32]
 8001144:	4a5d      	ldr	r2, [pc, #372]	@ (80012bc <HAL_RCC_OscConfig+0x4c4>)
 8001146:	f043 0301 	orr.w	r3, r3, #1
 800114a:	6213      	str	r3, [r2, #32]
 800114c:	e00b      	b.n	8001166 <HAL_RCC_OscConfig+0x36e>
 800114e:	4b5b      	ldr	r3, [pc, #364]	@ (80012bc <HAL_RCC_OscConfig+0x4c4>)
 8001150:	6a1b      	ldr	r3, [r3, #32]
 8001152:	4a5a      	ldr	r2, [pc, #360]	@ (80012bc <HAL_RCC_OscConfig+0x4c4>)
 8001154:	f023 0301 	bic.w	r3, r3, #1
 8001158:	6213      	str	r3, [r2, #32]
 800115a:	4b58      	ldr	r3, [pc, #352]	@ (80012bc <HAL_RCC_OscConfig+0x4c4>)
 800115c:	6a1b      	ldr	r3, [r3, #32]
 800115e:	4a57      	ldr	r2, [pc, #348]	@ (80012bc <HAL_RCC_OscConfig+0x4c4>)
 8001160:	f023 0304 	bic.w	r3, r3, #4
 8001164:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d015      	beq.n	800119a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800116e:	f7ff fbdd 	bl	800092c <HAL_GetTick>
 8001172:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001174:	e00a      	b.n	800118c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001176:	f7ff fbd9 	bl	800092c <HAL_GetTick>
 800117a:	4602      	mov	r2, r0
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001184:	4293      	cmp	r3, r2
 8001186:	d901      	bls.n	800118c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e0b1      	b.n	80012f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800118c:	4b4b      	ldr	r3, [pc, #300]	@ (80012bc <HAL_RCC_OscConfig+0x4c4>)
 800118e:	6a1b      	ldr	r3, [r3, #32]
 8001190:	f003 0302 	and.w	r3, r3, #2
 8001194:	2b00      	cmp	r3, #0
 8001196:	d0ee      	beq.n	8001176 <HAL_RCC_OscConfig+0x37e>
 8001198:	e014      	b.n	80011c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800119a:	f7ff fbc7 	bl	800092c <HAL_GetTick>
 800119e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011a0:	e00a      	b.n	80011b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011a2:	f7ff fbc3 	bl	800092c <HAL_GetTick>
 80011a6:	4602      	mov	r2, r0
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d901      	bls.n	80011b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	e09b      	b.n	80012f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011b8:	4b40      	ldr	r3, [pc, #256]	@ (80012bc <HAL_RCC_OscConfig+0x4c4>)
 80011ba:	6a1b      	ldr	r3, [r3, #32]
 80011bc:	f003 0302 	and.w	r3, r3, #2
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d1ee      	bne.n	80011a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80011c4:	7dfb      	ldrb	r3, [r7, #23]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d105      	bne.n	80011d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011ca:	4b3c      	ldr	r3, [pc, #240]	@ (80012bc <HAL_RCC_OscConfig+0x4c4>)
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	4a3b      	ldr	r2, [pc, #236]	@ (80012bc <HAL_RCC_OscConfig+0x4c4>)
 80011d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80011d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	f000 8087 	beq.w	80012ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011e0:	4b36      	ldr	r3, [pc, #216]	@ (80012bc <HAL_RCC_OscConfig+0x4c4>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 030c 	and.w	r3, r3, #12
 80011e8:	2b08      	cmp	r3, #8
 80011ea:	d061      	beq.n	80012b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	69db      	ldr	r3, [r3, #28]
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d146      	bne.n	8001282 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011f4:	4b33      	ldr	r3, [pc, #204]	@ (80012c4 <HAL_RCC_OscConfig+0x4cc>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fa:	f7ff fb97 	bl	800092c <HAL_GetTick>
 80011fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001200:	e008      	b.n	8001214 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001202:	f7ff fb93 	bl	800092c <HAL_GetTick>
 8001206:	4602      	mov	r2, r0
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d901      	bls.n	8001214 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	e06d      	b.n	80012f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001214:	4b29      	ldr	r3, [pc, #164]	@ (80012bc <HAL_RCC_OscConfig+0x4c4>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d1f0      	bne.n	8001202 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a1b      	ldr	r3, [r3, #32]
 8001224:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001228:	d108      	bne.n	800123c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800122a:	4b24      	ldr	r3, [pc, #144]	@ (80012bc <HAL_RCC_OscConfig+0x4c4>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	4921      	ldr	r1, [pc, #132]	@ (80012bc <HAL_RCC_OscConfig+0x4c4>)
 8001238:	4313      	orrs	r3, r2
 800123a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800123c:	4b1f      	ldr	r3, [pc, #124]	@ (80012bc <HAL_RCC_OscConfig+0x4c4>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a19      	ldr	r1, [r3, #32]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800124c:	430b      	orrs	r3, r1
 800124e:	491b      	ldr	r1, [pc, #108]	@ (80012bc <HAL_RCC_OscConfig+0x4c4>)
 8001250:	4313      	orrs	r3, r2
 8001252:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001254:	4b1b      	ldr	r3, [pc, #108]	@ (80012c4 <HAL_RCC_OscConfig+0x4cc>)
 8001256:	2201      	movs	r2, #1
 8001258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800125a:	f7ff fb67 	bl	800092c <HAL_GetTick>
 800125e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001260:	e008      	b.n	8001274 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001262:	f7ff fb63 	bl	800092c <HAL_GetTick>
 8001266:	4602      	mov	r2, r0
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	2b02      	cmp	r3, #2
 800126e:	d901      	bls.n	8001274 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	e03d      	b.n	80012f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001274:	4b11      	ldr	r3, [pc, #68]	@ (80012bc <HAL_RCC_OscConfig+0x4c4>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d0f0      	beq.n	8001262 <HAL_RCC_OscConfig+0x46a>
 8001280:	e035      	b.n	80012ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001282:	4b10      	ldr	r3, [pc, #64]	@ (80012c4 <HAL_RCC_OscConfig+0x4cc>)
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001288:	f7ff fb50 	bl	800092c <HAL_GetTick>
 800128c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800128e:	e008      	b.n	80012a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001290:	f7ff fb4c 	bl	800092c <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b02      	cmp	r3, #2
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e026      	b.n	80012f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012a2:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <HAL_RCC_OscConfig+0x4c4>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d1f0      	bne.n	8001290 <HAL_RCC_OscConfig+0x498>
 80012ae:	e01e      	b.n	80012ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	69db      	ldr	r3, [r3, #28]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d107      	bne.n	80012c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e019      	b.n	80012f0 <HAL_RCC_OscConfig+0x4f8>
 80012bc:	40021000 	.word	0x40021000
 80012c0:	40007000 	.word	0x40007000
 80012c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012c8:	4b0b      	ldr	r3, [pc, #44]	@ (80012f8 <HAL_RCC_OscConfig+0x500>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a1b      	ldr	r3, [r3, #32]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d106      	bne.n	80012ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d001      	beq.n	80012ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e000      	b.n	80012f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3718      	adds	r7, #24
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40021000 	.word	0x40021000

080012fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d101      	bne.n	8001310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e0d0      	b.n	80014b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001310:	4b6a      	ldr	r3, [pc, #424]	@ (80014bc <HAL_RCC_ClockConfig+0x1c0>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0307 	and.w	r3, r3, #7
 8001318:	683a      	ldr	r2, [r7, #0]
 800131a:	429a      	cmp	r2, r3
 800131c:	d910      	bls.n	8001340 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800131e:	4b67      	ldr	r3, [pc, #412]	@ (80014bc <HAL_RCC_ClockConfig+0x1c0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f023 0207 	bic.w	r2, r3, #7
 8001326:	4965      	ldr	r1, [pc, #404]	@ (80014bc <HAL_RCC_ClockConfig+0x1c0>)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	4313      	orrs	r3, r2
 800132c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800132e:	4b63      	ldr	r3, [pc, #396]	@ (80014bc <HAL_RCC_ClockConfig+0x1c0>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	683a      	ldr	r2, [r7, #0]
 8001338:	429a      	cmp	r2, r3
 800133a:	d001      	beq.n	8001340 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e0b8      	b.n	80014b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	2b00      	cmp	r3, #0
 800134a:	d020      	beq.n	800138e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 0304 	and.w	r3, r3, #4
 8001354:	2b00      	cmp	r3, #0
 8001356:	d005      	beq.n	8001364 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001358:	4b59      	ldr	r3, [pc, #356]	@ (80014c0 <HAL_RCC_ClockConfig+0x1c4>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	4a58      	ldr	r2, [pc, #352]	@ (80014c0 <HAL_RCC_ClockConfig+0x1c4>)
 800135e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001362:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0308 	and.w	r3, r3, #8
 800136c:	2b00      	cmp	r3, #0
 800136e:	d005      	beq.n	800137c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001370:	4b53      	ldr	r3, [pc, #332]	@ (80014c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	4a52      	ldr	r2, [pc, #328]	@ (80014c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001376:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800137a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800137c:	4b50      	ldr	r3, [pc, #320]	@ (80014c0 <HAL_RCC_ClockConfig+0x1c4>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	494d      	ldr	r1, [pc, #308]	@ (80014c0 <HAL_RCC_ClockConfig+0x1c4>)
 800138a:	4313      	orrs	r3, r2
 800138c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	2b00      	cmp	r3, #0
 8001398:	d040      	beq.n	800141c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d107      	bne.n	80013b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013a2:	4b47      	ldr	r3, [pc, #284]	@ (80014c0 <HAL_RCC_ClockConfig+0x1c4>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d115      	bne.n	80013da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e07f      	b.n	80014b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d107      	bne.n	80013ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ba:	4b41      	ldr	r3, [pc, #260]	@ (80014c0 <HAL_RCC_ClockConfig+0x1c4>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d109      	bne.n	80013da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e073      	b.n	80014b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ca:	4b3d      	ldr	r3, [pc, #244]	@ (80014c0 <HAL_RCC_ClockConfig+0x1c4>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e06b      	b.n	80014b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013da:	4b39      	ldr	r3, [pc, #228]	@ (80014c0 <HAL_RCC_ClockConfig+0x1c4>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f023 0203 	bic.w	r2, r3, #3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	4936      	ldr	r1, [pc, #216]	@ (80014c0 <HAL_RCC_ClockConfig+0x1c4>)
 80013e8:	4313      	orrs	r3, r2
 80013ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013ec:	f7ff fa9e 	bl	800092c <HAL_GetTick>
 80013f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013f2:	e00a      	b.n	800140a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013f4:	f7ff fa9a 	bl	800092c <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001402:	4293      	cmp	r3, r2
 8001404:	d901      	bls.n	800140a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e053      	b.n	80014b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800140a:	4b2d      	ldr	r3, [pc, #180]	@ (80014c0 <HAL_RCC_ClockConfig+0x1c4>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f003 020c 	and.w	r2, r3, #12
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	429a      	cmp	r2, r3
 800141a:	d1eb      	bne.n	80013f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800141c:	4b27      	ldr	r3, [pc, #156]	@ (80014bc <HAL_RCC_ClockConfig+0x1c0>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0307 	and.w	r3, r3, #7
 8001424:	683a      	ldr	r2, [r7, #0]
 8001426:	429a      	cmp	r2, r3
 8001428:	d210      	bcs.n	800144c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800142a:	4b24      	ldr	r3, [pc, #144]	@ (80014bc <HAL_RCC_ClockConfig+0x1c0>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f023 0207 	bic.w	r2, r3, #7
 8001432:	4922      	ldr	r1, [pc, #136]	@ (80014bc <HAL_RCC_ClockConfig+0x1c0>)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	4313      	orrs	r3, r2
 8001438:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800143a:	4b20      	ldr	r3, [pc, #128]	@ (80014bc <HAL_RCC_ClockConfig+0x1c0>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	683a      	ldr	r2, [r7, #0]
 8001444:	429a      	cmp	r2, r3
 8001446:	d001      	beq.n	800144c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e032      	b.n	80014b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	2b00      	cmp	r3, #0
 8001456:	d008      	beq.n	800146a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001458:	4b19      	ldr	r3, [pc, #100]	@ (80014c0 <HAL_RCC_ClockConfig+0x1c4>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	4916      	ldr	r1, [pc, #88]	@ (80014c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001466:	4313      	orrs	r3, r2
 8001468:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0308 	and.w	r3, r3, #8
 8001472:	2b00      	cmp	r3, #0
 8001474:	d009      	beq.n	800148a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001476:	4b12      	ldr	r3, [pc, #72]	@ (80014c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	490e      	ldr	r1, [pc, #56]	@ (80014c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001486:	4313      	orrs	r3, r2
 8001488:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800148a:	f000 f821 	bl	80014d0 <HAL_RCC_GetSysClockFreq>
 800148e:	4602      	mov	r2, r0
 8001490:	4b0b      	ldr	r3, [pc, #44]	@ (80014c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	091b      	lsrs	r3, r3, #4
 8001496:	f003 030f 	and.w	r3, r3, #15
 800149a:	490a      	ldr	r1, [pc, #40]	@ (80014c4 <HAL_RCC_ClockConfig+0x1c8>)
 800149c:	5ccb      	ldrb	r3, [r1, r3]
 800149e:	fa22 f303 	lsr.w	r3, r2, r3
 80014a2:	4a09      	ldr	r2, [pc, #36]	@ (80014c8 <HAL_RCC_ClockConfig+0x1cc>)
 80014a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80014a6:	4b09      	ldr	r3, [pc, #36]	@ (80014cc <HAL_RCC_ClockConfig+0x1d0>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff f91e 	bl	80006ec <HAL_InitTick>

  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40022000 	.word	0x40022000
 80014c0:	40021000 	.word	0x40021000
 80014c4:	08004910 	.word	0x08004910
 80014c8:	20000000 	.word	0x20000000
 80014cc:	20000004 	.word	0x20000004

080014d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b087      	sub	sp, #28
 80014d4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	2300      	movs	r3, #0
 80014dc:	60bb      	str	r3, [r7, #8]
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
 80014e2:	2300      	movs	r3, #0
 80014e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80014ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001564 <HAL_RCC_GetSysClockFreq+0x94>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f003 030c 	and.w	r3, r3, #12
 80014f6:	2b04      	cmp	r3, #4
 80014f8:	d002      	beq.n	8001500 <HAL_RCC_GetSysClockFreq+0x30>
 80014fa:	2b08      	cmp	r3, #8
 80014fc:	d003      	beq.n	8001506 <HAL_RCC_GetSysClockFreq+0x36>
 80014fe:	e027      	b.n	8001550 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001500:	4b19      	ldr	r3, [pc, #100]	@ (8001568 <HAL_RCC_GetSysClockFreq+0x98>)
 8001502:	613b      	str	r3, [r7, #16]
      break;
 8001504:	e027      	b.n	8001556 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	0c9b      	lsrs	r3, r3, #18
 800150a:	f003 030f 	and.w	r3, r3, #15
 800150e:	4a17      	ldr	r2, [pc, #92]	@ (800156c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001510:	5cd3      	ldrb	r3, [r2, r3]
 8001512:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d010      	beq.n	8001540 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800151e:	4b11      	ldr	r3, [pc, #68]	@ (8001564 <HAL_RCC_GetSysClockFreq+0x94>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	0c5b      	lsrs	r3, r3, #17
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	4a11      	ldr	r2, [pc, #68]	@ (8001570 <HAL_RCC_GetSysClockFreq+0xa0>)
 800152a:	5cd3      	ldrb	r3, [r2, r3]
 800152c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a0d      	ldr	r2, [pc, #52]	@ (8001568 <HAL_RCC_GetSysClockFreq+0x98>)
 8001532:	fb03 f202 	mul.w	r2, r3, r2
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	fbb2 f3f3 	udiv	r3, r2, r3
 800153c:	617b      	str	r3, [r7, #20]
 800153e:	e004      	b.n	800154a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a0c      	ldr	r2, [pc, #48]	@ (8001574 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001544:	fb02 f303 	mul.w	r3, r2, r3
 8001548:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	613b      	str	r3, [r7, #16]
      break;
 800154e:	e002      	b.n	8001556 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001550:	4b05      	ldr	r3, [pc, #20]	@ (8001568 <HAL_RCC_GetSysClockFreq+0x98>)
 8001552:	613b      	str	r3, [r7, #16]
      break;
 8001554:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001556:	693b      	ldr	r3, [r7, #16]
}
 8001558:	4618      	mov	r0, r3
 800155a:	371c      	adds	r7, #28
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	40021000 	.word	0x40021000
 8001568:	007a1200 	.word	0x007a1200
 800156c:	08004928 	.word	0x08004928
 8001570:	08004938 	.word	0x08004938
 8001574:	003d0900 	.word	0x003d0900

08001578 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800157c:	4b02      	ldr	r3, [pc, #8]	@ (8001588 <HAL_RCC_GetHCLKFreq+0x10>)
 800157e:	681b      	ldr	r3, [r3, #0]
}
 8001580:	4618      	mov	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr
 8001588:	20000000 	.word	0x20000000

0800158c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001590:	f7ff fff2 	bl	8001578 <HAL_RCC_GetHCLKFreq>
 8001594:	4602      	mov	r2, r0
 8001596:	4b05      	ldr	r3, [pc, #20]	@ (80015ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	0a1b      	lsrs	r3, r3, #8
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	4903      	ldr	r1, [pc, #12]	@ (80015b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015a2:	5ccb      	ldrb	r3, [r1, r3]
 80015a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40021000 	.word	0x40021000
 80015b0:	08004920 	.word	0x08004920

080015b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015b8:	f7ff ffde 	bl	8001578 <HAL_RCC_GetHCLKFreq>
 80015bc:	4602      	mov	r2, r0
 80015be:	4b05      	ldr	r3, [pc, #20]	@ (80015d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	0adb      	lsrs	r3, r3, #11
 80015c4:	f003 0307 	and.w	r3, r3, #7
 80015c8:	4903      	ldr	r1, [pc, #12]	@ (80015d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80015ca:	5ccb      	ldrb	r3, [r1, r3]
 80015cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40021000 	.word	0x40021000
 80015d8:	08004920 	.word	0x08004920

080015dc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	220f      	movs	r2, #15
 80015ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80015ec:	4b11      	ldr	r3, [pc, #68]	@ (8001634 <HAL_RCC_GetClockConfig+0x58>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 0203 	and.w	r2, r3, #3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80015f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001634 <HAL_RCC_GetClockConfig+0x58>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001604:	4b0b      	ldr	r3, [pc, #44]	@ (8001634 <HAL_RCC_GetClockConfig+0x58>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001610:	4b08      	ldr	r3, [pc, #32]	@ (8001634 <HAL_RCC_GetClockConfig+0x58>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	08db      	lsrs	r3, r3, #3
 8001616:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800161e:	4b06      	ldr	r3, [pc, #24]	@ (8001638 <HAL_RCC_GetClockConfig+0x5c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0207 	and.w	r2, r3, #7
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr
 8001634:	40021000 	.word	0x40021000
 8001638:	40022000 	.word	0x40022000

0800163c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001644:	4b0a      	ldr	r3, [pc, #40]	@ (8001670 <RCC_Delay+0x34>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a0a      	ldr	r2, [pc, #40]	@ (8001674 <RCC_Delay+0x38>)
 800164a:	fba2 2303 	umull	r2, r3, r2, r3
 800164e:	0a5b      	lsrs	r3, r3, #9
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	fb02 f303 	mul.w	r3, r2, r3
 8001656:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001658:	bf00      	nop
  }
  while (Delay --);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	1e5a      	subs	r2, r3, #1
 800165e:	60fa      	str	r2, [r7, #12]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1f9      	bne.n	8001658 <RCC_Delay+0x1c>
}
 8001664:	bf00      	nop
 8001666:	bf00      	nop
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr
 8001670:	20000000 	.word	0x20000000
 8001674:	10624dd3 	.word	0x10624dd3

08001678 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e041      	b.n	800170e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d106      	bne.n	80016a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 f839 	bl	8001716 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2202      	movs	r2, #2
 80016a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3304      	adds	r3, #4
 80016b4:	4619      	mov	r1, r3
 80016b6:	4610      	mov	r0, r2
 80016b8:	f000 f996 	bl	80019e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2201      	movs	r2, #1
 80016c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2201      	movs	r2, #1
 80016c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2201      	movs	r2, #1
 80016d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2201      	movs	r2, #1
 80016d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2201      	movs	r2, #1
 80016e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2201      	movs	r2, #1
 80016e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2201      	movs	r2, #1
 80016f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2201      	movs	r2, #1
 80016f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2201      	movs	r2, #1
 8001700:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2201      	movs	r2, #1
 8001708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr

08001728 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001736:	b2db      	uxtb	r3, r3
 8001738:	2b01      	cmp	r3, #1
 800173a:	d001      	beq.n	8001740 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e035      	b.n	80017ac <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2202      	movs	r2, #2
 8001744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	68da      	ldr	r2, [r3, #12]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f042 0201 	orr.w	r2, r2, #1
 8001756:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a16      	ldr	r2, [pc, #88]	@ (80017b8 <HAL_TIM_Base_Start_IT+0x90>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d009      	beq.n	8001776 <HAL_TIM_Base_Start_IT+0x4e>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800176a:	d004      	beq.n	8001776 <HAL_TIM_Base_Start_IT+0x4e>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a12      	ldr	r2, [pc, #72]	@ (80017bc <HAL_TIM_Base_Start_IT+0x94>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d111      	bne.n	800179a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f003 0307 	and.w	r3, r3, #7
 8001780:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2b06      	cmp	r3, #6
 8001786:	d010      	beq.n	80017aa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f042 0201 	orr.w	r2, r2, #1
 8001796:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001798:	e007      	b.n	80017aa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f042 0201 	orr.w	r2, r2, #1
 80017a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	40012c00 	.word	0x40012c00
 80017bc:	40000400 	.word	0x40000400

080017c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d020      	beq.n	8001824 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d01b      	beq.n	8001824 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f06f 0202 	mvn.w	r2, #2
 80017f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2201      	movs	r2, #1
 80017fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	f003 0303 	and.w	r3, r3, #3
 8001806:	2b00      	cmp	r3, #0
 8001808:	d003      	beq.n	8001812 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 f8d1 	bl	80019b2 <HAL_TIM_IC_CaptureCallback>
 8001810:	e005      	b.n	800181e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f000 f8c4 	bl	80019a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 f8d3 	bl	80019c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	2b00      	cmp	r3, #0
 800182c:	d020      	beq.n	8001870 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b00      	cmp	r3, #0
 8001836:	d01b      	beq.n	8001870 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f06f 0204 	mvn.w	r2, #4
 8001840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2202      	movs	r2, #2
 8001846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001852:	2b00      	cmp	r3, #0
 8001854:	d003      	beq.n	800185e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f000 f8ab 	bl	80019b2 <HAL_TIM_IC_CaptureCallback>
 800185c:	e005      	b.n	800186a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 f89e 	bl	80019a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f000 f8ad 	bl	80019c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	f003 0308 	and.w	r3, r3, #8
 8001876:	2b00      	cmp	r3, #0
 8001878:	d020      	beq.n	80018bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f003 0308 	and.w	r3, r3, #8
 8001880:	2b00      	cmp	r3, #0
 8001882:	d01b      	beq.n	80018bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f06f 0208 	mvn.w	r2, #8
 800188c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2204      	movs	r2, #4
 8001892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	f003 0303 	and.w	r3, r3, #3
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 f885 	bl	80019b2 <HAL_TIM_IC_CaptureCallback>
 80018a8:	e005      	b.n	80018b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f000 f878 	bl	80019a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f000 f887 	bl	80019c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	f003 0310 	and.w	r3, r3, #16
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d020      	beq.n	8001908 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f003 0310 	and.w	r3, r3, #16
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d01b      	beq.n	8001908 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f06f 0210 	mvn.w	r2, #16
 80018d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2208      	movs	r2, #8
 80018de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d003      	beq.n	80018f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 f85f 	bl	80019b2 <HAL_TIM_IC_CaptureCallback>
 80018f4:	e005      	b.n	8001902 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f000 f852 	bl	80019a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f000 f861 	bl	80019c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	2b00      	cmp	r3, #0
 8001910:	d00c      	beq.n	800192c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	2b00      	cmp	r3, #0
 800191a:	d007      	beq.n	800192c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f06f 0201 	mvn.w	r2, #1
 8001924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f7fe fe44 	bl	80005b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001932:	2b00      	cmp	r3, #0
 8001934:	d00c      	beq.n	8001950 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800193c:	2b00      	cmp	r3, #0
 800193e:	d007      	beq.n	8001950 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 f8b9 	bl	8001ac2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00c      	beq.n	8001974 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001960:	2b00      	cmp	r3, #0
 8001962:	d007      	beq.n	8001974 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800196c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 f831 	bl	80019d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	f003 0320 	and.w	r3, r3, #32
 800197a:	2b00      	cmp	r3, #0
 800197c:	d00c      	beq.n	8001998 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f003 0320 	and.w	r3, r3, #32
 8001984:	2b00      	cmp	r3, #0
 8001986:	d007      	beq.n	8001998 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f06f 0220 	mvn.w	r2, #32
 8001990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 f88c 	bl	8001ab0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001998:	bf00      	nop
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr

080019b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b083      	sub	sp, #12
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr

080019c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc80      	pop	{r7}
 80019d4:	4770      	bx	lr

080019d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr

080019e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a2b      	ldr	r2, [pc, #172]	@ (8001aa8 <TIM_Base_SetConfig+0xc0>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d007      	beq.n	8001a10 <TIM_Base_SetConfig+0x28>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a06:	d003      	beq.n	8001a10 <TIM_Base_SetConfig+0x28>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a28      	ldr	r2, [pc, #160]	@ (8001aac <TIM_Base_SetConfig+0xc4>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d108      	bne.n	8001a22 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a20      	ldr	r2, [pc, #128]	@ (8001aa8 <TIM_Base_SetConfig+0xc0>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d007      	beq.n	8001a3a <TIM_Base_SetConfig+0x52>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a30:	d003      	beq.n	8001a3a <TIM_Base_SetConfig+0x52>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a1d      	ldr	r2, [pc, #116]	@ (8001aac <TIM_Base_SetConfig+0xc4>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d108      	bne.n	8001a4c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001a40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a0d      	ldr	r2, [pc, #52]	@ (8001aa8 <TIM_Base_SetConfig+0xc0>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d103      	bne.n	8001a80 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	691a      	ldr	r2, [r3, #16]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d005      	beq.n	8001a9e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	f023 0201 	bic.w	r2, r3, #1
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	611a      	str	r2, [r3, #16]
  }
}
 8001a9e:	bf00      	nop
 8001aa0:	3714      	adds	r7, #20
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr
 8001aa8:	40012c00 	.word	0x40012c00
 8001aac:	40000400 	.word	0x40000400

08001ab0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr

08001ac2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr

08001ad4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e042      	b.n	8001b6c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d106      	bne.n	8001b00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7fe fdaa 	bl	8000654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2224      	movs	r2, #36	@ 0x24
 8001b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	68da      	ldr	r2, [r3, #12]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001b16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 f971 	bl	8001e00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	691a      	ldr	r2, [r3, #16]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001b2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	695a      	ldr	r2, [r3, #20]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001b3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68da      	ldr	r2, [r3, #12]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001b4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2220      	movs	r2, #32
 8001b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2220      	movs	r2, #32
 8001b60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08a      	sub	sp, #40	@ 0x28
 8001b78:	af02      	add	r7, sp, #8
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	603b      	str	r3, [r7, #0]
 8001b80:	4613      	mov	r3, r2
 8001b82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b20      	cmp	r3, #32
 8001b92:	d175      	bne.n	8001c80 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d002      	beq.n	8001ba0 <HAL_UART_Transmit+0x2c>
 8001b9a:	88fb      	ldrh	r3, [r7, #6]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d101      	bne.n	8001ba4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e06e      	b.n	8001c82 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2221      	movs	r2, #33	@ 0x21
 8001bae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001bb2:	f7fe febb 	bl	800092c <HAL_GetTick>
 8001bb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	88fa      	ldrh	r2, [r7, #6]
 8001bbc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	88fa      	ldrh	r2, [r7, #6]
 8001bc2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001bcc:	d108      	bne.n	8001be0 <HAL_UART_Transmit+0x6c>
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d104      	bne.n	8001be0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	61bb      	str	r3, [r7, #24]
 8001bde:	e003      	b.n	8001be8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001be8:	e02e      	b.n	8001c48 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2180      	movs	r1, #128	@ 0x80
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	f000 f848 	bl	8001c8a <UART_WaitOnFlagUntilTimeout>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d005      	beq.n	8001c0c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2220      	movs	r2, #32
 8001c04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e03a      	b.n	8001c82 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d10b      	bne.n	8001c2a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	881b      	ldrh	r3, [r3, #0]
 8001c16:	461a      	mov	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	3302      	adds	r3, #2
 8001c26:	61bb      	str	r3, [r7, #24]
 8001c28:	e007      	b.n	8001c3a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	781a      	ldrb	r2, [r3, #0]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	3301      	adds	r3, #1
 8001c38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	3b01      	subs	r3, #1
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1cb      	bne.n	8001bea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2140      	movs	r1, #64	@ 0x40
 8001c5c:	68f8      	ldr	r0, [r7, #12]
 8001c5e:	f000 f814 	bl	8001c8a <UART_WaitOnFlagUntilTimeout>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d005      	beq.n	8001c74 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2220      	movs	r2, #32
 8001c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e006      	b.n	8001c82 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2220      	movs	r2, #32
 8001c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	e000      	b.n	8001c82 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001c80:	2302      	movs	r3, #2
  }
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3720      	adds	r7, #32
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b086      	sub	sp, #24
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	60f8      	str	r0, [r7, #12]
 8001c92:	60b9      	str	r1, [r7, #8]
 8001c94:	603b      	str	r3, [r7, #0]
 8001c96:	4613      	mov	r3, r2
 8001c98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c9a:	e03b      	b.n	8001d14 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c9c:	6a3b      	ldr	r3, [r7, #32]
 8001c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca2:	d037      	beq.n	8001d14 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ca4:	f7fe fe42 	bl	800092c <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	6a3a      	ldr	r2, [r7, #32]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d302      	bcc.n	8001cba <UART_WaitOnFlagUntilTimeout+0x30>
 8001cb4:	6a3b      	ldr	r3, [r7, #32]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e03a      	b.n	8001d34 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d023      	beq.n	8001d14 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	2b80      	cmp	r3, #128	@ 0x80
 8001cd0:	d020      	beq.n	8001d14 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	2b40      	cmp	r3, #64	@ 0x40
 8001cd6:	d01d      	beq.n	8001d14 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0308 	and.w	r3, r3, #8
 8001ce2:	2b08      	cmp	r3, #8
 8001ce4:	d116      	bne.n	8001d14 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	617b      	str	r3, [r7, #20]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	617b      	str	r3, [r7, #20]
 8001cfa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001cfc:	68f8      	ldr	r0, [r7, #12]
 8001cfe:	f000 f81d 	bl	8001d3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2208      	movs	r2, #8
 8001d06:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e00f      	b.n	8001d34 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	bf0c      	ite	eq
 8001d24:	2301      	moveq	r3, #1
 8001d26:	2300      	movne	r3, #0
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d0b4      	beq.n	8001c9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b095      	sub	sp, #84	@ 0x54
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	330c      	adds	r3, #12
 8001d4a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d4e:	e853 3f00 	ldrex	r3, [r3]
 8001d52:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001d5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	330c      	adds	r3, #12
 8001d62:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d64:	643a      	str	r2, [r7, #64]	@ 0x40
 8001d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d68:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001d6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001d6c:	e841 2300 	strex	r3, r2, [r1]
 8001d70:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1e5      	bne.n	8001d44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	3314      	adds	r3, #20
 8001d7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d80:	6a3b      	ldr	r3, [r7, #32]
 8001d82:	e853 3f00 	ldrex	r3, [r3]
 8001d86:	61fb      	str	r3, [r7, #28]
   return(result);
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f023 0301 	bic.w	r3, r3, #1
 8001d8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	3314      	adds	r3, #20
 8001d96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001d98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001da0:	e841 2300 	strex	r3, r2, [r1]
 8001da4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1e5      	bne.n	8001d78 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d119      	bne.n	8001de8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	330c      	adds	r3, #12
 8001dba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	e853 3f00 	ldrex	r3, [r3]
 8001dc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	f023 0310 	bic.w	r3, r3, #16
 8001dca:	647b      	str	r3, [r7, #68]	@ 0x44
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	330c      	adds	r3, #12
 8001dd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001dd4:	61ba      	str	r2, [r7, #24]
 8001dd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dd8:	6979      	ldr	r1, [r7, #20]
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	e841 2300 	strex	r3, r2, [r1]
 8001de0:	613b      	str	r3, [r7, #16]
   return(result);
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1e5      	bne.n	8001db4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2220      	movs	r2, #32
 8001dec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001df6:	bf00      	nop
 8001df8:	3754      	adds	r7, #84	@ 0x54
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr

08001e00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68da      	ldr	r2, [r3, #12]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689a      	ldr	r2, [r3, #8]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	431a      	orrs	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	695b      	ldr	r3, [r3, #20]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001e3a:	f023 030c 	bic.w	r3, r3, #12
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6812      	ldr	r2, [r2, #0]
 8001e42:	68b9      	ldr	r1, [r7, #8]
 8001e44:	430b      	orrs	r3, r1
 8001e46:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	699a      	ldr	r2, [r3, #24]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a2c      	ldr	r2, [pc, #176]	@ (8001f14 <UART_SetConfig+0x114>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d103      	bne.n	8001e70 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001e68:	f7ff fba4 	bl	80015b4 <HAL_RCC_GetPCLK2Freq>
 8001e6c:	60f8      	str	r0, [r7, #12]
 8001e6e:	e002      	b.n	8001e76 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001e70:	f7ff fb8c 	bl	800158c <HAL_RCC_GetPCLK1Freq>
 8001e74:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	009a      	lsls	r2, r3, #2
 8001e80:	441a      	add	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8c:	4a22      	ldr	r2, [pc, #136]	@ (8001f18 <UART_SetConfig+0x118>)
 8001e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e92:	095b      	lsrs	r3, r3, #5
 8001e94:	0119      	lsls	r1, r3, #4
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	009a      	lsls	r2, r3, #2
 8001ea0:	441a      	add	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001eac:	4b1a      	ldr	r3, [pc, #104]	@ (8001f18 <UART_SetConfig+0x118>)
 8001eae:	fba3 0302 	umull	r0, r3, r3, r2
 8001eb2:	095b      	lsrs	r3, r3, #5
 8001eb4:	2064      	movs	r0, #100	@ 0x64
 8001eb6:	fb00 f303 	mul.w	r3, r0, r3
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	011b      	lsls	r3, r3, #4
 8001ebe:	3332      	adds	r3, #50	@ 0x32
 8001ec0:	4a15      	ldr	r2, [pc, #84]	@ (8001f18 <UART_SetConfig+0x118>)
 8001ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec6:	095b      	lsrs	r3, r3, #5
 8001ec8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ecc:	4419      	add	r1, r3
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4413      	add	r3, r2
 8001ed6:	009a      	lsls	r2, r3, #2
 8001ed8:	441a      	add	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f18 <UART_SetConfig+0x118>)
 8001ee6:	fba3 0302 	umull	r0, r3, r3, r2
 8001eea:	095b      	lsrs	r3, r3, #5
 8001eec:	2064      	movs	r0, #100	@ 0x64
 8001eee:	fb00 f303 	mul.w	r3, r0, r3
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	011b      	lsls	r3, r3, #4
 8001ef6:	3332      	adds	r3, #50	@ 0x32
 8001ef8:	4a07      	ldr	r2, [pc, #28]	@ (8001f18 <UART_SetConfig+0x118>)
 8001efa:	fba2 2303 	umull	r2, r3, r2, r3
 8001efe:	095b      	lsrs	r3, r3, #5
 8001f00:	f003 020f 	and.w	r2, r3, #15
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	440a      	add	r2, r1
 8001f0a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001f0c:	bf00      	nop
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40013800 	.word	0x40013800
 8001f18:	51eb851f 	.word	0x51eb851f

08001f1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f103 0208 	add.w	r2, r3, #8
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f04f 32ff 	mov.w	r2, #4294967295
 8001f34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f103 0208 	add.w	r2, r3, #8
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f103 0208 	add.w	r2, r3, #8
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr

08001f5a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc80      	pop	{r7}
 8001f70:	4770      	bx	lr

08001f72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f72:	b480      	push	{r7}
 8001f74:	b085      	sub	sp, #20
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
 8001f7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	1c5a      	adds	r2, r3, #1
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	601a      	str	r2, [r3, #0]
}
 8001fae:	bf00      	nop
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr

08001fb8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fce:	d103      	bne.n	8001fd8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	e00c      	b.n	8001ff2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3308      	adds	r3, #8
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	e002      	b.n	8001fe6 <vListInsert+0x2e>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d2f6      	bcs.n	8001fe0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	1c5a      	adds	r2, r3, #1
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	601a      	str	r2, [r3, #0]
}
 800201e:	bf00      	nop
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr

08002028 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	6892      	ldr	r2, [r2, #8]
 800203e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	6852      	ldr	r2, [r2, #4]
 8002048:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	429a      	cmp	r2, r3
 8002052:	d103      	bne.n	800205c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	1e5a      	subs	r2, r3, #1
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	bc80      	pop	{r7}
 8002078:	4770      	bx	lr
	...

0800207c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d10b      	bne.n	80020a8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002094:	f383 8811 	msr	BASEPRI, r3
 8002098:	f3bf 8f6f 	isb	sy
 800209c:	f3bf 8f4f 	dsb	sy
 80020a0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80020a2:	bf00      	nop
 80020a4:	bf00      	nop
 80020a6:	e7fd      	b.n	80020a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80020a8:	f001 fba0 	bl	80037ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020b4:	68f9      	ldr	r1, [r7, #12]
 80020b6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80020b8:	fb01 f303 	mul.w	r3, r1, r3
 80020bc:	441a      	add	r2, r3
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020d8:	3b01      	subs	r3, #1
 80020da:	68f9      	ldr	r1, [r7, #12]
 80020dc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80020de:	fb01 f303 	mul.w	r3, r1, r3
 80020e2:	441a      	add	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	22ff      	movs	r2, #255	@ 0xff
 80020ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	22ff      	movs	r2, #255	@ 0xff
 80020f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d114      	bne.n	8002128 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d01a      	beq.n	800213c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	3310      	adds	r3, #16
 800210a:	4618      	mov	r0, r3
 800210c:	f000 ffac 	bl	8003068 <xTaskRemoveFromEventList>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d012      	beq.n	800213c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002116:	4b0d      	ldr	r3, [pc, #52]	@ (800214c <xQueueGenericReset+0xd0>)
 8002118:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	f3bf 8f4f 	dsb	sy
 8002122:	f3bf 8f6f 	isb	sy
 8002126:	e009      	b.n	800213c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	3310      	adds	r3, #16
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff fef5 	bl	8001f1c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	3324      	adds	r3, #36	@ 0x24
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff fef0 	bl	8001f1c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800213c:	f001 fb86 	bl	800384c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002140:	2301      	movs	r3, #1
}
 8002142:	4618      	mov	r0, r3
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	e000ed04 	.word	0xe000ed04

08002150 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08a      	sub	sp, #40	@ 0x28
 8002154:	af02      	add	r7, sp, #8
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	4613      	mov	r3, r2
 800215c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d10b      	bne.n	800217c <xQueueGenericCreate+0x2c>
	__asm volatile
 8002164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002168:	f383 8811 	msr	BASEPRI, r3
 800216c:	f3bf 8f6f 	isb	sy
 8002170:	f3bf 8f4f 	dsb	sy
 8002174:	613b      	str	r3, [r7, #16]
}
 8002176:	bf00      	nop
 8002178:	bf00      	nop
 800217a:	e7fd      	b.n	8002178 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	fb02 f303 	mul.w	r3, r2, r3
 8002184:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	3348      	adds	r3, #72	@ 0x48
 800218a:	4618      	mov	r0, r3
 800218c:	f001 fbe8 	bl	8003960 <pvPortMalloc>
 8002190:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d011      	beq.n	80021bc <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	3348      	adds	r3, #72	@ 0x48
 80021a0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80021aa:	79fa      	ldrb	r2, [r7, #7]
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	4613      	mov	r3, r2
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	68b9      	ldr	r1, [r7, #8]
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 f805 	bl	80021c6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80021bc:	69bb      	ldr	r3, [r7, #24]
	}
 80021be:	4618      	mov	r0, r3
 80021c0:	3720      	adds	r7, #32
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b084      	sub	sp, #16
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	60f8      	str	r0, [r7, #12]
 80021ce:	60b9      	str	r1, [r7, #8]
 80021d0:	607a      	str	r2, [r7, #4]
 80021d2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d103      	bne.n	80021e2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	e002      	b.n	80021e8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	68ba      	ldr	r2, [r7, #8]
 80021f2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80021f4:	2101      	movs	r1, #1
 80021f6:	69b8      	ldr	r0, [r7, #24]
 80021f8:	f7ff ff40 	bl	800207c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80021fc:	bf00      	nop
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b08e      	sub	sp, #56	@ 0x38
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
 8002210:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002212:	2300      	movs	r3, #0
 8002214:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800221a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800221c:	2b00      	cmp	r3, #0
 800221e:	d10b      	bne.n	8002238 <xQueueGenericSend+0x34>
	__asm volatile
 8002220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002224:	f383 8811 	msr	BASEPRI, r3
 8002228:	f3bf 8f6f 	isb	sy
 800222c:	f3bf 8f4f 	dsb	sy
 8002230:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002232:	bf00      	nop
 8002234:	bf00      	nop
 8002236:	e7fd      	b.n	8002234 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d103      	bne.n	8002246 <xQueueGenericSend+0x42>
 800223e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <xQueueGenericSend+0x46>
 8002246:	2301      	movs	r3, #1
 8002248:	e000      	b.n	800224c <xQueueGenericSend+0x48>
 800224a:	2300      	movs	r3, #0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d10b      	bne.n	8002268 <xQueueGenericSend+0x64>
	__asm volatile
 8002250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002254:	f383 8811 	msr	BASEPRI, r3
 8002258:	f3bf 8f6f 	isb	sy
 800225c:	f3bf 8f4f 	dsb	sy
 8002260:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002262:	bf00      	nop
 8002264:	bf00      	nop
 8002266:	e7fd      	b.n	8002264 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	2b02      	cmp	r3, #2
 800226c:	d103      	bne.n	8002276 <xQueueGenericSend+0x72>
 800226e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002272:	2b01      	cmp	r3, #1
 8002274:	d101      	bne.n	800227a <xQueueGenericSend+0x76>
 8002276:	2301      	movs	r3, #1
 8002278:	e000      	b.n	800227c <xQueueGenericSend+0x78>
 800227a:	2300      	movs	r3, #0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10b      	bne.n	8002298 <xQueueGenericSend+0x94>
	__asm volatile
 8002280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002284:	f383 8811 	msr	BASEPRI, r3
 8002288:	f3bf 8f6f 	isb	sy
 800228c:	f3bf 8f4f 	dsb	sy
 8002290:	623b      	str	r3, [r7, #32]
}
 8002292:	bf00      	nop
 8002294:	bf00      	nop
 8002296:	e7fd      	b.n	8002294 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002298:	f001 f8ac 	bl	80033f4 <xTaskGetSchedulerState>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d102      	bne.n	80022a8 <xQueueGenericSend+0xa4>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <xQueueGenericSend+0xa8>
 80022a8:	2301      	movs	r3, #1
 80022aa:	e000      	b.n	80022ae <xQueueGenericSend+0xaa>
 80022ac:	2300      	movs	r3, #0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10b      	bne.n	80022ca <xQueueGenericSend+0xc6>
	__asm volatile
 80022b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022b6:	f383 8811 	msr	BASEPRI, r3
 80022ba:	f3bf 8f6f 	isb	sy
 80022be:	f3bf 8f4f 	dsb	sy
 80022c2:	61fb      	str	r3, [r7, #28]
}
 80022c4:	bf00      	nop
 80022c6:	bf00      	nop
 80022c8:	e7fd      	b.n	80022c6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80022ca:	f001 fa8f 	bl	80037ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80022ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80022d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d302      	bcc.n	80022e0 <xQueueGenericSend+0xdc>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d129      	bne.n	8002334 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	68b9      	ldr	r1, [r7, #8]
 80022e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80022e6:	f000 f971 	bl	80025cc <prvCopyDataToQueue>
 80022ea:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80022ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d010      	beq.n	8002316 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80022f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022f6:	3324      	adds	r3, #36	@ 0x24
 80022f8:	4618      	mov	r0, r3
 80022fa:	f000 feb5 	bl	8003068 <xTaskRemoveFromEventList>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d013      	beq.n	800232c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002304:	4b3f      	ldr	r3, [pc, #252]	@ (8002404 <xQueueGenericSend+0x200>)
 8002306:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	f3bf 8f4f 	dsb	sy
 8002310:	f3bf 8f6f 	isb	sy
 8002314:	e00a      	b.n	800232c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002318:	2b00      	cmp	r3, #0
 800231a:	d007      	beq.n	800232c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800231c:	4b39      	ldr	r3, [pc, #228]	@ (8002404 <xQueueGenericSend+0x200>)
 800231e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	f3bf 8f4f 	dsb	sy
 8002328:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800232c:	f001 fa8e 	bl	800384c <vPortExitCritical>
				return pdPASS;
 8002330:	2301      	movs	r3, #1
 8002332:	e063      	b.n	80023fc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d103      	bne.n	8002342 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800233a:	f001 fa87 	bl	800384c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800233e:	2300      	movs	r3, #0
 8002340:	e05c      	b.n	80023fc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002344:	2b00      	cmp	r3, #0
 8002346:	d106      	bne.n	8002356 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002348:	f107 0314 	add.w	r3, r7, #20
 800234c:	4618      	mov	r0, r3
 800234e:	f000 feef 	bl	8003130 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002352:	2301      	movs	r3, #1
 8002354:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002356:	f001 fa79 	bl	800384c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800235a:	f000 fc97 	bl	8002c8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800235e:	f001 fa45 	bl	80037ec <vPortEnterCritical>
 8002362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002364:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002368:	b25b      	sxtb	r3, r3
 800236a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800236e:	d103      	bne.n	8002378 <xQueueGenericSend+0x174>
 8002370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800237a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800237e:	b25b      	sxtb	r3, r3
 8002380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002384:	d103      	bne.n	800238e <xQueueGenericSend+0x18a>
 8002386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800238e:	f001 fa5d 	bl	800384c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002392:	1d3a      	adds	r2, r7, #4
 8002394:	f107 0314 	add.w	r3, r7, #20
 8002398:	4611      	mov	r1, r2
 800239a:	4618      	mov	r0, r3
 800239c:	f000 fede 	bl	800315c <xTaskCheckForTimeOut>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d124      	bne.n	80023f0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80023a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80023a8:	f000 fa08 	bl	80027bc <prvIsQueueFull>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d018      	beq.n	80023e4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80023b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023b4:	3310      	adds	r3, #16
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	4611      	mov	r1, r2
 80023ba:	4618      	mov	r0, r3
 80023bc:	f000 fe2e 	bl	800301c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80023c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80023c2:	f000 f993 	bl	80026ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80023c6:	f000 fc6f 	bl	8002ca8 <xTaskResumeAll>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f47f af7c 	bne.w	80022ca <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80023d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002404 <xQueueGenericSend+0x200>)
 80023d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	f3bf 8f4f 	dsb	sy
 80023de:	f3bf 8f6f 	isb	sy
 80023e2:	e772      	b.n	80022ca <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80023e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80023e6:	f000 f981 	bl	80026ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80023ea:	f000 fc5d 	bl	8002ca8 <xTaskResumeAll>
 80023ee:	e76c      	b.n	80022ca <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80023f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80023f2:	f000 f97b 	bl	80026ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80023f6:	f000 fc57 	bl	8002ca8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80023fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3738      	adds	r7, #56	@ 0x38
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	e000ed04 	.word	0xe000ed04

08002408 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b08c      	sub	sp, #48	@ 0x30
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002414:	2300      	movs	r3, #0
 8002416:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800241c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10b      	bne.n	800243a <xQueueReceive+0x32>
	__asm volatile
 8002422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002426:	f383 8811 	msr	BASEPRI, r3
 800242a:	f3bf 8f6f 	isb	sy
 800242e:	f3bf 8f4f 	dsb	sy
 8002432:	623b      	str	r3, [r7, #32]
}
 8002434:	bf00      	nop
 8002436:	bf00      	nop
 8002438:	e7fd      	b.n	8002436 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d103      	bne.n	8002448 <xQueueReceive+0x40>
 8002440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <xQueueReceive+0x44>
 8002448:	2301      	movs	r3, #1
 800244a:	e000      	b.n	800244e <xQueueReceive+0x46>
 800244c:	2300      	movs	r3, #0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10b      	bne.n	800246a <xQueueReceive+0x62>
	__asm volatile
 8002452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002456:	f383 8811 	msr	BASEPRI, r3
 800245a:	f3bf 8f6f 	isb	sy
 800245e:	f3bf 8f4f 	dsb	sy
 8002462:	61fb      	str	r3, [r7, #28]
}
 8002464:	bf00      	nop
 8002466:	bf00      	nop
 8002468:	e7fd      	b.n	8002466 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800246a:	f000 ffc3 	bl	80033f4 <xTaskGetSchedulerState>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d102      	bne.n	800247a <xQueueReceive+0x72>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <xQueueReceive+0x76>
 800247a:	2301      	movs	r3, #1
 800247c:	e000      	b.n	8002480 <xQueueReceive+0x78>
 800247e:	2300      	movs	r3, #0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10b      	bne.n	800249c <xQueueReceive+0x94>
	__asm volatile
 8002484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002488:	f383 8811 	msr	BASEPRI, r3
 800248c:	f3bf 8f6f 	isb	sy
 8002490:	f3bf 8f4f 	dsb	sy
 8002494:	61bb      	str	r3, [r7, #24]
}
 8002496:	bf00      	nop
 8002498:	bf00      	nop
 800249a:	e7fd      	b.n	8002498 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800249c:	f001 f9a6 	bl	80037ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80024a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024a4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80024a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d01f      	beq.n	80024ec <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80024ac:	68b9      	ldr	r1, [r7, #8]
 80024ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80024b0:	f000 f8f6 	bl	80026a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80024b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b6:	1e5a      	subs	r2, r3, #1
 80024b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ba:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00f      	beq.n	80024e4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024c6:	3310      	adds	r3, #16
 80024c8:	4618      	mov	r0, r3
 80024ca:	f000 fdcd 	bl	8003068 <xTaskRemoveFromEventList>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d007      	beq.n	80024e4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80024d4:	4b3c      	ldr	r3, [pc, #240]	@ (80025c8 <xQueueReceive+0x1c0>)
 80024d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	f3bf 8f4f 	dsb	sy
 80024e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80024e4:	f001 f9b2 	bl	800384c <vPortExitCritical>
				return pdPASS;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e069      	b.n	80025c0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d103      	bne.n	80024fa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80024f2:	f001 f9ab 	bl	800384c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80024f6:	2300      	movs	r3, #0
 80024f8:	e062      	b.n	80025c0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80024fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d106      	bne.n	800250e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002500:	f107 0310 	add.w	r3, r7, #16
 8002504:	4618      	mov	r0, r3
 8002506:	f000 fe13 	bl	8003130 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800250a:	2301      	movs	r3, #1
 800250c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800250e:	f001 f99d 	bl	800384c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002512:	f000 fbbb 	bl	8002c8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002516:	f001 f969 	bl	80037ec <vPortEnterCritical>
 800251a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800251c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002520:	b25b      	sxtb	r3, r3
 8002522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002526:	d103      	bne.n	8002530 <xQueueReceive+0x128>
 8002528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800252a:	2200      	movs	r2, #0
 800252c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002532:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002536:	b25b      	sxtb	r3, r3
 8002538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253c:	d103      	bne.n	8002546 <xQueueReceive+0x13e>
 800253e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002546:	f001 f981 	bl	800384c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800254a:	1d3a      	adds	r2, r7, #4
 800254c:	f107 0310 	add.w	r3, r7, #16
 8002550:	4611      	mov	r1, r2
 8002552:	4618      	mov	r0, r3
 8002554:	f000 fe02 	bl	800315c <xTaskCheckForTimeOut>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d123      	bne.n	80025a6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800255e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002560:	f000 f916 	bl	8002790 <prvIsQueueEmpty>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d017      	beq.n	800259a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800256a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800256c:	3324      	adds	r3, #36	@ 0x24
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	4611      	mov	r1, r2
 8002572:	4618      	mov	r0, r3
 8002574:	f000 fd52 	bl	800301c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002578:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800257a:	f000 f8b7 	bl	80026ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800257e:	f000 fb93 	bl	8002ca8 <xTaskResumeAll>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d189      	bne.n	800249c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002588:	4b0f      	ldr	r3, [pc, #60]	@ (80025c8 <xQueueReceive+0x1c0>)
 800258a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	f3bf 8f4f 	dsb	sy
 8002594:	f3bf 8f6f 	isb	sy
 8002598:	e780      	b.n	800249c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800259a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800259c:	f000 f8a6 	bl	80026ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80025a0:	f000 fb82 	bl	8002ca8 <xTaskResumeAll>
 80025a4:	e77a      	b.n	800249c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80025a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80025a8:	f000 f8a0 	bl	80026ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80025ac:	f000 fb7c 	bl	8002ca8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80025b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80025b2:	f000 f8ed 	bl	8002790 <prvIsQueueEmpty>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f43f af6f 	beq.w	800249c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80025be:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3730      	adds	r7, #48	@ 0x30
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	e000ed04 	.word	0xe000ed04

080025cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80025d8:	2300      	movs	r3, #0
 80025da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10d      	bne.n	8002606 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d14d      	bne.n	800268e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 ff1a 	bl	8003430 <xTaskPriorityDisinherit>
 80025fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	609a      	str	r2, [r3, #8]
 8002604:	e043      	b.n	800268e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d119      	bne.n	8002640 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6858      	ldr	r0, [r3, #4]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002614:	461a      	mov	r2, r3
 8002616:	68b9      	ldr	r1, [r7, #8]
 8002618:	f001 fc42 	bl	8003ea0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002624:	441a      	add	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	429a      	cmp	r2, r3
 8002634:	d32b      	bcc.n	800268e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	e026      	b.n	800268e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	68d8      	ldr	r0, [r3, #12]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002648:	461a      	mov	r2, r3
 800264a:	68b9      	ldr	r1, [r7, #8]
 800264c:	f001 fc28 	bl	8003ea0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	68da      	ldr	r2, [r3, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002658:	425b      	negs	r3, r3
 800265a:	441a      	add	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	68da      	ldr	r2, [r3, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	429a      	cmp	r2, r3
 800266a:	d207      	bcs.n	800267c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002674:	425b      	negs	r3, r3
 8002676:	441a      	add	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b02      	cmp	r3, #2
 8002680:	d105      	bne.n	800268e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d002      	beq.n	800268e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	3b01      	subs	r3, #1
 800268c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1c5a      	adds	r2, r3, #1
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002696:	697b      	ldr	r3, [r7, #20]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d018      	beq.n	80026e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68da      	ldr	r2, [r3, #12]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ba:	441a      	add	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68da      	ldr	r2, [r3, #12]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d303      	bcc.n	80026d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	68d9      	ldr	r1, [r3, #12]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026dc:	461a      	mov	r2, r3
 80026de:	6838      	ldr	r0, [r7, #0]
 80026e0:	f001 fbde 	bl	8003ea0 <memcpy>
	}
}
 80026e4:	bf00      	nop
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80026f4:	f001 f87a 	bl	80037ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80026fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002700:	e011      	b.n	8002726 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002706:	2b00      	cmp	r3, #0
 8002708:	d012      	beq.n	8002730 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	3324      	adds	r3, #36	@ 0x24
 800270e:	4618      	mov	r0, r3
 8002710:	f000 fcaa 	bl	8003068 <xTaskRemoveFromEventList>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800271a:	f000 fd83 	bl	8003224 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800271e:	7bfb      	ldrb	r3, [r7, #15]
 8002720:	3b01      	subs	r3, #1
 8002722:	b2db      	uxtb	r3, r3
 8002724:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800272a:	2b00      	cmp	r3, #0
 800272c:	dce9      	bgt.n	8002702 <prvUnlockQueue+0x16>
 800272e:	e000      	b.n	8002732 <prvUnlockQueue+0x46>
					break;
 8002730:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	22ff      	movs	r2, #255	@ 0xff
 8002736:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800273a:	f001 f887 	bl	800384c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800273e:	f001 f855 	bl	80037ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002748:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800274a:	e011      	b.n	8002770 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d012      	beq.n	800277a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3310      	adds	r3, #16
 8002758:	4618      	mov	r0, r3
 800275a:	f000 fc85 	bl	8003068 <xTaskRemoveFromEventList>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002764:	f000 fd5e 	bl	8003224 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002768:	7bbb      	ldrb	r3, [r7, #14]
 800276a:	3b01      	subs	r3, #1
 800276c:	b2db      	uxtb	r3, r3
 800276e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002770:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002774:	2b00      	cmp	r3, #0
 8002776:	dce9      	bgt.n	800274c <prvUnlockQueue+0x60>
 8002778:	e000      	b.n	800277c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800277a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	22ff      	movs	r2, #255	@ 0xff
 8002780:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002784:	f001 f862 	bl	800384c <vPortExitCritical>
}
 8002788:	bf00      	nop
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002798:	f001 f828 	bl	80037ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d102      	bne.n	80027aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80027a4:	2301      	movs	r3, #1
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	e001      	b.n	80027ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80027aa:	2300      	movs	r3, #0
 80027ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80027ae:	f001 f84d 	bl	800384c <vPortExitCritical>

	return xReturn;
 80027b2:	68fb      	ldr	r3, [r7, #12]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80027c4:	f001 f812 	bl	80037ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d102      	bne.n	80027da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80027d4:	2301      	movs	r3, #1
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	e001      	b.n	80027de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80027da:	2300      	movs	r3, #0
 80027dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80027de:	f001 f835 	bl	800384c <vPortExitCritical>

	return xReturn;
 80027e2:	68fb      	ldr	r3, [r7, #12]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b08e      	sub	sp, #56	@ 0x38
 80027f0:	af04      	add	r7, sp, #16
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
 80027f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80027fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10b      	bne.n	8002818 <xTaskCreateStatic+0x2c>
	__asm volatile
 8002800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002804:	f383 8811 	msr	BASEPRI, r3
 8002808:	f3bf 8f6f 	isb	sy
 800280c:	f3bf 8f4f 	dsb	sy
 8002810:	623b      	str	r3, [r7, #32]
}
 8002812:	bf00      	nop
 8002814:	bf00      	nop
 8002816:	e7fd      	b.n	8002814 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10b      	bne.n	8002836 <xTaskCreateStatic+0x4a>
	__asm volatile
 800281e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002822:	f383 8811 	msr	BASEPRI, r3
 8002826:	f3bf 8f6f 	isb	sy
 800282a:	f3bf 8f4f 	dsb	sy
 800282e:	61fb      	str	r3, [r7, #28]
}
 8002830:	bf00      	nop
 8002832:	bf00      	nop
 8002834:	e7fd      	b.n	8002832 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002836:	23a0      	movs	r3, #160	@ 0xa0
 8002838:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	2ba0      	cmp	r3, #160	@ 0xa0
 800283e:	d00b      	beq.n	8002858 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002844:	f383 8811 	msr	BASEPRI, r3
 8002848:	f3bf 8f6f 	isb	sy
 800284c:	f3bf 8f4f 	dsb	sy
 8002850:	61bb      	str	r3, [r7, #24]
}
 8002852:	bf00      	nop
 8002854:	bf00      	nop
 8002856:	e7fd      	b.n	8002854 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002858:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800285a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800285c:	2b00      	cmp	r3, #0
 800285e:	d01e      	beq.n	800289e <xTaskCreateStatic+0xb2>
 8002860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002862:	2b00      	cmp	r3, #0
 8002864:	d01b      	beq.n	800289e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002868:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800286a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800286e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002872:	2202      	movs	r2, #2
 8002874:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002878:	2300      	movs	r3, #0
 800287a:	9303      	str	r3, [sp, #12]
 800287c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287e:	9302      	str	r3, [sp, #8]
 8002880:	f107 0314 	add.w	r3, r7, #20
 8002884:	9301      	str	r3, [sp, #4]
 8002886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	68b9      	ldr	r1, [r7, #8]
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f000 f851 	bl	8002938 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002896:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002898:	f000 f8ee 	bl	8002a78 <prvAddNewTaskToReadyList>
 800289c:	e001      	b.n	80028a2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80028a2:	697b      	ldr	r3, [r7, #20]
	}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3728      	adds	r7, #40	@ 0x28
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b08c      	sub	sp, #48	@ 0x30
 80028b0:	af04      	add	r7, sp, #16
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	603b      	str	r3, [r7, #0]
 80028b8:	4613      	mov	r3, r2
 80028ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80028bc:	88fb      	ldrh	r3, [r7, #6]
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4618      	mov	r0, r3
 80028c2:	f001 f84d 	bl	8003960 <pvPortMalloc>
 80028c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00e      	beq.n	80028ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80028ce:	20a0      	movs	r0, #160	@ 0xa0
 80028d0:	f001 f846 	bl	8003960 <pvPortMalloc>
 80028d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d003      	beq.n	80028e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80028e2:	e005      	b.n	80028f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80028e4:	6978      	ldr	r0, [r7, #20]
 80028e6:	f001 f909 	bl	8003afc <vPortFree>
 80028ea:	e001      	b.n	80028f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d017      	beq.n	8002926 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80028fe:	88fa      	ldrh	r2, [r7, #6]
 8002900:	2300      	movs	r3, #0
 8002902:	9303      	str	r3, [sp, #12]
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	9302      	str	r3, [sp, #8]
 8002908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800290a:	9301      	str	r3, [sp, #4]
 800290c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	68b9      	ldr	r1, [r7, #8]
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f000 f80f 	bl	8002938 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800291a:	69f8      	ldr	r0, [r7, #28]
 800291c:	f000 f8ac 	bl	8002a78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002920:	2301      	movs	r3, #1
 8002922:	61bb      	str	r3, [r7, #24]
 8002924:	e002      	b.n	800292c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002926:	f04f 33ff 	mov.w	r3, #4294967295
 800292a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800292c:	69bb      	ldr	r3, [r7, #24]
	}
 800292e:	4618      	mov	r0, r3
 8002930:	3720      	adds	r7, #32
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
	...

08002938 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b088      	sub	sp, #32
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
 8002944:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002948:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002950:	3b01      	subs	r3, #1
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	f023 0307 	bic.w	r3, r3, #7
 800295e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00b      	beq.n	8002982 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800296a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800296e:	f383 8811 	msr	BASEPRI, r3
 8002972:	f3bf 8f6f 	isb	sy
 8002976:	f3bf 8f4f 	dsb	sy
 800297a:	617b      	str	r3, [r7, #20]
}
 800297c:	bf00      	nop
 800297e:	bf00      	nop
 8002980:	e7fd      	b.n	800297e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d01f      	beq.n	80029c8 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002988:	2300      	movs	r3, #0
 800298a:	61fb      	str	r3, [r7, #28]
 800298c:	e012      	b.n	80029b4 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	4413      	add	r3, r2
 8002994:	7819      	ldrb	r1, [r3, #0]
 8002996:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	4413      	add	r3, r2
 800299c:	3334      	adds	r3, #52	@ 0x34
 800299e:	460a      	mov	r2, r1
 80029a0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	4413      	add	r3, r2
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d006      	beq.n	80029bc <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	3301      	adds	r3, #1
 80029b2:	61fb      	str	r3, [r7, #28]
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	2b0f      	cmp	r3, #15
 80029b8:	d9e9      	bls.n	800298e <prvInitialiseNewTask+0x56>
 80029ba:	e000      	b.n	80029be <prvInitialiseNewTask+0x86>
			{
				break;
 80029bc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80029be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80029c6:	e003      	b.n	80029d0 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80029c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80029d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029d2:	2b06      	cmp	r3, #6
 80029d4:	d901      	bls.n	80029da <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80029d6:	2306      	movs	r3, #6
 80029d8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80029da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80029de:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80029e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80029e4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80029e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029e8:	2200      	movs	r2, #0
 80029ea:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80029ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ee:	3304      	adds	r3, #4
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff fab2 	bl	8001f5a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80029f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029f8:	3318      	adds	r3, #24
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff faad 	bl	8001f5a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a04:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a08:	f1c3 0207 	rsb	r2, r3, #7
 8002a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a0e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a14:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a28:	334c      	adds	r3, #76	@ 0x4c
 8002a2a:	224c      	movs	r2, #76	@ 0x4c
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f001 f9a4 	bl	8003d7c <memset>
 8002a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a36:	4a0d      	ldr	r2, [pc, #52]	@ (8002a6c <prvInitialiseNewTask+0x134>)
 8002a38:	651a      	str	r2, [r3, #80]	@ 0x50
 8002a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a3c:	4a0c      	ldr	r2, [pc, #48]	@ (8002a70 <prvInitialiseNewTask+0x138>)
 8002a3e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a42:	4a0c      	ldr	r2, [pc, #48]	@ (8002a74 <prvInitialiseNewTask+0x13c>)
 8002a44:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	68f9      	ldr	r1, [r7, #12]
 8002a4a:	69b8      	ldr	r0, [r7, #24]
 8002a4c:	f000 fdde 	bl	800360c <pxPortInitialiseStack>
 8002a50:	4602      	mov	r2, r0
 8002a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a54:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d002      	beq.n	8002a62 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a62:	bf00      	nop
 8002a64:	3720      	adds	r7, #32
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20001120 	.word	0x20001120
 8002a70:	20001188 	.word	0x20001188
 8002a74:	200011f0 	.word	0x200011f0

08002a78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002a80:	f000 feb4 	bl	80037ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002a84:	4b2a      	ldr	r3, [pc, #168]	@ (8002b30 <prvAddNewTaskToReadyList+0xb8>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	4a29      	ldr	r2, [pc, #164]	@ (8002b30 <prvAddNewTaskToReadyList+0xb8>)
 8002a8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002a8e:	4b29      	ldr	r3, [pc, #164]	@ (8002b34 <prvAddNewTaskToReadyList+0xbc>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d109      	bne.n	8002aaa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002a96:	4a27      	ldr	r2, [pc, #156]	@ (8002b34 <prvAddNewTaskToReadyList+0xbc>)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002a9c:	4b24      	ldr	r3, [pc, #144]	@ (8002b30 <prvAddNewTaskToReadyList+0xb8>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d110      	bne.n	8002ac6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002aa4:	f000 fbe2 	bl	800326c <prvInitialiseTaskLists>
 8002aa8:	e00d      	b.n	8002ac6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002aaa:	4b23      	ldr	r3, [pc, #140]	@ (8002b38 <prvAddNewTaskToReadyList+0xc0>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d109      	bne.n	8002ac6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002ab2:	4b20      	ldr	r3, [pc, #128]	@ (8002b34 <prvAddNewTaskToReadyList+0xbc>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d802      	bhi.n	8002ac6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002ac0:	4a1c      	ldr	r2, [pc, #112]	@ (8002b34 <prvAddNewTaskToReadyList+0xbc>)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002ac6:	4b1d      	ldr	r3, [pc, #116]	@ (8002b3c <prvAddNewTaskToReadyList+0xc4>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	3301      	adds	r3, #1
 8002acc:	4a1b      	ldr	r2, [pc, #108]	@ (8002b3c <prvAddNewTaskToReadyList+0xc4>)
 8002ace:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	409a      	lsls	r2, r3
 8002ad8:	4b19      	ldr	r3, [pc, #100]	@ (8002b40 <prvAddNewTaskToReadyList+0xc8>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	4a18      	ldr	r2, [pc, #96]	@ (8002b40 <prvAddNewTaskToReadyList+0xc8>)
 8002ae0:	6013      	str	r3, [r2, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4a15      	ldr	r2, [pc, #84]	@ (8002b44 <prvAddNewTaskToReadyList+0xcc>)
 8002af0:	441a      	add	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	3304      	adds	r3, #4
 8002af6:	4619      	mov	r1, r3
 8002af8:	4610      	mov	r0, r2
 8002afa:	f7ff fa3a 	bl	8001f72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002afe:	f000 fea5 	bl	800384c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002b02:	4b0d      	ldr	r3, [pc, #52]	@ (8002b38 <prvAddNewTaskToReadyList+0xc0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00e      	beq.n	8002b28 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b34 <prvAddNewTaskToReadyList+0xbc>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d207      	bcs.n	8002b28 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002b18:	4b0b      	ldr	r3, [pc, #44]	@ (8002b48 <prvAddNewTaskToReadyList+0xd0>)
 8002b1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	f3bf 8f4f 	dsb	sy
 8002b24:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b28:	bf00      	nop
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	200004cc 	.word	0x200004cc
 8002b34:	200003cc 	.word	0x200003cc
 8002b38:	200004d8 	.word	0x200004d8
 8002b3c:	200004e8 	.word	0x200004e8
 8002b40:	200004d4 	.word	0x200004d4
 8002b44:	200003d0 	.word	0x200003d0
 8002b48:	e000ed04 	.word	0xe000ed04

08002b4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002b54:	2300      	movs	r3, #0
 8002b56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d018      	beq.n	8002b90 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002b5e:	4b14      	ldr	r3, [pc, #80]	@ (8002bb0 <vTaskDelay+0x64>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00b      	beq.n	8002b7e <vTaskDelay+0x32>
	__asm volatile
 8002b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b6a:	f383 8811 	msr	BASEPRI, r3
 8002b6e:	f3bf 8f6f 	isb	sy
 8002b72:	f3bf 8f4f 	dsb	sy
 8002b76:	60bb      	str	r3, [r7, #8]
}
 8002b78:	bf00      	nop
 8002b7a:	bf00      	nop
 8002b7c:	e7fd      	b.n	8002b7a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002b7e:	f000 f885 	bl	8002c8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002b82:	2100      	movs	r1, #0
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 fcdb 	bl	8003540 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002b8a:	f000 f88d 	bl	8002ca8 <xTaskResumeAll>
 8002b8e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d107      	bne.n	8002ba6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002b96:	4b07      	ldr	r3, [pc, #28]	@ (8002bb4 <vTaskDelay+0x68>)
 8002b98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	f3bf 8f4f 	dsb	sy
 8002ba2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002ba6:	bf00      	nop
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	200004f4 	.word	0x200004f4
 8002bb4:	e000ed04 	.word	0xe000ed04

08002bb8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b08a      	sub	sp, #40	@ 0x28
 8002bbc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002bc6:	463a      	mov	r2, r7
 8002bc8:	1d39      	adds	r1, r7, #4
 8002bca:	f107 0308 	add.w	r3, r7, #8
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7fd fac6 	bl	8000160 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002bd4:	6839      	ldr	r1, [r7, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	9202      	str	r2, [sp, #8]
 8002bdc:	9301      	str	r3, [sp, #4]
 8002bde:	2300      	movs	r3, #0
 8002be0:	9300      	str	r3, [sp, #0]
 8002be2:	2300      	movs	r3, #0
 8002be4:	460a      	mov	r2, r1
 8002be6:	4921      	ldr	r1, [pc, #132]	@ (8002c6c <vTaskStartScheduler+0xb4>)
 8002be8:	4821      	ldr	r0, [pc, #132]	@ (8002c70 <vTaskStartScheduler+0xb8>)
 8002bea:	f7ff fdff 	bl	80027ec <xTaskCreateStatic>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	4a20      	ldr	r2, [pc, #128]	@ (8002c74 <vTaskStartScheduler+0xbc>)
 8002bf2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002bf4:	4b1f      	ldr	r3, [pc, #124]	@ (8002c74 <vTaskStartScheduler+0xbc>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d002      	beq.n	8002c02 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	617b      	str	r3, [r7, #20]
 8002c00:	e001      	b.n	8002c06 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002c02:	2300      	movs	r3, #0
 8002c04:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d11b      	bne.n	8002c44 <vTaskStartScheduler+0x8c>
	__asm volatile
 8002c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c10:	f383 8811 	msr	BASEPRI, r3
 8002c14:	f3bf 8f6f 	isb	sy
 8002c18:	f3bf 8f4f 	dsb	sy
 8002c1c:	613b      	str	r3, [r7, #16]
}
 8002c1e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002c20:	4b15      	ldr	r3, [pc, #84]	@ (8002c78 <vTaskStartScheduler+0xc0>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	334c      	adds	r3, #76	@ 0x4c
 8002c26:	4a15      	ldr	r2, [pc, #84]	@ (8002c7c <vTaskStartScheduler+0xc4>)
 8002c28:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002c2a:	4b15      	ldr	r3, [pc, #84]	@ (8002c80 <vTaskStartScheduler+0xc8>)
 8002c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c30:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002c32:	4b14      	ldr	r3, [pc, #80]	@ (8002c84 <vTaskStartScheduler+0xcc>)
 8002c34:	2201      	movs	r2, #1
 8002c36:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002c38:	4b13      	ldr	r3, [pc, #76]	@ (8002c88 <vTaskStartScheduler+0xd0>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002c3e:	f000 fd63 	bl	8003708 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002c42:	e00f      	b.n	8002c64 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4a:	d10b      	bne.n	8002c64 <vTaskStartScheduler+0xac>
	__asm volatile
 8002c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c50:	f383 8811 	msr	BASEPRI, r3
 8002c54:	f3bf 8f6f 	isb	sy
 8002c58:	f3bf 8f4f 	dsb	sy
 8002c5c:	60fb      	str	r3, [r7, #12]
}
 8002c5e:	bf00      	nop
 8002c60:	bf00      	nop
 8002c62:	e7fd      	b.n	8002c60 <vTaskStartScheduler+0xa8>
}
 8002c64:	bf00      	nop
 8002c66:	3718      	adds	r7, #24
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	08004908 	.word	0x08004908
 8002c70:	0800323d 	.word	0x0800323d
 8002c74:	200004f0 	.word	0x200004f0
 8002c78:	200003cc 	.word	0x200003cc
 8002c7c:	20000010 	.word	0x20000010
 8002c80:	200004ec 	.word	0x200004ec
 8002c84:	200004d8 	.word	0x200004d8
 8002c88:	200004d0 	.word	0x200004d0

08002c8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002c90:	4b04      	ldr	r3, [pc, #16]	@ (8002ca4 <vTaskSuspendAll+0x18>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	3301      	adds	r3, #1
 8002c96:	4a03      	ldr	r2, [pc, #12]	@ (8002ca4 <vTaskSuspendAll+0x18>)
 8002c98:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002c9a:	bf00      	nop
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bc80      	pop	{r7}
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	200004f4 	.word	0x200004f4

08002ca8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002cb6:	4b42      	ldr	r3, [pc, #264]	@ (8002dc0 <xTaskResumeAll+0x118>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10b      	bne.n	8002cd6 <xTaskResumeAll+0x2e>
	__asm volatile
 8002cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cc2:	f383 8811 	msr	BASEPRI, r3
 8002cc6:	f3bf 8f6f 	isb	sy
 8002cca:	f3bf 8f4f 	dsb	sy
 8002cce:	603b      	str	r3, [r7, #0]
}
 8002cd0:	bf00      	nop
 8002cd2:	bf00      	nop
 8002cd4:	e7fd      	b.n	8002cd2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002cd6:	f000 fd89 	bl	80037ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002cda:	4b39      	ldr	r3, [pc, #228]	@ (8002dc0 <xTaskResumeAll+0x118>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	4a37      	ldr	r2, [pc, #220]	@ (8002dc0 <xTaskResumeAll+0x118>)
 8002ce2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ce4:	4b36      	ldr	r3, [pc, #216]	@ (8002dc0 <xTaskResumeAll+0x118>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d161      	bne.n	8002db0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002cec:	4b35      	ldr	r3, [pc, #212]	@ (8002dc4 <xTaskResumeAll+0x11c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d05d      	beq.n	8002db0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002cf4:	e02e      	b.n	8002d54 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cf6:	4b34      	ldr	r3, [pc, #208]	@ (8002dc8 <xTaskResumeAll+0x120>)
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	3318      	adds	r3, #24
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff f990 	bl	8002028 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	3304      	adds	r3, #4
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff f98b 	bl	8002028 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d16:	2201      	movs	r2, #1
 8002d18:	409a      	lsls	r2, r3
 8002d1a:	4b2c      	ldr	r3, [pc, #176]	@ (8002dcc <xTaskResumeAll+0x124>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	4a2a      	ldr	r2, [pc, #168]	@ (8002dcc <xTaskResumeAll+0x124>)
 8002d22:	6013      	str	r3, [r2, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d28:	4613      	mov	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4a27      	ldr	r2, [pc, #156]	@ (8002dd0 <xTaskResumeAll+0x128>)
 8002d32:	441a      	add	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	3304      	adds	r3, #4
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4610      	mov	r0, r2
 8002d3c:	f7ff f919 	bl	8001f72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d44:	4b23      	ldr	r3, [pc, #140]	@ (8002dd4 <xTaskResumeAll+0x12c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d302      	bcc.n	8002d54 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002d4e:	4b22      	ldr	r3, [pc, #136]	@ (8002dd8 <xTaskResumeAll+0x130>)
 8002d50:	2201      	movs	r2, #1
 8002d52:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d54:	4b1c      	ldr	r3, [pc, #112]	@ (8002dc8 <xTaskResumeAll+0x120>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1cc      	bne.n	8002cf6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002d62:	f000 fb27 	bl	80033b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002d66:	4b1d      	ldr	r3, [pc, #116]	@ (8002ddc <xTaskResumeAll+0x134>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d010      	beq.n	8002d94 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002d72:	f000 f837 	bl	8002de4 <xTaskIncrementTick>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d002      	beq.n	8002d82 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002d7c:	4b16      	ldr	r3, [pc, #88]	@ (8002dd8 <xTaskResumeAll+0x130>)
 8002d7e:	2201      	movs	r2, #1
 8002d80:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	3b01      	subs	r3, #1
 8002d86:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1f1      	bne.n	8002d72 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002d8e:	4b13      	ldr	r3, [pc, #76]	@ (8002ddc <xTaskResumeAll+0x134>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002d94:	4b10      	ldr	r3, [pc, #64]	@ (8002dd8 <xTaskResumeAll+0x130>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d009      	beq.n	8002db0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002da0:	4b0f      	ldr	r3, [pc, #60]	@ (8002de0 <xTaskResumeAll+0x138>)
 8002da2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	f3bf 8f4f 	dsb	sy
 8002dac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002db0:	f000 fd4c 	bl	800384c <vPortExitCritical>

	return xAlreadyYielded;
 8002db4:	68bb      	ldr	r3, [r7, #8]
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	200004f4 	.word	0x200004f4
 8002dc4:	200004cc 	.word	0x200004cc
 8002dc8:	2000048c 	.word	0x2000048c
 8002dcc:	200004d4 	.word	0x200004d4
 8002dd0:	200003d0 	.word	0x200003d0
 8002dd4:	200003cc 	.word	0x200003cc
 8002dd8:	200004e0 	.word	0x200004e0
 8002ddc:	200004dc 	.word	0x200004dc
 8002de0:	e000ed04 	.word	0xe000ed04

08002de4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002dea:	2300      	movs	r3, #0
 8002dec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002dee:	4b4f      	ldr	r3, [pc, #316]	@ (8002f2c <xTaskIncrementTick+0x148>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f040 808f 	bne.w	8002f16 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002df8:	4b4d      	ldr	r3, [pc, #308]	@ (8002f30 <xTaskIncrementTick+0x14c>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002e00:	4a4b      	ldr	r2, [pc, #300]	@ (8002f30 <xTaskIncrementTick+0x14c>)
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d121      	bne.n	8002e50 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002e0c:	4b49      	ldr	r3, [pc, #292]	@ (8002f34 <xTaskIncrementTick+0x150>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00b      	beq.n	8002e2e <xTaskIncrementTick+0x4a>
	__asm volatile
 8002e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e1a:	f383 8811 	msr	BASEPRI, r3
 8002e1e:	f3bf 8f6f 	isb	sy
 8002e22:	f3bf 8f4f 	dsb	sy
 8002e26:	603b      	str	r3, [r7, #0]
}
 8002e28:	bf00      	nop
 8002e2a:	bf00      	nop
 8002e2c:	e7fd      	b.n	8002e2a <xTaskIncrementTick+0x46>
 8002e2e:	4b41      	ldr	r3, [pc, #260]	@ (8002f34 <xTaskIncrementTick+0x150>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	4b40      	ldr	r3, [pc, #256]	@ (8002f38 <xTaskIncrementTick+0x154>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a3e      	ldr	r2, [pc, #248]	@ (8002f34 <xTaskIncrementTick+0x150>)
 8002e3a:	6013      	str	r3, [r2, #0]
 8002e3c:	4a3e      	ldr	r2, [pc, #248]	@ (8002f38 <xTaskIncrementTick+0x154>)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	4b3e      	ldr	r3, [pc, #248]	@ (8002f3c <xTaskIncrementTick+0x158>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	3301      	adds	r3, #1
 8002e48:	4a3c      	ldr	r2, [pc, #240]	@ (8002f3c <xTaskIncrementTick+0x158>)
 8002e4a:	6013      	str	r3, [r2, #0]
 8002e4c:	f000 fab2 	bl	80033b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002e50:	4b3b      	ldr	r3, [pc, #236]	@ (8002f40 <xTaskIncrementTick+0x15c>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d348      	bcc.n	8002eec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e5a:	4b36      	ldr	r3, [pc, #216]	@ (8002f34 <xTaskIncrementTick+0x150>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d104      	bne.n	8002e6e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e64:	4b36      	ldr	r3, [pc, #216]	@ (8002f40 <xTaskIncrementTick+0x15c>)
 8002e66:	f04f 32ff 	mov.w	r2, #4294967295
 8002e6a:	601a      	str	r2, [r3, #0]
					break;
 8002e6c:	e03e      	b.n	8002eec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e6e:	4b31      	ldr	r3, [pc, #196]	@ (8002f34 <xTaskIncrementTick+0x150>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d203      	bcs.n	8002e8e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002e86:	4a2e      	ldr	r2, [pc, #184]	@ (8002f40 <xTaskIncrementTick+0x15c>)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002e8c:	e02e      	b.n	8002eec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	3304      	adds	r3, #4
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff f8c8 	bl	8002028 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d004      	beq.n	8002eaa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	3318      	adds	r3, #24
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff f8bf 	bl	8002028 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eae:	2201      	movs	r2, #1
 8002eb0:	409a      	lsls	r2, r3
 8002eb2:	4b24      	ldr	r3, [pc, #144]	@ (8002f44 <xTaskIncrementTick+0x160>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	4a22      	ldr	r2, [pc, #136]	@ (8002f44 <xTaskIncrementTick+0x160>)
 8002eba:	6013      	str	r3, [r2, #0]
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4a1f      	ldr	r2, [pc, #124]	@ (8002f48 <xTaskIncrementTick+0x164>)
 8002eca:	441a      	add	r2, r3
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	3304      	adds	r3, #4
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4610      	mov	r0, r2
 8002ed4:	f7ff f84d 	bl	8001f72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002edc:	4b1b      	ldr	r3, [pc, #108]	@ (8002f4c <xTaskIncrementTick+0x168>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d3b9      	bcc.n	8002e5a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002eea:	e7b6      	b.n	8002e5a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002eec:	4b17      	ldr	r3, [pc, #92]	@ (8002f4c <xTaskIncrementTick+0x168>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ef2:	4915      	ldr	r1, [pc, #84]	@ (8002f48 <xTaskIncrementTick+0x164>)
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d901      	bls.n	8002f08 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8002f04:	2301      	movs	r3, #1
 8002f06:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002f08:	4b11      	ldr	r3, [pc, #68]	@ (8002f50 <xTaskIncrementTick+0x16c>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d007      	beq.n	8002f20 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002f10:	2301      	movs	r3, #1
 8002f12:	617b      	str	r3, [r7, #20]
 8002f14:	e004      	b.n	8002f20 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002f16:	4b0f      	ldr	r3, [pc, #60]	@ (8002f54 <xTaskIncrementTick+0x170>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	4a0d      	ldr	r2, [pc, #52]	@ (8002f54 <xTaskIncrementTick+0x170>)
 8002f1e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002f20:	697b      	ldr	r3, [r7, #20]
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3718      	adds	r7, #24
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	200004f4 	.word	0x200004f4
 8002f30:	200004d0 	.word	0x200004d0
 8002f34:	20000484 	.word	0x20000484
 8002f38:	20000488 	.word	0x20000488
 8002f3c:	200004e4 	.word	0x200004e4
 8002f40:	200004ec 	.word	0x200004ec
 8002f44:	200004d4 	.word	0x200004d4
 8002f48:	200003d0 	.word	0x200003d0
 8002f4c:	200003cc 	.word	0x200003cc
 8002f50:	200004e0 	.word	0x200004e0
 8002f54:	200004dc 	.word	0x200004dc

08002f58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b087      	sub	sp, #28
 8002f5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002f5e:	4b29      	ldr	r3, [pc, #164]	@ (8003004 <vTaskSwitchContext+0xac>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002f66:	4b28      	ldr	r3, [pc, #160]	@ (8003008 <vTaskSwitchContext+0xb0>)
 8002f68:	2201      	movs	r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002f6c:	e045      	b.n	8002ffa <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8002f6e:	4b26      	ldr	r3, [pc, #152]	@ (8003008 <vTaskSwitchContext+0xb0>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f74:	4b25      	ldr	r3, [pc, #148]	@ (800300c <vTaskSwitchContext+0xb4>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	fab3 f383 	clz	r3, r3
 8002f80:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002f82:	7afb      	ldrb	r3, [r7, #11]
 8002f84:	f1c3 031f 	rsb	r3, r3, #31
 8002f88:	617b      	str	r3, [r7, #20]
 8002f8a:	4921      	ldr	r1, [pc, #132]	@ (8003010 <vTaskSwitchContext+0xb8>)
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4413      	add	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	440b      	add	r3, r1
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10b      	bne.n	8002fb6 <vTaskSwitchContext+0x5e>
	__asm volatile
 8002f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fa2:	f383 8811 	msr	BASEPRI, r3
 8002fa6:	f3bf 8f6f 	isb	sy
 8002faa:	f3bf 8f4f 	dsb	sy
 8002fae:	607b      	str	r3, [r7, #4]
}
 8002fb0:	bf00      	nop
 8002fb2:	bf00      	nop
 8002fb4:	e7fd      	b.n	8002fb2 <vTaskSwitchContext+0x5a>
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4a13      	ldr	r2, [pc, #76]	@ (8003010 <vTaskSwitchContext+0xb8>)
 8002fc2:	4413      	add	r3, r2
 8002fc4:	613b      	str	r3, [r7, #16]
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	605a      	str	r2, [r3, #4]
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	3308      	adds	r3, #8
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d104      	bne.n	8002fe6 <vTaskSwitchContext+0x8e>
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	605a      	str	r2, [r3, #4]
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	4a09      	ldr	r2, [pc, #36]	@ (8003014 <vTaskSwitchContext+0xbc>)
 8002fee:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002ff0:	4b08      	ldr	r3, [pc, #32]	@ (8003014 <vTaskSwitchContext+0xbc>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	334c      	adds	r3, #76	@ 0x4c
 8002ff6:	4a08      	ldr	r2, [pc, #32]	@ (8003018 <vTaskSwitchContext+0xc0>)
 8002ff8:	6013      	str	r3, [r2, #0]
}
 8002ffa:	bf00      	nop
 8002ffc:	371c      	adds	r7, #28
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr
 8003004:	200004f4 	.word	0x200004f4
 8003008:	200004e0 	.word	0x200004e0
 800300c:	200004d4 	.word	0x200004d4
 8003010:	200003d0 	.word	0x200003d0
 8003014:	200003cc 	.word	0x200003cc
 8003018:	20000010 	.word	0x20000010

0800301c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d10b      	bne.n	8003044 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800302c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003030:	f383 8811 	msr	BASEPRI, r3
 8003034:	f3bf 8f6f 	isb	sy
 8003038:	f3bf 8f4f 	dsb	sy
 800303c:	60fb      	str	r3, [r7, #12]
}
 800303e:	bf00      	nop
 8003040:	bf00      	nop
 8003042:	e7fd      	b.n	8003040 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003044:	4b07      	ldr	r3, [pc, #28]	@ (8003064 <vTaskPlaceOnEventList+0x48>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	3318      	adds	r3, #24
 800304a:	4619      	mov	r1, r3
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f7fe ffb3 	bl	8001fb8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003052:	2101      	movs	r1, #1
 8003054:	6838      	ldr	r0, [r7, #0]
 8003056:	f000 fa73 	bl	8003540 <prvAddCurrentTaskToDelayedList>
}
 800305a:	bf00      	nop
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	200003cc 	.word	0x200003cc

08003068 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10b      	bne.n	8003096 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800307e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003082:	f383 8811 	msr	BASEPRI, r3
 8003086:	f3bf 8f6f 	isb	sy
 800308a:	f3bf 8f4f 	dsb	sy
 800308e:	60fb      	str	r3, [r7, #12]
}
 8003090:	bf00      	nop
 8003092:	bf00      	nop
 8003094:	e7fd      	b.n	8003092 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	3318      	adds	r3, #24
 800309a:	4618      	mov	r0, r3
 800309c:	f7fe ffc4 	bl	8002028 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003118 <xTaskRemoveFromEventList+0xb0>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d11c      	bne.n	80030e2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	3304      	adds	r3, #4
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7fe ffbb 	bl	8002028 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b6:	2201      	movs	r2, #1
 80030b8:	409a      	lsls	r2, r3
 80030ba:	4b18      	ldr	r3, [pc, #96]	@ (800311c <xTaskRemoveFromEventList+0xb4>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4313      	orrs	r3, r2
 80030c0:	4a16      	ldr	r2, [pc, #88]	@ (800311c <xTaskRemoveFromEventList+0xb4>)
 80030c2:	6013      	str	r3, [r2, #0]
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030c8:	4613      	mov	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	4413      	add	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4a13      	ldr	r2, [pc, #76]	@ (8003120 <xTaskRemoveFromEventList+0xb8>)
 80030d2:	441a      	add	r2, r3
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	3304      	adds	r3, #4
 80030d8:	4619      	mov	r1, r3
 80030da:	4610      	mov	r0, r2
 80030dc:	f7fe ff49 	bl	8001f72 <vListInsertEnd>
 80030e0:	e005      	b.n	80030ee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	3318      	adds	r3, #24
 80030e6:	4619      	mov	r1, r3
 80030e8:	480e      	ldr	r0, [pc, #56]	@ (8003124 <xTaskRemoveFromEventList+0xbc>)
 80030ea:	f7fe ff42 	bl	8001f72 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003128 <xTaskRemoveFromEventList+0xc0>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d905      	bls.n	8003108 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80030fc:	2301      	movs	r3, #1
 80030fe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003100:	4b0a      	ldr	r3, [pc, #40]	@ (800312c <xTaskRemoveFromEventList+0xc4>)
 8003102:	2201      	movs	r2, #1
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	e001      	b.n	800310c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003108:	2300      	movs	r3, #0
 800310a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800310c:	697b      	ldr	r3, [r7, #20]
}
 800310e:	4618      	mov	r0, r3
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	200004f4 	.word	0x200004f4
 800311c:	200004d4 	.word	0x200004d4
 8003120:	200003d0 	.word	0x200003d0
 8003124:	2000048c 	.word	0x2000048c
 8003128:	200003cc 	.word	0x200003cc
 800312c:	200004e0 	.word	0x200004e0

08003130 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003138:	4b06      	ldr	r3, [pc, #24]	@ (8003154 <vTaskInternalSetTimeOutState+0x24>)
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003140:	4b05      	ldr	r3, [pc, #20]	@ (8003158 <vTaskInternalSetTimeOutState+0x28>)
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	605a      	str	r2, [r3, #4]
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	bc80      	pop	{r7}
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	200004e4 	.word	0x200004e4
 8003158:	200004d0 	.word	0x200004d0

0800315c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b088      	sub	sp, #32
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10b      	bne.n	8003184 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800316c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003170:	f383 8811 	msr	BASEPRI, r3
 8003174:	f3bf 8f6f 	isb	sy
 8003178:	f3bf 8f4f 	dsb	sy
 800317c:	613b      	str	r3, [r7, #16]
}
 800317e:	bf00      	nop
 8003180:	bf00      	nop
 8003182:	e7fd      	b.n	8003180 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10b      	bne.n	80031a2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800318a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800318e:	f383 8811 	msr	BASEPRI, r3
 8003192:	f3bf 8f6f 	isb	sy
 8003196:	f3bf 8f4f 	dsb	sy
 800319a:	60fb      	str	r3, [r7, #12]
}
 800319c:	bf00      	nop
 800319e:	bf00      	nop
 80031a0:	e7fd      	b.n	800319e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80031a2:	f000 fb23 	bl	80037ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80031a6:	4b1d      	ldr	r3, [pc, #116]	@ (800321c <xTaskCheckForTimeOut+0xc0>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031be:	d102      	bne.n	80031c6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80031c0:	2300      	movs	r3, #0
 80031c2:	61fb      	str	r3, [r7, #28]
 80031c4:	e023      	b.n	800320e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	4b15      	ldr	r3, [pc, #84]	@ (8003220 <xTaskCheckForTimeOut+0xc4>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d007      	beq.n	80031e2 <xTaskCheckForTimeOut+0x86>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d302      	bcc.n	80031e2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80031dc:	2301      	movs	r3, #1
 80031de:	61fb      	str	r3, [r7, #28]
 80031e0:	e015      	b.n	800320e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d20b      	bcs.n	8003204 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	1ad2      	subs	r2, r2, r3
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f7ff ff99 	bl	8003130 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80031fe:	2300      	movs	r3, #0
 8003200:	61fb      	str	r3, [r7, #28]
 8003202:	e004      	b.n	800320e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	2200      	movs	r2, #0
 8003208:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800320a:	2301      	movs	r3, #1
 800320c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800320e:	f000 fb1d 	bl	800384c <vPortExitCritical>

	return xReturn;
 8003212:	69fb      	ldr	r3, [r7, #28]
}
 8003214:	4618      	mov	r0, r3
 8003216:	3720      	adds	r7, #32
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	200004d0 	.word	0x200004d0
 8003220:	200004e4 	.word	0x200004e4

08003224 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003228:	4b03      	ldr	r3, [pc, #12]	@ (8003238 <vTaskMissedYield+0x14>)
 800322a:	2201      	movs	r2, #1
 800322c:	601a      	str	r2, [r3, #0]
}
 800322e:	bf00      	nop
 8003230:	46bd      	mov	sp, r7
 8003232:	bc80      	pop	{r7}
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	200004e0 	.word	0x200004e0

0800323c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003244:	f000 f852 	bl	80032ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003248:	4b06      	ldr	r3, [pc, #24]	@ (8003264 <prvIdleTask+0x28>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d9f9      	bls.n	8003244 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003250:	4b05      	ldr	r3, [pc, #20]	@ (8003268 <prvIdleTask+0x2c>)
 8003252:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	f3bf 8f4f 	dsb	sy
 800325c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003260:	e7f0      	b.n	8003244 <prvIdleTask+0x8>
 8003262:	bf00      	nop
 8003264:	200003d0 	.word	0x200003d0
 8003268:	e000ed04 	.word	0xe000ed04

0800326c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003272:	2300      	movs	r3, #0
 8003274:	607b      	str	r3, [r7, #4]
 8003276:	e00c      	b.n	8003292 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	4613      	mov	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4a12      	ldr	r2, [pc, #72]	@ (80032cc <prvInitialiseTaskLists+0x60>)
 8003284:	4413      	add	r3, r2
 8003286:	4618      	mov	r0, r3
 8003288:	f7fe fe48 	bl	8001f1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3301      	adds	r3, #1
 8003290:	607b      	str	r3, [r7, #4]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b06      	cmp	r3, #6
 8003296:	d9ef      	bls.n	8003278 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003298:	480d      	ldr	r0, [pc, #52]	@ (80032d0 <prvInitialiseTaskLists+0x64>)
 800329a:	f7fe fe3f 	bl	8001f1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800329e:	480d      	ldr	r0, [pc, #52]	@ (80032d4 <prvInitialiseTaskLists+0x68>)
 80032a0:	f7fe fe3c 	bl	8001f1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80032a4:	480c      	ldr	r0, [pc, #48]	@ (80032d8 <prvInitialiseTaskLists+0x6c>)
 80032a6:	f7fe fe39 	bl	8001f1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80032aa:	480c      	ldr	r0, [pc, #48]	@ (80032dc <prvInitialiseTaskLists+0x70>)
 80032ac:	f7fe fe36 	bl	8001f1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80032b0:	480b      	ldr	r0, [pc, #44]	@ (80032e0 <prvInitialiseTaskLists+0x74>)
 80032b2:	f7fe fe33 	bl	8001f1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80032b6:	4b0b      	ldr	r3, [pc, #44]	@ (80032e4 <prvInitialiseTaskLists+0x78>)
 80032b8:	4a05      	ldr	r2, [pc, #20]	@ (80032d0 <prvInitialiseTaskLists+0x64>)
 80032ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80032bc:	4b0a      	ldr	r3, [pc, #40]	@ (80032e8 <prvInitialiseTaskLists+0x7c>)
 80032be:	4a05      	ldr	r2, [pc, #20]	@ (80032d4 <prvInitialiseTaskLists+0x68>)
 80032c0:	601a      	str	r2, [r3, #0]
}
 80032c2:	bf00      	nop
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	200003d0 	.word	0x200003d0
 80032d0:	2000045c 	.word	0x2000045c
 80032d4:	20000470 	.word	0x20000470
 80032d8:	2000048c 	.word	0x2000048c
 80032dc:	200004a0 	.word	0x200004a0
 80032e0:	200004b8 	.word	0x200004b8
 80032e4:	20000484 	.word	0x20000484
 80032e8:	20000488 	.word	0x20000488

080032ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80032f2:	e019      	b.n	8003328 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80032f4:	f000 fa7a 	bl	80037ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032f8:	4b10      	ldr	r3, [pc, #64]	@ (800333c <prvCheckTasksWaitingTermination+0x50>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3304      	adds	r3, #4
 8003304:	4618      	mov	r0, r3
 8003306:	f7fe fe8f 	bl	8002028 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800330a:	4b0d      	ldr	r3, [pc, #52]	@ (8003340 <prvCheckTasksWaitingTermination+0x54>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	3b01      	subs	r3, #1
 8003310:	4a0b      	ldr	r2, [pc, #44]	@ (8003340 <prvCheckTasksWaitingTermination+0x54>)
 8003312:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003314:	4b0b      	ldr	r3, [pc, #44]	@ (8003344 <prvCheckTasksWaitingTermination+0x58>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	3b01      	subs	r3, #1
 800331a:	4a0a      	ldr	r2, [pc, #40]	@ (8003344 <prvCheckTasksWaitingTermination+0x58>)
 800331c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800331e:	f000 fa95 	bl	800384c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f810 	bl	8003348 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003328:	4b06      	ldr	r3, [pc, #24]	@ (8003344 <prvCheckTasksWaitingTermination+0x58>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1e1      	bne.n	80032f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003330:	bf00      	nop
 8003332:	bf00      	nop
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	200004a0 	.word	0x200004a0
 8003340:	200004cc 	.word	0x200004cc
 8003344:	200004b4 	.word	0x200004b4

08003348 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	334c      	adds	r3, #76	@ 0x4c
 8003354:	4618      	mov	r0, r3
 8003356:	f000 fd19 	bl	8003d8c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003360:	2b00      	cmp	r3, #0
 8003362:	d108      	bne.n	8003376 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003368:	4618      	mov	r0, r3
 800336a:	f000 fbc7 	bl	8003afc <vPortFree>
				vPortFree( pxTCB );
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 fbc4 	bl	8003afc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003374:	e019      	b.n	80033aa <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800337c:	2b01      	cmp	r3, #1
 800337e:	d103      	bne.n	8003388 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 fbbb 	bl	8003afc <vPortFree>
	}
 8003386:	e010      	b.n	80033aa <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800338e:	2b02      	cmp	r3, #2
 8003390:	d00b      	beq.n	80033aa <prvDeleteTCB+0x62>
	__asm volatile
 8003392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003396:	f383 8811 	msr	BASEPRI, r3
 800339a:	f3bf 8f6f 	isb	sy
 800339e:	f3bf 8f4f 	dsb	sy
 80033a2:	60fb      	str	r3, [r7, #12]
}
 80033a4:	bf00      	nop
 80033a6:	bf00      	nop
 80033a8:	e7fd      	b.n	80033a6 <prvDeleteTCB+0x5e>
	}
 80033aa:	bf00      	nop
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
	...

080033b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033ba:	4b0c      	ldr	r3, [pc, #48]	@ (80033ec <prvResetNextTaskUnblockTime+0x38>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d104      	bne.n	80033ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80033c4:	4b0a      	ldr	r3, [pc, #40]	@ (80033f0 <prvResetNextTaskUnblockTime+0x3c>)
 80033c6:	f04f 32ff 	mov.w	r2, #4294967295
 80033ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80033cc:	e008      	b.n	80033e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033ce:	4b07      	ldr	r3, [pc, #28]	@ (80033ec <prvResetNextTaskUnblockTime+0x38>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	4a04      	ldr	r2, [pc, #16]	@ (80033f0 <prvResetNextTaskUnblockTime+0x3c>)
 80033de:	6013      	str	r3, [r2, #0]
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bc80      	pop	{r7}
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	20000484 	.word	0x20000484
 80033f0:	200004ec 	.word	0x200004ec

080033f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80033fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003428 <xTaskGetSchedulerState+0x34>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d102      	bne.n	8003408 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003402:	2301      	movs	r3, #1
 8003404:	607b      	str	r3, [r7, #4]
 8003406:	e008      	b.n	800341a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003408:	4b08      	ldr	r3, [pc, #32]	@ (800342c <xTaskGetSchedulerState+0x38>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d102      	bne.n	8003416 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003410:	2302      	movs	r3, #2
 8003412:	607b      	str	r3, [r7, #4]
 8003414:	e001      	b.n	800341a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003416:	2300      	movs	r3, #0
 8003418:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800341a:	687b      	ldr	r3, [r7, #4]
	}
 800341c:	4618      	mov	r0, r3
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	bc80      	pop	{r7}
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	200004d8 	.word	0x200004d8
 800342c:	200004f4 	.word	0x200004f4

08003430 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800343c:	2300      	movs	r3, #0
 800343e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d070      	beq.n	8003528 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003446:	4b3b      	ldr	r3, [pc, #236]	@ (8003534 <xTaskPriorityDisinherit+0x104>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	429a      	cmp	r2, r3
 800344e:	d00b      	beq.n	8003468 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003454:	f383 8811 	msr	BASEPRI, r3
 8003458:	f3bf 8f6f 	isb	sy
 800345c:	f3bf 8f4f 	dsb	sy
 8003460:	60fb      	str	r3, [r7, #12]
}
 8003462:	bf00      	nop
 8003464:	bf00      	nop
 8003466:	e7fd      	b.n	8003464 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10b      	bne.n	8003488 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003474:	f383 8811 	msr	BASEPRI, r3
 8003478:	f3bf 8f6f 	isb	sy
 800347c:	f3bf 8f4f 	dsb	sy
 8003480:	60bb      	str	r3, [r7, #8]
}
 8003482:	bf00      	nop
 8003484:	bf00      	nop
 8003486:	e7fd      	b.n	8003484 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800348c:	1e5a      	subs	r2, r3, #1
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800349a:	429a      	cmp	r2, r3
 800349c:	d044      	beq.n	8003528 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d140      	bne.n	8003528 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	3304      	adds	r3, #4
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7fe fdbc 	bl	8002028 <uxListRemove>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d115      	bne.n	80034e2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034ba:	491f      	ldr	r1, [pc, #124]	@ (8003538 <xTaskPriorityDisinherit+0x108>)
 80034bc:	4613      	mov	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10a      	bne.n	80034e2 <xTaskPriorityDisinherit+0xb2>
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d0:	2201      	movs	r2, #1
 80034d2:	fa02 f303 	lsl.w	r3, r2, r3
 80034d6:	43da      	mvns	r2, r3
 80034d8:	4b18      	ldr	r3, [pc, #96]	@ (800353c <xTaskPriorityDisinherit+0x10c>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4013      	ands	r3, r2
 80034de:	4a17      	ldr	r2, [pc, #92]	@ (800353c <xTaskPriorityDisinherit+0x10c>)
 80034e0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ee:	f1c3 0207 	rsb	r2, r3, #7
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034fa:	2201      	movs	r2, #1
 80034fc:	409a      	lsls	r2, r3
 80034fe:	4b0f      	ldr	r3, [pc, #60]	@ (800353c <xTaskPriorityDisinherit+0x10c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4313      	orrs	r3, r2
 8003504:	4a0d      	ldr	r2, [pc, #52]	@ (800353c <xTaskPriorityDisinherit+0x10c>)
 8003506:	6013      	str	r3, [r2, #0]
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800350c:	4613      	mov	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4a08      	ldr	r2, [pc, #32]	@ (8003538 <xTaskPriorityDisinherit+0x108>)
 8003516:	441a      	add	r2, r3
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	3304      	adds	r3, #4
 800351c:	4619      	mov	r1, r3
 800351e:	4610      	mov	r0, r2
 8003520:	f7fe fd27 	bl	8001f72 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003524:	2301      	movs	r3, #1
 8003526:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003528:	697b      	ldr	r3, [r7, #20]
	}
 800352a:	4618      	mov	r0, r3
 800352c:	3718      	adds	r7, #24
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	200003cc 	.word	0x200003cc
 8003538:	200003d0 	.word	0x200003d0
 800353c:	200004d4 	.word	0x200004d4

08003540 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800354a:	4b29      	ldr	r3, [pc, #164]	@ (80035f0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003550:	4b28      	ldr	r3, [pc, #160]	@ (80035f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	3304      	adds	r3, #4
 8003556:	4618      	mov	r0, r3
 8003558:	f7fe fd66 	bl	8002028 <uxListRemove>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10b      	bne.n	800357a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003562:	4b24      	ldr	r3, [pc, #144]	@ (80035f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003568:	2201      	movs	r2, #1
 800356a:	fa02 f303 	lsl.w	r3, r2, r3
 800356e:	43da      	mvns	r2, r3
 8003570:	4b21      	ldr	r3, [pc, #132]	@ (80035f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4013      	ands	r3, r2
 8003576:	4a20      	ldr	r2, [pc, #128]	@ (80035f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003578:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003580:	d10a      	bne.n	8003598 <prvAddCurrentTaskToDelayedList+0x58>
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d007      	beq.n	8003598 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003588:	4b1a      	ldr	r3, [pc, #104]	@ (80035f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	3304      	adds	r3, #4
 800358e:	4619      	mov	r1, r3
 8003590:	481a      	ldr	r0, [pc, #104]	@ (80035fc <prvAddCurrentTaskToDelayedList+0xbc>)
 8003592:	f7fe fcee 	bl	8001f72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003596:	e026      	b.n	80035e6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4413      	add	r3, r2
 800359e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80035a0:	4b14      	ldr	r3, [pc, #80]	@ (80035f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80035a8:	68ba      	ldr	r2, [r7, #8]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d209      	bcs.n	80035c4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035b0:	4b13      	ldr	r3, [pc, #76]	@ (8003600 <prvAddCurrentTaskToDelayedList+0xc0>)
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	4b0f      	ldr	r3, [pc, #60]	@ (80035f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	3304      	adds	r3, #4
 80035ba:	4619      	mov	r1, r3
 80035bc:	4610      	mov	r0, r2
 80035be:	f7fe fcfb 	bl	8001fb8 <vListInsert>
}
 80035c2:	e010      	b.n	80035e6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003604 <prvAddCurrentTaskToDelayedList+0xc4>)
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	4b0a      	ldr	r3, [pc, #40]	@ (80035f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	3304      	adds	r3, #4
 80035ce:	4619      	mov	r1, r3
 80035d0:	4610      	mov	r0, r2
 80035d2:	f7fe fcf1 	bl	8001fb8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80035d6:	4b0c      	ldr	r3, [pc, #48]	@ (8003608 <prvAddCurrentTaskToDelayedList+0xc8>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d202      	bcs.n	80035e6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80035e0:	4a09      	ldr	r2, [pc, #36]	@ (8003608 <prvAddCurrentTaskToDelayedList+0xc8>)
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	6013      	str	r3, [r2, #0]
}
 80035e6:	bf00      	nop
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	200004d0 	.word	0x200004d0
 80035f4:	200003cc 	.word	0x200003cc
 80035f8:	200004d4 	.word	0x200004d4
 80035fc:	200004b8 	.word	0x200004b8
 8003600:	20000488 	.word	0x20000488
 8003604:	20000484 	.word	0x20000484
 8003608:	200004ec 	.word	0x200004ec

0800360c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	3b04      	subs	r3, #4
 800361c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003624:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	3b04      	subs	r3, #4
 800362a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	f023 0201 	bic.w	r2, r3, #1
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	3b04      	subs	r3, #4
 800363a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800363c:	4a08      	ldr	r2, [pc, #32]	@ (8003660 <pxPortInitialiseStack+0x54>)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	3b14      	subs	r3, #20
 8003646:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	3b20      	subs	r3, #32
 8003652:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003654:	68fb      	ldr	r3, [r7, #12]
}
 8003656:	4618      	mov	r0, r3
 8003658:	3714      	adds	r7, #20
 800365a:	46bd      	mov	sp, r7
 800365c:	bc80      	pop	{r7}
 800365e:	4770      	bx	lr
 8003660:	08003665 	.word	0x08003665

08003664 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800366a:	2300      	movs	r3, #0
 800366c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800366e:	4b12      	ldr	r3, [pc, #72]	@ (80036b8 <prvTaskExitError+0x54>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003676:	d00b      	beq.n	8003690 <prvTaskExitError+0x2c>
	__asm volatile
 8003678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800367c:	f383 8811 	msr	BASEPRI, r3
 8003680:	f3bf 8f6f 	isb	sy
 8003684:	f3bf 8f4f 	dsb	sy
 8003688:	60fb      	str	r3, [r7, #12]
}
 800368a:	bf00      	nop
 800368c:	bf00      	nop
 800368e:	e7fd      	b.n	800368c <prvTaskExitError+0x28>
	__asm volatile
 8003690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003694:	f383 8811 	msr	BASEPRI, r3
 8003698:	f3bf 8f6f 	isb	sy
 800369c:	f3bf 8f4f 	dsb	sy
 80036a0:	60bb      	str	r3, [r7, #8]
}
 80036a2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80036a4:	bf00      	nop
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0fc      	beq.n	80036a6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80036ac:	bf00      	nop
 80036ae:	bf00      	nop
 80036b0:	3714      	adds	r7, #20
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bc80      	pop	{r7}
 80036b6:	4770      	bx	lr
 80036b8:	2000000c 	.word	0x2000000c
 80036bc:	00000000 	.word	0x00000000

080036c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80036c0:	4b07      	ldr	r3, [pc, #28]	@ (80036e0 <pxCurrentTCBConst2>)
 80036c2:	6819      	ldr	r1, [r3, #0]
 80036c4:	6808      	ldr	r0, [r1, #0]
 80036c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80036ca:	f380 8809 	msr	PSP, r0
 80036ce:	f3bf 8f6f 	isb	sy
 80036d2:	f04f 0000 	mov.w	r0, #0
 80036d6:	f380 8811 	msr	BASEPRI, r0
 80036da:	f04e 0e0d 	orr.w	lr, lr, #13
 80036de:	4770      	bx	lr

080036e0 <pxCurrentTCBConst2>:
 80036e0:	200003cc 	.word	0x200003cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80036e4:	bf00      	nop
 80036e6:	bf00      	nop

080036e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80036e8:	4806      	ldr	r0, [pc, #24]	@ (8003704 <prvPortStartFirstTask+0x1c>)
 80036ea:	6800      	ldr	r0, [r0, #0]
 80036ec:	6800      	ldr	r0, [r0, #0]
 80036ee:	f380 8808 	msr	MSP, r0
 80036f2:	b662      	cpsie	i
 80036f4:	b661      	cpsie	f
 80036f6:	f3bf 8f4f 	dsb	sy
 80036fa:	f3bf 8f6f 	isb	sy
 80036fe:	df00      	svc	0
 8003700:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003702:	bf00      	nop
 8003704:	e000ed08 	.word	0xe000ed08

08003708 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800370e:	4b32      	ldr	r3, [pc, #200]	@ (80037d8 <xPortStartScheduler+0xd0>)
 8003710:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	b2db      	uxtb	r3, r3
 8003718:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	22ff      	movs	r2, #255	@ 0xff
 800371e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	b2db      	uxtb	r3, r3
 8003726:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003728:	78fb      	ldrb	r3, [r7, #3]
 800372a:	b2db      	uxtb	r3, r3
 800372c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003730:	b2da      	uxtb	r2, r3
 8003732:	4b2a      	ldr	r3, [pc, #168]	@ (80037dc <xPortStartScheduler+0xd4>)
 8003734:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003736:	4b2a      	ldr	r3, [pc, #168]	@ (80037e0 <xPortStartScheduler+0xd8>)
 8003738:	2207      	movs	r2, #7
 800373a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800373c:	e009      	b.n	8003752 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800373e:	4b28      	ldr	r3, [pc, #160]	@ (80037e0 <xPortStartScheduler+0xd8>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	3b01      	subs	r3, #1
 8003744:	4a26      	ldr	r2, [pc, #152]	@ (80037e0 <xPortStartScheduler+0xd8>)
 8003746:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003748:	78fb      	ldrb	r3, [r7, #3]
 800374a:	b2db      	uxtb	r3, r3
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	b2db      	uxtb	r3, r3
 8003750:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003752:	78fb      	ldrb	r3, [r7, #3]
 8003754:	b2db      	uxtb	r3, r3
 8003756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800375a:	2b80      	cmp	r3, #128	@ 0x80
 800375c:	d0ef      	beq.n	800373e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800375e:	4b20      	ldr	r3, [pc, #128]	@ (80037e0 <xPortStartScheduler+0xd8>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f1c3 0307 	rsb	r3, r3, #7
 8003766:	2b04      	cmp	r3, #4
 8003768:	d00b      	beq.n	8003782 <xPortStartScheduler+0x7a>
	__asm volatile
 800376a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800376e:	f383 8811 	msr	BASEPRI, r3
 8003772:	f3bf 8f6f 	isb	sy
 8003776:	f3bf 8f4f 	dsb	sy
 800377a:	60bb      	str	r3, [r7, #8]
}
 800377c:	bf00      	nop
 800377e:	bf00      	nop
 8003780:	e7fd      	b.n	800377e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003782:	4b17      	ldr	r3, [pc, #92]	@ (80037e0 <xPortStartScheduler+0xd8>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	021b      	lsls	r3, r3, #8
 8003788:	4a15      	ldr	r2, [pc, #84]	@ (80037e0 <xPortStartScheduler+0xd8>)
 800378a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800378c:	4b14      	ldr	r3, [pc, #80]	@ (80037e0 <xPortStartScheduler+0xd8>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003794:	4a12      	ldr	r2, [pc, #72]	@ (80037e0 <xPortStartScheduler+0xd8>)
 8003796:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	b2da      	uxtb	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80037a0:	4b10      	ldr	r3, [pc, #64]	@ (80037e4 <xPortStartScheduler+0xdc>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a0f      	ldr	r2, [pc, #60]	@ (80037e4 <xPortStartScheduler+0xdc>)
 80037a6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80037aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80037ac:	4b0d      	ldr	r3, [pc, #52]	@ (80037e4 <xPortStartScheduler+0xdc>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a0c      	ldr	r2, [pc, #48]	@ (80037e4 <xPortStartScheduler+0xdc>)
 80037b2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80037b6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80037b8:	f000 f8b8 	bl	800392c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80037bc:	4b0a      	ldr	r3, [pc, #40]	@ (80037e8 <xPortStartScheduler+0xe0>)
 80037be:	2200      	movs	r2, #0
 80037c0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80037c2:	f7ff ff91 	bl	80036e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80037c6:	f7ff fbc7 	bl	8002f58 <vTaskSwitchContext>
	prvTaskExitError();
 80037ca:	f7ff ff4b 	bl	8003664 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	e000e400 	.word	0xe000e400
 80037dc:	200004f8 	.word	0x200004f8
 80037e0:	200004fc 	.word	0x200004fc
 80037e4:	e000ed20 	.word	0xe000ed20
 80037e8:	2000000c 	.word	0x2000000c

080037ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
	__asm volatile
 80037f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037f6:	f383 8811 	msr	BASEPRI, r3
 80037fa:	f3bf 8f6f 	isb	sy
 80037fe:	f3bf 8f4f 	dsb	sy
 8003802:	607b      	str	r3, [r7, #4]
}
 8003804:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003806:	4b0f      	ldr	r3, [pc, #60]	@ (8003844 <vPortEnterCritical+0x58>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	3301      	adds	r3, #1
 800380c:	4a0d      	ldr	r2, [pc, #52]	@ (8003844 <vPortEnterCritical+0x58>)
 800380e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003810:	4b0c      	ldr	r3, [pc, #48]	@ (8003844 <vPortEnterCritical+0x58>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d110      	bne.n	800383a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003818:	4b0b      	ldr	r3, [pc, #44]	@ (8003848 <vPortEnterCritical+0x5c>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00b      	beq.n	800383a <vPortEnterCritical+0x4e>
	__asm volatile
 8003822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003826:	f383 8811 	msr	BASEPRI, r3
 800382a:	f3bf 8f6f 	isb	sy
 800382e:	f3bf 8f4f 	dsb	sy
 8003832:	603b      	str	r3, [r7, #0]
}
 8003834:	bf00      	nop
 8003836:	bf00      	nop
 8003838:	e7fd      	b.n	8003836 <vPortEnterCritical+0x4a>
	}
}
 800383a:	bf00      	nop
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	bc80      	pop	{r7}
 8003842:	4770      	bx	lr
 8003844:	2000000c 	.word	0x2000000c
 8003848:	e000ed04 	.word	0xe000ed04

0800384c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003852:	4b12      	ldr	r3, [pc, #72]	@ (800389c <vPortExitCritical+0x50>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10b      	bne.n	8003872 <vPortExitCritical+0x26>
	__asm volatile
 800385a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800385e:	f383 8811 	msr	BASEPRI, r3
 8003862:	f3bf 8f6f 	isb	sy
 8003866:	f3bf 8f4f 	dsb	sy
 800386a:	607b      	str	r3, [r7, #4]
}
 800386c:	bf00      	nop
 800386e:	bf00      	nop
 8003870:	e7fd      	b.n	800386e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003872:	4b0a      	ldr	r3, [pc, #40]	@ (800389c <vPortExitCritical+0x50>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	3b01      	subs	r3, #1
 8003878:	4a08      	ldr	r2, [pc, #32]	@ (800389c <vPortExitCritical+0x50>)
 800387a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800387c:	4b07      	ldr	r3, [pc, #28]	@ (800389c <vPortExitCritical+0x50>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d105      	bne.n	8003890 <vPortExitCritical+0x44>
 8003884:	2300      	movs	r3, #0
 8003886:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800388e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	bc80      	pop	{r7}
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	2000000c 	.word	0x2000000c

080038a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80038a0:	f3ef 8009 	mrs	r0, PSP
 80038a4:	f3bf 8f6f 	isb	sy
 80038a8:	4b0d      	ldr	r3, [pc, #52]	@ (80038e0 <pxCurrentTCBConst>)
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80038b0:	6010      	str	r0, [r2, #0]
 80038b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80038b6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80038ba:	f380 8811 	msr	BASEPRI, r0
 80038be:	f7ff fb4b 	bl	8002f58 <vTaskSwitchContext>
 80038c2:	f04f 0000 	mov.w	r0, #0
 80038c6:	f380 8811 	msr	BASEPRI, r0
 80038ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80038ce:	6819      	ldr	r1, [r3, #0]
 80038d0:	6808      	ldr	r0, [r1, #0]
 80038d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80038d6:	f380 8809 	msr	PSP, r0
 80038da:	f3bf 8f6f 	isb	sy
 80038de:	4770      	bx	lr

080038e0 <pxCurrentTCBConst>:
 80038e0:	200003cc 	.word	0x200003cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80038e4:	bf00      	nop
 80038e6:	bf00      	nop

080038e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
	__asm volatile
 80038ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038f2:	f383 8811 	msr	BASEPRI, r3
 80038f6:	f3bf 8f6f 	isb	sy
 80038fa:	f3bf 8f4f 	dsb	sy
 80038fe:	607b      	str	r3, [r7, #4]
}
 8003900:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003902:	f7ff fa6f 	bl	8002de4 <xTaskIncrementTick>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d003      	beq.n	8003914 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800390c:	4b06      	ldr	r3, [pc, #24]	@ (8003928 <SysTick_Handler+0x40>)
 800390e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	2300      	movs	r3, #0
 8003916:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	f383 8811 	msr	BASEPRI, r3
}
 800391e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003920:	bf00      	nop
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	e000ed04 	.word	0xe000ed04

0800392c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003930:	4b08      	ldr	r3, [pc, #32]	@ (8003954 <vPortSetupTimerInterrupt+0x28>)
 8003932:	2200      	movs	r2, #0
 8003934:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003936:	4b08      	ldr	r3, [pc, #32]	@ (8003958 <vPortSetupTimerInterrupt+0x2c>)
 8003938:	2200      	movs	r2, #0
 800393a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800393c:	4b07      	ldr	r3, [pc, #28]	@ (800395c <vPortSetupTimerInterrupt+0x30>)
 800393e:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8003942:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003944:	4b03      	ldr	r3, [pc, #12]	@ (8003954 <vPortSetupTimerInterrupt+0x28>)
 8003946:	2207      	movs	r2, #7
 8003948:	601a      	str	r2, [r3, #0]
}
 800394a:	bf00      	nop
 800394c:	46bd      	mov	sp, r7
 800394e:	bc80      	pop	{r7}
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	e000e010 	.word	0xe000e010
 8003958:	e000e018 	.word	0xe000e018
 800395c:	e000e014 	.word	0xe000e014

08003960 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b08a      	sub	sp, #40	@ 0x28
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003968:	2300      	movs	r3, #0
 800396a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800396c:	f7ff f98e 	bl	8002c8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003970:	4b5c      	ldr	r3, [pc, #368]	@ (8003ae4 <pvPortMalloc+0x184>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d101      	bne.n	800397c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003978:	f000 f924 	bl	8003bc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800397c:	4b5a      	ldr	r3, [pc, #360]	@ (8003ae8 <pvPortMalloc+0x188>)
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4013      	ands	r3, r2
 8003984:	2b00      	cmp	r3, #0
 8003986:	f040 8095 	bne.w	8003ab4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d01e      	beq.n	80039ce <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003990:	2208      	movs	r2, #8
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4413      	add	r3, r2
 8003996:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d015      	beq.n	80039ce <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f023 0307 	bic.w	r3, r3, #7
 80039a8:	3308      	adds	r3, #8
 80039aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f003 0307 	and.w	r3, r3, #7
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00b      	beq.n	80039ce <pvPortMalloc+0x6e>
	__asm volatile
 80039b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ba:	f383 8811 	msr	BASEPRI, r3
 80039be:	f3bf 8f6f 	isb	sy
 80039c2:	f3bf 8f4f 	dsb	sy
 80039c6:	617b      	str	r3, [r7, #20]
}
 80039c8:	bf00      	nop
 80039ca:	bf00      	nop
 80039cc:	e7fd      	b.n	80039ca <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d06f      	beq.n	8003ab4 <pvPortMalloc+0x154>
 80039d4:	4b45      	ldr	r3, [pc, #276]	@ (8003aec <pvPortMalloc+0x18c>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d86a      	bhi.n	8003ab4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80039de:	4b44      	ldr	r3, [pc, #272]	@ (8003af0 <pvPortMalloc+0x190>)
 80039e0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80039e2:	4b43      	ldr	r3, [pc, #268]	@ (8003af0 <pvPortMalloc+0x190>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80039e8:	e004      	b.n	80039f4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80039ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80039ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80039f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d903      	bls.n	8003a06 <pvPortMalloc+0xa6>
 80039fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1f1      	bne.n	80039ea <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003a06:	4b37      	ldr	r3, [pc, #220]	@ (8003ae4 <pvPortMalloc+0x184>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d051      	beq.n	8003ab4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003a10:	6a3b      	ldr	r3, [r7, #32]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2208      	movs	r2, #8
 8003a16:	4413      	add	r3, r2
 8003a18:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	6a3b      	ldr	r3, [r7, #32]
 8003a20:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	1ad2      	subs	r2, r2, r3
 8003a2a:	2308      	movs	r3, #8
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d920      	bls.n	8003a74 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003a32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4413      	add	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	f003 0307 	and.w	r3, r3, #7
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00b      	beq.n	8003a5c <pvPortMalloc+0xfc>
	__asm volatile
 8003a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a48:	f383 8811 	msr	BASEPRI, r3
 8003a4c:	f3bf 8f6f 	isb	sy
 8003a50:	f3bf 8f4f 	dsb	sy
 8003a54:	613b      	str	r3, [r7, #16]
}
 8003a56:	bf00      	nop
 8003a58:	bf00      	nop
 8003a5a:	e7fd      	b.n	8003a58 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	1ad2      	subs	r2, r2, r3
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003a6e:	69b8      	ldr	r0, [r7, #24]
 8003a70:	f000 f90a 	bl	8003c88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003a74:	4b1d      	ldr	r3, [pc, #116]	@ (8003aec <pvPortMalloc+0x18c>)
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	4a1b      	ldr	r2, [pc, #108]	@ (8003aec <pvPortMalloc+0x18c>)
 8003a80:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003a82:	4b1a      	ldr	r3, [pc, #104]	@ (8003aec <pvPortMalloc+0x18c>)
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	4b1b      	ldr	r3, [pc, #108]	@ (8003af4 <pvPortMalloc+0x194>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d203      	bcs.n	8003a96 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003a8e:	4b17      	ldr	r3, [pc, #92]	@ (8003aec <pvPortMalloc+0x18c>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a18      	ldr	r2, [pc, #96]	@ (8003af4 <pvPortMalloc+0x194>)
 8003a94:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	4b13      	ldr	r3, [pc, #76]	@ (8003ae8 <pvPortMalloc+0x188>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003aaa:	4b13      	ldr	r3, [pc, #76]	@ (8003af8 <pvPortMalloc+0x198>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	3301      	adds	r3, #1
 8003ab0:	4a11      	ldr	r2, [pc, #68]	@ (8003af8 <pvPortMalloc+0x198>)
 8003ab2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003ab4:	f7ff f8f8 	bl	8002ca8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	f003 0307 	and.w	r3, r3, #7
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00b      	beq.n	8003ada <pvPortMalloc+0x17a>
	__asm volatile
 8003ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ac6:	f383 8811 	msr	BASEPRI, r3
 8003aca:	f3bf 8f6f 	isb	sy
 8003ace:	f3bf 8f4f 	dsb	sy
 8003ad2:	60fb      	str	r3, [r7, #12]
}
 8003ad4:	bf00      	nop
 8003ad6:	bf00      	nop
 8003ad8:	e7fd      	b.n	8003ad6 <pvPortMalloc+0x176>
	return pvReturn;
 8003ada:	69fb      	ldr	r3, [r7, #28]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3728      	adds	r7, #40	@ 0x28
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	20001108 	.word	0x20001108
 8003ae8:	2000111c 	.word	0x2000111c
 8003aec:	2000110c 	.word	0x2000110c
 8003af0:	20001100 	.word	0x20001100
 8003af4:	20001110 	.word	0x20001110
 8003af8:	20001114 	.word	0x20001114

08003afc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d04f      	beq.n	8003bae <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003b0e:	2308      	movs	r3, #8
 8003b10:	425b      	negs	r3, r3
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	4413      	add	r3, r2
 8003b16:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	4b25      	ldr	r3, [pc, #148]	@ (8003bb8 <vPortFree+0xbc>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4013      	ands	r3, r2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10b      	bne.n	8003b42 <vPortFree+0x46>
	__asm volatile
 8003b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b2e:	f383 8811 	msr	BASEPRI, r3
 8003b32:	f3bf 8f6f 	isb	sy
 8003b36:	f3bf 8f4f 	dsb	sy
 8003b3a:	60fb      	str	r3, [r7, #12]
}
 8003b3c:	bf00      	nop
 8003b3e:	bf00      	nop
 8003b40:	e7fd      	b.n	8003b3e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00b      	beq.n	8003b62 <vPortFree+0x66>
	__asm volatile
 8003b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b4e:	f383 8811 	msr	BASEPRI, r3
 8003b52:	f3bf 8f6f 	isb	sy
 8003b56:	f3bf 8f4f 	dsb	sy
 8003b5a:	60bb      	str	r3, [r7, #8]
}
 8003b5c:	bf00      	nop
 8003b5e:	bf00      	nop
 8003b60:	e7fd      	b.n	8003b5e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	4b14      	ldr	r3, [pc, #80]	@ (8003bb8 <vPortFree+0xbc>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d01e      	beq.n	8003bae <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d11a      	bne.n	8003bae <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	4b0e      	ldr	r3, [pc, #56]	@ (8003bb8 <vPortFree+0xbc>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	43db      	mvns	r3, r3
 8003b82:	401a      	ands	r2, r3
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003b88:	f7ff f880 	bl	8002c8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	4b0a      	ldr	r3, [pc, #40]	@ (8003bbc <vPortFree+0xc0>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4413      	add	r3, r2
 8003b96:	4a09      	ldr	r2, [pc, #36]	@ (8003bbc <vPortFree+0xc0>)
 8003b98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003b9a:	6938      	ldr	r0, [r7, #16]
 8003b9c:	f000 f874 	bl	8003c88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003ba0:	4b07      	ldr	r3, [pc, #28]	@ (8003bc0 <vPortFree+0xc4>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	4a06      	ldr	r2, [pc, #24]	@ (8003bc0 <vPortFree+0xc4>)
 8003ba8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003baa:	f7ff f87d 	bl	8002ca8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003bae:	bf00      	nop
 8003bb0:	3718      	adds	r7, #24
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	2000111c 	.word	0x2000111c
 8003bbc:	2000110c 	.word	0x2000110c
 8003bc0:	20001118 	.word	0x20001118

08003bc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003bca:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003bce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003bd0:	4b27      	ldr	r3, [pc, #156]	@ (8003c70 <prvHeapInit+0xac>)
 8003bd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f003 0307 	and.w	r3, r3, #7
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00c      	beq.n	8003bf8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	3307      	adds	r3, #7
 8003be2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f023 0307 	bic.w	r3, r3, #7
 8003bea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	4a1f      	ldr	r2, [pc, #124]	@ (8003c70 <prvHeapInit+0xac>)
 8003bf4:	4413      	add	r3, r2
 8003bf6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003bfc:	4a1d      	ldr	r2, [pc, #116]	@ (8003c74 <prvHeapInit+0xb0>)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003c02:	4b1c      	ldr	r3, [pc, #112]	@ (8003c74 <prvHeapInit+0xb0>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	68ba      	ldr	r2, [r7, #8]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003c10:	2208      	movs	r2, #8
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	1a9b      	subs	r3, r3, r2
 8003c16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f023 0307 	bic.w	r3, r3, #7
 8003c1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	4a15      	ldr	r2, [pc, #84]	@ (8003c78 <prvHeapInit+0xb4>)
 8003c24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003c26:	4b14      	ldr	r3, [pc, #80]	@ (8003c78 <prvHeapInit+0xb4>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003c2e:	4b12      	ldr	r3, [pc, #72]	@ (8003c78 <prvHeapInit+0xb4>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2200      	movs	r2, #0
 8003c34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	1ad2      	subs	r2, r2, r3
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003c44:	4b0c      	ldr	r3, [pc, #48]	@ (8003c78 <prvHeapInit+0xb4>)
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	4a0a      	ldr	r2, [pc, #40]	@ (8003c7c <prvHeapInit+0xb8>)
 8003c52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	4a09      	ldr	r2, [pc, #36]	@ (8003c80 <prvHeapInit+0xbc>)
 8003c5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003c5c:	4b09      	ldr	r3, [pc, #36]	@ (8003c84 <prvHeapInit+0xc0>)
 8003c5e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003c62:	601a      	str	r2, [r3, #0]
}
 8003c64:	bf00      	nop
 8003c66:	3714      	adds	r7, #20
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bc80      	pop	{r7}
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	20000500 	.word	0x20000500
 8003c74:	20001100 	.word	0x20001100
 8003c78:	20001108 	.word	0x20001108
 8003c7c:	20001110 	.word	0x20001110
 8003c80:	2000110c 	.word	0x2000110c
 8003c84:	2000111c 	.word	0x2000111c

08003c88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003c90:	4b27      	ldr	r3, [pc, #156]	@ (8003d30 <prvInsertBlockIntoFreeList+0xa8>)
 8003c92:	60fb      	str	r3, [r7, #12]
 8003c94:	e002      	b.n	8003c9c <prvInsertBlockIntoFreeList+0x14>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	60fb      	str	r3, [r7, #12]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d8f7      	bhi.n	8003c96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	68ba      	ldr	r2, [r7, #8]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d108      	bne.n	8003cca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	441a      	add	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	68ba      	ldr	r2, [r7, #8]
 8003cd4:	441a      	add	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d118      	bne.n	8003d10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	4b14      	ldr	r3, [pc, #80]	@ (8003d34 <prvInsertBlockIntoFreeList+0xac>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d00d      	beq.n	8003d06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	441a      	add	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	e008      	b.n	8003d18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003d06:	4b0b      	ldr	r3, [pc, #44]	@ (8003d34 <prvInsertBlockIntoFreeList+0xac>)
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	601a      	str	r2, [r3, #0]
 8003d0e:	e003      	b.n	8003d18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d002      	beq.n	8003d26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d26:	bf00      	nop
 8003d28:	3714      	adds	r7, #20
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bc80      	pop	{r7}
 8003d2e:	4770      	bx	lr
 8003d30:	20001100 	.word	0x20001100
 8003d34:	20001108 	.word	0x20001108

08003d38 <siprintf>:
 8003d38:	b40e      	push	{r1, r2, r3}
 8003d3a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003d3e:	b510      	push	{r4, lr}
 8003d40:	2400      	movs	r4, #0
 8003d42:	b09d      	sub	sp, #116	@ 0x74
 8003d44:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003d46:	9002      	str	r0, [sp, #8]
 8003d48:	9006      	str	r0, [sp, #24]
 8003d4a:	9107      	str	r1, [sp, #28]
 8003d4c:	9104      	str	r1, [sp, #16]
 8003d4e:	4809      	ldr	r0, [pc, #36]	@ (8003d74 <siprintf+0x3c>)
 8003d50:	4909      	ldr	r1, [pc, #36]	@ (8003d78 <siprintf+0x40>)
 8003d52:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d56:	9105      	str	r1, [sp, #20]
 8003d58:	6800      	ldr	r0, [r0, #0]
 8003d5a:	a902      	add	r1, sp, #8
 8003d5c:	9301      	str	r3, [sp, #4]
 8003d5e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003d60:	f000 f9fe 	bl	8004160 <_svfiprintf_r>
 8003d64:	9b02      	ldr	r3, [sp, #8]
 8003d66:	701c      	strb	r4, [r3, #0]
 8003d68:	b01d      	add	sp, #116	@ 0x74
 8003d6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d6e:	b003      	add	sp, #12
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	20000010 	.word	0x20000010
 8003d78:	ffff0208 	.word	0xffff0208

08003d7c <memset>:
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	4402      	add	r2, r0
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d100      	bne.n	8003d86 <memset+0xa>
 8003d84:	4770      	bx	lr
 8003d86:	f803 1b01 	strb.w	r1, [r3], #1
 8003d8a:	e7f9      	b.n	8003d80 <memset+0x4>

08003d8c <_reclaim_reent>:
 8003d8c:	4b2d      	ldr	r3, [pc, #180]	@ (8003e44 <_reclaim_reent+0xb8>)
 8003d8e:	b570      	push	{r4, r5, r6, lr}
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4604      	mov	r4, r0
 8003d94:	4283      	cmp	r3, r0
 8003d96:	d053      	beq.n	8003e40 <_reclaim_reent+0xb4>
 8003d98:	69c3      	ldr	r3, [r0, #28]
 8003d9a:	b31b      	cbz	r3, 8003de4 <_reclaim_reent+0x58>
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	b163      	cbz	r3, 8003dba <_reclaim_reent+0x2e>
 8003da0:	2500      	movs	r5, #0
 8003da2:	69e3      	ldr	r3, [r4, #28]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	5959      	ldr	r1, [r3, r5]
 8003da8:	b9b1      	cbnz	r1, 8003dd8 <_reclaim_reent+0x4c>
 8003daa:	3504      	adds	r5, #4
 8003dac:	2d80      	cmp	r5, #128	@ 0x80
 8003dae:	d1f8      	bne.n	8003da2 <_reclaim_reent+0x16>
 8003db0:	69e3      	ldr	r3, [r4, #28]
 8003db2:	4620      	mov	r0, r4
 8003db4:	68d9      	ldr	r1, [r3, #12]
 8003db6:	f000 f881 	bl	8003ebc <_free_r>
 8003dba:	69e3      	ldr	r3, [r4, #28]
 8003dbc:	6819      	ldr	r1, [r3, #0]
 8003dbe:	b111      	cbz	r1, 8003dc6 <_reclaim_reent+0x3a>
 8003dc0:	4620      	mov	r0, r4
 8003dc2:	f000 f87b 	bl	8003ebc <_free_r>
 8003dc6:	69e3      	ldr	r3, [r4, #28]
 8003dc8:	689d      	ldr	r5, [r3, #8]
 8003dca:	b15d      	cbz	r5, 8003de4 <_reclaim_reent+0x58>
 8003dcc:	4629      	mov	r1, r5
 8003dce:	4620      	mov	r0, r4
 8003dd0:	682d      	ldr	r5, [r5, #0]
 8003dd2:	f000 f873 	bl	8003ebc <_free_r>
 8003dd6:	e7f8      	b.n	8003dca <_reclaim_reent+0x3e>
 8003dd8:	680e      	ldr	r6, [r1, #0]
 8003dda:	4620      	mov	r0, r4
 8003ddc:	f000 f86e 	bl	8003ebc <_free_r>
 8003de0:	4631      	mov	r1, r6
 8003de2:	e7e1      	b.n	8003da8 <_reclaim_reent+0x1c>
 8003de4:	6961      	ldr	r1, [r4, #20]
 8003de6:	b111      	cbz	r1, 8003dee <_reclaim_reent+0x62>
 8003de8:	4620      	mov	r0, r4
 8003dea:	f000 f867 	bl	8003ebc <_free_r>
 8003dee:	69e1      	ldr	r1, [r4, #28]
 8003df0:	b111      	cbz	r1, 8003df8 <_reclaim_reent+0x6c>
 8003df2:	4620      	mov	r0, r4
 8003df4:	f000 f862 	bl	8003ebc <_free_r>
 8003df8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003dfa:	b111      	cbz	r1, 8003e02 <_reclaim_reent+0x76>
 8003dfc:	4620      	mov	r0, r4
 8003dfe:	f000 f85d 	bl	8003ebc <_free_r>
 8003e02:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003e04:	b111      	cbz	r1, 8003e0c <_reclaim_reent+0x80>
 8003e06:	4620      	mov	r0, r4
 8003e08:	f000 f858 	bl	8003ebc <_free_r>
 8003e0c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8003e0e:	b111      	cbz	r1, 8003e16 <_reclaim_reent+0x8a>
 8003e10:	4620      	mov	r0, r4
 8003e12:	f000 f853 	bl	8003ebc <_free_r>
 8003e16:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8003e18:	b111      	cbz	r1, 8003e20 <_reclaim_reent+0x94>
 8003e1a:	4620      	mov	r0, r4
 8003e1c:	f000 f84e 	bl	8003ebc <_free_r>
 8003e20:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003e22:	b111      	cbz	r1, 8003e2a <_reclaim_reent+0x9e>
 8003e24:	4620      	mov	r0, r4
 8003e26:	f000 f849 	bl	8003ebc <_free_r>
 8003e2a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003e2c:	b111      	cbz	r1, 8003e34 <_reclaim_reent+0xa8>
 8003e2e:	4620      	mov	r0, r4
 8003e30:	f000 f844 	bl	8003ebc <_free_r>
 8003e34:	6a23      	ldr	r3, [r4, #32]
 8003e36:	b11b      	cbz	r3, 8003e40 <_reclaim_reent+0xb4>
 8003e38:	4620      	mov	r0, r4
 8003e3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003e3e:	4718      	bx	r3
 8003e40:	bd70      	pop	{r4, r5, r6, pc}
 8003e42:	bf00      	nop
 8003e44:	20000010 	.word	0x20000010

08003e48 <__errno>:
 8003e48:	4b01      	ldr	r3, [pc, #4]	@ (8003e50 <__errno+0x8>)
 8003e4a:	6818      	ldr	r0, [r3, #0]
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	20000010 	.word	0x20000010

08003e54 <__libc_init_array>:
 8003e54:	b570      	push	{r4, r5, r6, lr}
 8003e56:	2600      	movs	r6, #0
 8003e58:	4d0c      	ldr	r5, [pc, #48]	@ (8003e8c <__libc_init_array+0x38>)
 8003e5a:	4c0d      	ldr	r4, [pc, #52]	@ (8003e90 <__libc_init_array+0x3c>)
 8003e5c:	1b64      	subs	r4, r4, r5
 8003e5e:	10a4      	asrs	r4, r4, #2
 8003e60:	42a6      	cmp	r6, r4
 8003e62:	d109      	bne.n	8003e78 <__libc_init_array+0x24>
 8003e64:	f000 fc76 	bl	8004754 <_init>
 8003e68:	2600      	movs	r6, #0
 8003e6a:	4d0a      	ldr	r5, [pc, #40]	@ (8003e94 <__libc_init_array+0x40>)
 8003e6c:	4c0a      	ldr	r4, [pc, #40]	@ (8003e98 <__libc_init_array+0x44>)
 8003e6e:	1b64      	subs	r4, r4, r5
 8003e70:	10a4      	asrs	r4, r4, #2
 8003e72:	42a6      	cmp	r6, r4
 8003e74:	d105      	bne.n	8003e82 <__libc_init_array+0x2e>
 8003e76:	bd70      	pop	{r4, r5, r6, pc}
 8003e78:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e7c:	4798      	blx	r3
 8003e7e:	3601      	adds	r6, #1
 8003e80:	e7ee      	b.n	8003e60 <__libc_init_array+0xc>
 8003e82:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e86:	4798      	blx	r3
 8003e88:	3601      	adds	r6, #1
 8003e8a:	e7f2      	b.n	8003e72 <__libc_init_array+0x1e>
 8003e8c:	08004978 	.word	0x08004978
 8003e90:	08004978 	.word	0x08004978
 8003e94:	08004978 	.word	0x08004978
 8003e98:	0800497c 	.word	0x0800497c

08003e9c <__retarget_lock_acquire_recursive>:
 8003e9c:	4770      	bx	lr

08003e9e <__retarget_lock_release_recursive>:
 8003e9e:	4770      	bx	lr

08003ea0 <memcpy>:
 8003ea0:	440a      	add	r2, r1
 8003ea2:	4291      	cmp	r1, r2
 8003ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ea8:	d100      	bne.n	8003eac <memcpy+0xc>
 8003eaa:	4770      	bx	lr
 8003eac:	b510      	push	{r4, lr}
 8003eae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003eb2:	4291      	cmp	r1, r2
 8003eb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003eb8:	d1f9      	bne.n	8003eae <memcpy+0xe>
 8003eba:	bd10      	pop	{r4, pc}

08003ebc <_free_r>:
 8003ebc:	b538      	push	{r3, r4, r5, lr}
 8003ebe:	4605      	mov	r5, r0
 8003ec0:	2900      	cmp	r1, #0
 8003ec2:	d040      	beq.n	8003f46 <_free_r+0x8a>
 8003ec4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ec8:	1f0c      	subs	r4, r1, #4
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	bfb8      	it	lt
 8003ece:	18e4      	addlt	r4, r4, r3
 8003ed0:	f000 f8de 	bl	8004090 <__malloc_lock>
 8003ed4:	4a1c      	ldr	r2, [pc, #112]	@ (8003f48 <_free_r+0x8c>)
 8003ed6:	6813      	ldr	r3, [r2, #0]
 8003ed8:	b933      	cbnz	r3, 8003ee8 <_free_r+0x2c>
 8003eda:	6063      	str	r3, [r4, #4]
 8003edc:	6014      	str	r4, [r2, #0]
 8003ede:	4628      	mov	r0, r5
 8003ee0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ee4:	f000 b8da 	b.w	800409c <__malloc_unlock>
 8003ee8:	42a3      	cmp	r3, r4
 8003eea:	d908      	bls.n	8003efe <_free_r+0x42>
 8003eec:	6820      	ldr	r0, [r4, #0]
 8003eee:	1821      	adds	r1, r4, r0
 8003ef0:	428b      	cmp	r3, r1
 8003ef2:	bf01      	itttt	eq
 8003ef4:	6819      	ldreq	r1, [r3, #0]
 8003ef6:	685b      	ldreq	r3, [r3, #4]
 8003ef8:	1809      	addeq	r1, r1, r0
 8003efa:	6021      	streq	r1, [r4, #0]
 8003efc:	e7ed      	b.n	8003eda <_free_r+0x1e>
 8003efe:	461a      	mov	r2, r3
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	b10b      	cbz	r3, 8003f08 <_free_r+0x4c>
 8003f04:	42a3      	cmp	r3, r4
 8003f06:	d9fa      	bls.n	8003efe <_free_r+0x42>
 8003f08:	6811      	ldr	r1, [r2, #0]
 8003f0a:	1850      	adds	r0, r2, r1
 8003f0c:	42a0      	cmp	r0, r4
 8003f0e:	d10b      	bne.n	8003f28 <_free_r+0x6c>
 8003f10:	6820      	ldr	r0, [r4, #0]
 8003f12:	4401      	add	r1, r0
 8003f14:	1850      	adds	r0, r2, r1
 8003f16:	4283      	cmp	r3, r0
 8003f18:	6011      	str	r1, [r2, #0]
 8003f1a:	d1e0      	bne.n	8003ede <_free_r+0x22>
 8003f1c:	6818      	ldr	r0, [r3, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	4408      	add	r0, r1
 8003f22:	6010      	str	r0, [r2, #0]
 8003f24:	6053      	str	r3, [r2, #4]
 8003f26:	e7da      	b.n	8003ede <_free_r+0x22>
 8003f28:	d902      	bls.n	8003f30 <_free_r+0x74>
 8003f2a:	230c      	movs	r3, #12
 8003f2c:	602b      	str	r3, [r5, #0]
 8003f2e:	e7d6      	b.n	8003ede <_free_r+0x22>
 8003f30:	6820      	ldr	r0, [r4, #0]
 8003f32:	1821      	adds	r1, r4, r0
 8003f34:	428b      	cmp	r3, r1
 8003f36:	bf01      	itttt	eq
 8003f38:	6819      	ldreq	r1, [r3, #0]
 8003f3a:	685b      	ldreq	r3, [r3, #4]
 8003f3c:	1809      	addeq	r1, r1, r0
 8003f3e:	6021      	streq	r1, [r4, #0]
 8003f40:	6063      	str	r3, [r4, #4]
 8003f42:	6054      	str	r4, [r2, #4]
 8003f44:	e7cb      	b.n	8003ede <_free_r+0x22>
 8003f46:	bd38      	pop	{r3, r4, r5, pc}
 8003f48:	20001264 	.word	0x20001264

08003f4c <sbrk_aligned>:
 8003f4c:	b570      	push	{r4, r5, r6, lr}
 8003f4e:	4e0f      	ldr	r6, [pc, #60]	@ (8003f8c <sbrk_aligned+0x40>)
 8003f50:	460c      	mov	r4, r1
 8003f52:	6831      	ldr	r1, [r6, #0]
 8003f54:	4605      	mov	r5, r0
 8003f56:	b911      	cbnz	r1, 8003f5e <sbrk_aligned+0x12>
 8003f58:	f000 fba8 	bl	80046ac <_sbrk_r>
 8003f5c:	6030      	str	r0, [r6, #0]
 8003f5e:	4621      	mov	r1, r4
 8003f60:	4628      	mov	r0, r5
 8003f62:	f000 fba3 	bl	80046ac <_sbrk_r>
 8003f66:	1c43      	adds	r3, r0, #1
 8003f68:	d103      	bne.n	8003f72 <sbrk_aligned+0x26>
 8003f6a:	f04f 34ff 	mov.w	r4, #4294967295
 8003f6e:	4620      	mov	r0, r4
 8003f70:	bd70      	pop	{r4, r5, r6, pc}
 8003f72:	1cc4      	adds	r4, r0, #3
 8003f74:	f024 0403 	bic.w	r4, r4, #3
 8003f78:	42a0      	cmp	r0, r4
 8003f7a:	d0f8      	beq.n	8003f6e <sbrk_aligned+0x22>
 8003f7c:	1a21      	subs	r1, r4, r0
 8003f7e:	4628      	mov	r0, r5
 8003f80:	f000 fb94 	bl	80046ac <_sbrk_r>
 8003f84:	3001      	adds	r0, #1
 8003f86:	d1f2      	bne.n	8003f6e <sbrk_aligned+0x22>
 8003f88:	e7ef      	b.n	8003f6a <sbrk_aligned+0x1e>
 8003f8a:	bf00      	nop
 8003f8c:	20001260 	.word	0x20001260

08003f90 <_malloc_r>:
 8003f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f94:	1ccd      	adds	r5, r1, #3
 8003f96:	f025 0503 	bic.w	r5, r5, #3
 8003f9a:	3508      	adds	r5, #8
 8003f9c:	2d0c      	cmp	r5, #12
 8003f9e:	bf38      	it	cc
 8003fa0:	250c      	movcc	r5, #12
 8003fa2:	2d00      	cmp	r5, #0
 8003fa4:	4606      	mov	r6, r0
 8003fa6:	db01      	blt.n	8003fac <_malloc_r+0x1c>
 8003fa8:	42a9      	cmp	r1, r5
 8003faa:	d904      	bls.n	8003fb6 <_malloc_r+0x26>
 8003fac:	230c      	movs	r3, #12
 8003fae:	6033      	str	r3, [r6, #0]
 8003fb0:	2000      	movs	r0, #0
 8003fb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fb6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800408c <_malloc_r+0xfc>
 8003fba:	f000 f869 	bl	8004090 <__malloc_lock>
 8003fbe:	f8d8 3000 	ldr.w	r3, [r8]
 8003fc2:	461c      	mov	r4, r3
 8003fc4:	bb44      	cbnz	r4, 8004018 <_malloc_r+0x88>
 8003fc6:	4629      	mov	r1, r5
 8003fc8:	4630      	mov	r0, r6
 8003fca:	f7ff ffbf 	bl	8003f4c <sbrk_aligned>
 8003fce:	1c43      	adds	r3, r0, #1
 8003fd0:	4604      	mov	r4, r0
 8003fd2:	d158      	bne.n	8004086 <_malloc_r+0xf6>
 8003fd4:	f8d8 4000 	ldr.w	r4, [r8]
 8003fd8:	4627      	mov	r7, r4
 8003fda:	2f00      	cmp	r7, #0
 8003fdc:	d143      	bne.n	8004066 <_malloc_r+0xd6>
 8003fde:	2c00      	cmp	r4, #0
 8003fe0:	d04b      	beq.n	800407a <_malloc_r+0xea>
 8003fe2:	6823      	ldr	r3, [r4, #0]
 8003fe4:	4639      	mov	r1, r7
 8003fe6:	4630      	mov	r0, r6
 8003fe8:	eb04 0903 	add.w	r9, r4, r3
 8003fec:	f000 fb5e 	bl	80046ac <_sbrk_r>
 8003ff0:	4581      	cmp	r9, r0
 8003ff2:	d142      	bne.n	800407a <_malloc_r+0xea>
 8003ff4:	6821      	ldr	r1, [r4, #0]
 8003ff6:	4630      	mov	r0, r6
 8003ff8:	1a6d      	subs	r5, r5, r1
 8003ffa:	4629      	mov	r1, r5
 8003ffc:	f7ff ffa6 	bl	8003f4c <sbrk_aligned>
 8004000:	3001      	adds	r0, #1
 8004002:	d03a      	beq.n	800407a <_malloc_r+0xea>
 8004004:	6823      	ldr	r3, [r4, #0]
 8004006:	442b      	add	r3, r5
 8004008:	6023      	str	r3, [r4, #0]
 800400a:	f8d8 3000 	ldr.w	r3, [r8]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	bb62      	cbnz	r2, 800406c <_malloc_r+0xdc>
 8004012:	f8c8 7000 	str.w	r7, [r8]
 8004016:	e00f      	b.n	8004038 <_malloc_r+0xa8>
 8004018:	6822      	ldr	r2, [r4, #0]
 800401a:	1b52      	subs	r2, r2, r5
 800401c:	d420      	bmi.n	8004060 <_malloc_r+0xd0>
 800401e:	2a0b      	cmp	r2, #11
 8004020:	d917      	bls.n	8004052 <_malloc_r+0xc2>
 8004022:	1961      	adds	r1, r4, r5
 8004024:	42a3      	cmp	r3, r4
 8004026:	6025      	str	r5, [r4, #0]
 8004028:	bf18      	it	ne
 800402a:	6059      	strne	r1, [r3, #4]
 800402c:	6863      	ldr	r3, [r4, #4]
 800402e:	bf08      	it	eq
 8004030:	f8c8 1000 	streq.w	r1, [r8]
 8004034:	5162      	str	r2, [r4, r5]
 8004036:	604b      	str	r3, [r1, #4]
 8004038:	4630      	mov	r0, r6
 800403a:	f000 f82f 	bl	800409c <__malloc_unlock>
 800403e:	f104 000b 	add.w	r0, r4, #11
 8004042:	1d23      	adds	r3, r4, #4
 8004044:	f020 0007 	bic.w	r0, r0, #7
 8004048:	1ac2      	subs	r2, r0, r3
 800404a:	bf1c      	itt	ne
 800404c:	1a1b      	subne	r3, r3, r0
 800404e:	50a3      	strne	r3, [r4, r2]
 8004050:	e7af      	b.n	8003fb2 <_malloc_r+0x22>
 8004052:	6862      	ldr	r2, [r4, #4]
 8004054:	42a3      	cmp	r3, r4
 8004056:	bf0c      	ite	eq
 8004058:	f8c8 2000 	streq.w	r2, [r8]
 800405c:	605a      	strne	r2, [r3, #4]
 800405e:	e7eb      	b.n	8004038 <_malloc_r+0xa8>
 8004060:	4623      	mov	r3, r4
 8004062:	6864      	ldr	r4, [r4, #4]
 8004064:	e7ae      	b.n	8003fc4 <_malloc_r+0x34>
 8004066:	463c      	mov	r4, r7
 8004068:	687f      	ldr	r7, [r7, #4]
 800406a:	e7b6      	b.n	8003fda <_malloc_r+0x4a>
 800406c:	461a      	mov	r2, r3
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	42a3      	cmp	r3, r4
 8004072:	d1fb      	bne.n	800406c <_malloc_r+0xdc>
 8004074:	2300      	movs	r3, #0
 8004076:	6053      	str	r3, [r2, #4]
 8004078:	e7de      	b.n	8004038 <_malloc_r+0xa8>
 800407a:	230c      	movs	r3, #12
 800407c:	4630      	mov	r0, r6
 800407e:	6033      	str	r3, [r6, #0]
 8004080:	f000 f80c 	bl	800409c <__malloc_unlock>
 8004084:	e794      	b.n	8003fb0 <_malloc_r+0x20>
 8004086:	6005      	str	r5, [r0, #0]
 8004088:	e7d6      	b.n	8004038 <_malloc_r+0xa8>
 800408a:	bf00      	nop
 800408c:	20001264 	.word	0x20001264

08004090 <__malloc_lock>:
 8004090:	4801      	ldr	r0, [pc, #4]	@ (8004098 <__malloc_lock+0x8>)
 8004092:	f7ff bf03 	b.w	8003e9c <__retarget_lock_acquire_recursive>
 8004096:	bf00      	nop
 8004098:	2000125c 	.word	0x2000125c

0800409c <__malloc_unlock>:
 800409c:	4801      	ldr	r0, [pc, #4]	@ (80040a4 <__malloc_unlock+0x8>)
 800409e:	f7ff befe 	b.w	8003e9e <__retarget_lock_release_recursive>
 80040a2:	bf00      	nop
 80040a4:	2000125c 	.word	0x2000125c

080040a8 <__ssputs_r>:
 80040a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040ac:	461f      	mov	r7, r3
 80040ae:	688e      	ldr	r6, [r1, #8]
 80040b0:	4682      	mov	sl, r0
 80040b2:	42be      	cmp	r6, r7
 80040b4:	460c      	mov	r4, r1
 80040b6:	4690      	mov	r8, r2
 80040b8:	680b      	ldr	r3, [r1, #0]
 80040ba:	d82d      	bhi.n	8004118 <__ssputs_r+0x70>
 80040bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80040c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80040c4:	d026      	beq.n	8004114 <__ssputs_r+0x6c>
 80040c6:	6965      	ldr	r5, [r4, #20]
 80040c8:	6909      	ldr	r1, [r1, #16]
 80040ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80040ce:	eba3 0901 	sub.w	r9, r3, r1
 80040d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80040d6:	1c7b      	adds	r3, r7, #1
 80040d8:	444b      	add	r3, r9
 80040da:	106d      	asrs	r5, r5, #1
 80040dc:	429d      	cmp	r5, r3
 80040de:	bf38      	it	cc
 80040e0:	461d      	movcc	r5, r3
 80040e2:	0553      	lsls	r3, r2, #21
 80040e4:	d527      	bpl.n	8004136 <__ssputs_r+0x8e>
 80040e6:	4629      	mov	r1, r5
 80040e8:	f7ff ff52 	bl	8003f90 <_malloc_r>
 80040ec:	4606      	mov	r6, r0
 80040ee:	b360      	cbz	r0, 800414a <__ssputs_r+0xa2>
 80040f0:	464a      	mov	r2, r9
 80040f2:	6921      	ldr	r1, [r4, #16]
 80040f4:	f7ff fed4 	bl	8003ea0 <memcpy>
 80040f8:	89a3      	ldrh	r3, [r4, #12]
 80040fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80040fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004102:	81a3      	strh	r3, [r4, #12]
 8004104:	6126      	str	r6, [r4, #16]
 8004106:	444e      	add	r6, r9
 8004108:	6026      	str	r6, [r4, #0]
 800410a:	463e      	mov	r6, r7
 800410c:	6165      	str	r5, [r4, #20]
 800410e:	eba5 0509 	sub.w	r5, r5, r9
 8004112:	60a5      	str	r5, [r4, #8]
 8004114:	42be      	cmp	r6, r7
 8004116:	d900      	bls.n	800411a <__ssputs_r+0x72>
 8004118:	463e      	mov	r6, r7
 800411a:	4632      	mov	r2, r6
 800411c:	4641      	mov	r1, r8
 800411e:	6820      	ldr	r0, [r4, #0]
 8004120:	f000 faaa 	bl	8004678 <memmove>
 8004124:	2000      	movs	r0, #0
 8004126:	68a3      	ldr	r3, [r4, #8]
 8004128:	1b9b      	subs	r3, r3, r6
 800412a:	60a3      	str	r3, [r4, #8]
 800412c:	6823      	ldr	r3, [r4, #0]
 800412e:	4433      	add	r3, r6
 8004130:	6023      	str	r3, [r4, #0]
 8004132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004136:	462a      	mov	r2, r5
 8004138:	f000 fad6 	bl	80046e8 <_realloc_r>
 800413c:	4606      	mov	r6, r0
 800413e:	2800      	cmp	r0, #0
 8004140:	d1e0      	bne.n	8004104 <__ssputs_r+0x5c>
 8004142:	4650      	mov	r0, sl
 8004144:	6921      	ldr	r1, [r4, #16]
 8004146:	f7ff feb9 	bl	8003ebc <_free_r>
 800414a:	230c      	movs	r3, #12
 800414c:	f8ca 3000 	str.w	r3, [sl]
 8004150:	89a3      	ldrh	r3, [r4, #12]
 8004152:	f04f 30ff 	mov.w	r0, #4294967295
 8004156:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800415a:	81a3      	strh	r3, [r4, #12]
 800415c:	e7e9      	b.n	8004132 <__ssputs_r+0x8a>
	...

08004160 <_svfiprintf_r>:
 8004160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004164:	4698      	mov	r8, r3
 8004166:	898b      	ldrh	r3, [r1, #12]
 8004168:	4607      	mov	r7, r0
 800416a:	061b      	lsls	r3, r3, #24
 800416c:	460d      	mov	r5, r1
 800416e:	4614      	mov	r4, r2
 8004170:	b09d      	sub	sp, #116	@ 0x74
 8004172:	d510      	bpl.n	8004196 <_svfiprintf_r+0x36>
 8004174:	690b      	ldr	r3, [r1, #16]
 8004176:	b973      	cbnz	r3, 8004196 <_svfiprintf_r+0x36>
 8004178:	2140      	movs	r1, #64	@ 0x40
 800417a:	f7ff ff09 	bl	8003f90 <_malloc_r>
 800417e:	6028      	str	r0, [r5, #0]
 8004180:	6128      	str	r0, [r5, #16]
 8004182:	b930      	cbnz	r0, 8004192 <_svfiprintf_r+0x32>
 8004184:	230c      	movs	r3, #12
 8004186:	603b      	str	r3, [r7, #0]
 8004188:	f04f 30ff 	mov.w	r0, #4294967295
 800418c:	b01d      	add	sp, #116	@ 0x74
 800418e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004192:	2340      	movs	r3, #64	@ 0x40
 8004194:	616b      	str	r3, [r5, #20]
 8004196:	2300      	movs	r3, #0
 8004198:	9309      	str	r3, [sp, #36]	@ 0x24
 800419a:	2320      	movs	r3, #32
 800419c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80041a0:	2330      	movs	r3, #48	@ 0x30
 80041a2:	f04f 0901 	mov.w	r9, #1
 80041a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80041aa:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004344 <_svfiprintf_r+0x1e4>
 80041ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80041b2:	4623      	mov	r3, r4
 80041b4:	469a      	mov	sl, r3
 80041b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041ba:	b10a      	cbz	r2, 80041c0 <_svfiprintf_r+0x60>
 80041bc:	2a25      	cmp	r2, #37	@ 0x25
 80041be:	d1f9      	bne.n	80041b4 <_svfiprintf_r+0x54>
 80041c0:	ebba 0b04 	subs.w	fp, sl, r4
 80041c4:	d00b      	beq.n	80041de <_svfiprintf_r+0x7e>
 80041c6:	465b      	mov	r3, fp
 80041c8:	4622      	mov	r2, r4
 80041ca:	4629      	mov	r1, r5
 80041cc:	4638      	mov	r0, r7
 80041ce:	f7ff ff6b 	bl	80040a8 <__ssputs_r>
 80041d2:	3001      	adds	r0, #1
 80041d4:	f000 80a7 	beq.w	8004326 <_svfiprintf_r+0x1c6>
 80041d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80041da:	445a      	add	r2, fp
 80041dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80041de:	f89a 3000 	ldrb.w	r3, [sl]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f000 809f 	beq.w	8004326 <_svfiprintf_r+0x1c6>
 80041e8:	2300      	movs	r3, #0
 80041ea:	f04f 32ff 	mov.w	r2, #4294967295
 80041ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041f2:	f10a 0a01 	add.w	sl, sl, #1
 80041f6:	9304      	str	r3, [sp, #16]
 80041f8:	9307      	str	r3, [sp, #28]
 80041fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80041fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8004200:	4654      	mov	r4, sl
 8004202:	2205      	movs	r2, #5
 8004204:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004208:	484e      	ldr	r0, [pc, #312]	@ (8004344 <_svfiprintf_r+0x1e4>)
 800420a:	f000 fa5f 	bl	80046cc <memchr>
 800420e:	9a04      	ldr	r2, [sp, #16]
 8004210:	b9d8      	cbnz	r0, 800424a <_svfiprintf_r+0xea>
 8004212:	06d0      	lsls	r0, r2, #27
 8004214:	bf44      	itt	mi
 8004216:	2320      	movmi	r3, #32
 8004218:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800421c:	0711      	lsls	r1, r2, #28
 800421e:	bf44      	itt	mi
 8004220:	232b      	movmi	r3, #43	@ 0x2b
 8004222:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004226:	f89a 3000 	ldrb.w	r3, [sl]
 800422a:	2b2a      	cmp	r3, #42	@ 0x2a
 800422c:	d015      	beq.n	800425a <_svfiprintf_r+0xfa>
 800422e:	4654      	mov	r4, sl
 8004230:	2000      	movs	r0, #0
 8004232:	f04f 0c0a 	mov.w	ip, #10
 8004236:	9a07      	ldr	r2, [sp, #28]
 8004238:	4621      	mov	r1, r4
 800423a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800423e:	3b30      	subs	r3, #48	@ 0x30
 8004240:	2b09      	cmp	r3, #9
 8004242:	d94b      	bls.n	80042dc <_svfiprintf_r+0x17c>
 8004244:	b1b0      	cbz	r0, 8004274 <_svfiprintf_r+0x114>
 8004246:	9207      	str	r2, [sp, #28]
 8004248:	e014      	b.n	8004274 <_svfiprintf_r+0x114>
 800424a:	eba0 0308 	sub.w	r3, r0, r8
 800424e:	fa09 f303 	lsl.w	r3, r9, r3
 8004252:	4313      	orrs	r3, r2
 8004254:	46a2      	mov	sl, r4
 8004256:	9304      	str	r3, [sp, #16]
 8004258:	e7d2      	b.n	8004200 <_svfiprintf_r+0xa0>
 800425a:	9b03      	ldr	r3, [sp, #12]
 800425c:	1d19      	adds	r1, r3, #4
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	9103      	str	r1, [sp, #12]
 8004262:	2b00      	cmp	r3, #0
 8004264:	bfbb      	ittet	lt
 8004266:	425b      	neglt	r3, r3
 8004268:	f042 0202 	orrlt.w	r2, r2, #2
 800426c:	9307      	strge	r3, [sp, #28]
 800426e:	9307      	strlt	r3, [sp, #28]
 8004270:	bfb8      	it	lt
 8004272:	9204      	strlt	r2, [sp, #16]
 8004274:	7823      	ldrb	r3, [r4, #0]
 8004276:	2b2e      	cmp	r3, #46	@ 0x2e
 8004278:	d10a      	bne.n	8004290 <_svfiprintf_r+0x130>
 800427a:	7863      	ldrb	r3, [r4, #1]
 800427c:	2b2a      	cmp	r3, #42	@ 0x2a
 800427e:	d132      	bne.n	80042e6 <_svfiprintf_r+0x186>
 8004280:	9b03      	ldr	r3, [sp, #12]
 8004282:	3402      	adds	r4, #2
 8004284:	1d1a      	adds	r2, r3, #4
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	9203      	str	r2, [sp, #12]
 800428a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800428e:	9305      	str	r3, [sp, #20]
 8004290:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004348 <_svfiprintf_r+0x1e8>
 8004294:	2203      	movs	r2, #3
 8004296:	4650      	mov	r0, sl
 8004298:	7821      	ldrb	r1, [r4, #0]
 800429a:	f000 fa17 	bl	80046cc <memchr>
 800429e:	b138      	cbz	r0, 80042b0 <_svfiprintf_r+0x150>
 80042a0:	2240      	movs	r2, #64	@ 0x40
 80042a2:	9b04      	ldr	r3, [sp, #16]
 80042a4:	eba0 000a 	sub.w	r0, r0, sl
 80042a8:	4082      	lsls	r2, r0
 80042aa:	4313      	orrs	r3, r2
 80042ac:	3401      	adds	r4, #1
 80042ae:	9304      	str	r3, [sp, #16]
 80042b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042b4:	2206      	movs	r2, #6
 80042b6:	4825      	ldr	r0, [pc, #148]	@ (800434c <_svfiprintf_r+0x1ec>)
 80042b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80042bc:	f000 fa06 	bl	80046cc <memchr>
 80042c0:	2800      	cmp	r0, #0
 80042c2:	d036      	beq.n	8004332 <_svfiprintf_r+0x1d2>
 80042c4:	4b22      	ldr	r3, [pc, #136]	@ (8004350 <_svfiprintf_r+0x1f0>)
 80042c6:	bb1b      	cbnz	r3, 8004310 <_svfiprintf_r+0x1b0>
 80042c8:	9b03      	ldr	r3, [sp, #12]
 80042ca:	3307      	adds	r3, #7
 80042cc:	f023 0307 	bic.w	r3, r3, #7
 80042d0:	3308      	adds	r3, #8
 80042d2:	9303      	str	r3, [sp, #12]
 80042d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042d6:	4433      	add	r3, r6
 80042d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80042da:	e76a      	b.n	80041b2 <_svfiprintf_r+0x52>
 80042dc:	460c      	mov	r4, r1
 80042de:	2001      	movs	r0, #1
 80042e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80042e4:	e7a8      	b.n	8004238 <_svfiprintf_r+0xd8>
 80042e6:	2300      	movs	r3, #0
 80042e8:	f04f 0c0a 	mov.w	ip, #10
 80042ec:	4619      	mov	r1, r3
 80042ee:	3401      	adds	r4, #1
 80042f0:	9305      	str	r3, [sp, #20]
 80042f2:	4620      	mov	r0, r4
 80042f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042f8:	3a30      	subs	r2, #48	@ 0x30
 80042fa:	2a09      	cmp	r2, #9
 80042fc:	d903      	bls.n	8004306 <_svfiprintf_r+0x1a6>
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d0c6      	beq.n	8004290 <_svfiprintf_r+0x130>
 8004302:	9105      	str	r1, [sp, #20]
 8004304:	e7c4      	b.n	8004290 <_svfiprintf_r+0x130>
 8004306:	4604      	mov	r4, r0
 8004308:	2301      	movs	r3, #1
 800430a:	fb0c 2101 	mla	r1, ip, r1, r2
 800430e:	e7f0      	b.n	80042f2 <_svfiprintf_r+0x192>
 8004310:	ab03      	add	r3, sp, #12
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	462a      	mov	r2, r5
 8004316:	4638      	mov	r0, r7
 8004318:	4b0e      	ldr	r3, [pc, #56]	@ (8004354 <_svfiprintf_r+0x1f4>)
 800431a:	a904      	add	r1, sp, #16
 800431c:	f3af 8000 	nop.w
 8004320:	1c42      	adds	r2, r0, #1
 8004322:	4606      	mov	r6, r0
 8004324:	d1d6      	bne.n	80042d4 <_svfiprintf_r+0x174>
 8004326:	89ab      	ldrh	r3, [r5, #12]
 8004328:	065b      	lsls	r3, r3, #25
 800432a:	f53f af2d 	bmi.w	8004188 <_svfiprintf_r+0x28>
 800432e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004330:	e72c      	b.n	800418c <_svfiprintf_r+0x2c>
 8004332:	ab03      	add	r3, sp, #12
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	462a      	mov	r2, r5
 8004338:	4638      	mov	r0, r7
 800433a:	4b06      	ldr	r3, [pc, #24]	@ (8004354 <_svfiprintf_r+0x1f4>)
 800433c:	a904      	add	r1, sp, #16
 800433e:	f000 f87d 	bl	800443c <_printf_i>
 8004342:	e7ed      	b.n	8004320 <_svfiprintf_r+0x1c0>
 8004344:	0800493a 	.word	0x0800493a
 8004348:	08004940 	.word	0x08004940
 800434c:	08004944 	.word	0x08004944
 8004350:	00000000 	.word	0x00000000
 8004354:	080040a9 	.word	0x080040a9

08004358 <_printf_common>:
 8004358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800435c:	4616      	mov	r6, r2
 800435e:	4698      	mov	r8, r3
 8004360:	688a      	ldr	r2, [r1, #8]
 8004362:	690b      	ldr	r3, [r1, #16]
 8004364:	4607      	mov	r7, r0
 8004366:	4293      	cmp	r3, r2
 8004368:	bfb8      	it	lt
 800436a:	4613      	movlt	r3, r2
 800436c:	6033      	str	r3, [r6, #0]
 800436e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004372:	460c      	mov	r4, r1
 8004374:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004378:	b10a      	cbz	r2, 800437e <_printf_common+0x26>
 800437a:	3301      	adds	r3, #1
 800437c:	6033      	str	r3, [r6, #0]
 800437e:	6823      	ldr	r3, [r4, #0]
 8004380:	0699      	lsls	r1, r3, #26
 8004382:	bf42      	ittt	mi
 8004384:	6833      	ldrmi	r3, [r6, #0]
 8004386:	3302      	addmi	r3, #2
 8004388:	6033      	strmi	r3, [r6, #0]
 800438a:	6825      	ldr	r5, [r4, #0]
 800438c:	f015 0506 	ands.w	r5, r5, #6
 8004390:	d106      	bne.n	80043a0 <_printf_common+0x48>
 8004392:	f104 0a19 	add.w	sl, r4, #25
 8004396:	68e3      	ldr	r3, [r4, #12]
 8004398:	6832      	ldr	r2, [r6, #0]
 800439a:	1a9b      	subs	r3, r3, r2
 800439c:	42ab      	cmp	r3, r5
 800439e:	dc2b      	bgt.n	80043f8 <_printf_common+0xa0>
 80043a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80043a4:	6822      	ldr	r2, [r4, #0]
 80043a6:	3b00      	subs	r3, #0
 80043a8:	bf18      	it	ne
 80043aa:	2301      	movne	r3, #1
 80043ac:	0692      	lsls	r2, r2, #26
 80043ae:	d430      	bmi.n	8004412 <_printf_common+0xba>
 80043b0:	4641      	mov	r1, r8
 80043b2:	4638      	mov	r0, r7
 80043b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80043b8:	47c8      	blx	r9
 80043ba:	3001      	adds	r0, #1
 80043bc:	d023      	beq.n	8004406 <_printf_common+0xae>
 80043be:	6823      	ldr	r3, [r4, #0]
 80043c0:	6922      	ldr	r2, [r4, #16]
 80043c2:	f003 0306 	and.w	r3, r3, #6
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	bf14      	ite	ne
 80043ca:	2500      	movne	r5, #0
 80043cc:	6833      	ldreq	r3, [r6, #0]
 80043ce:	f04f 0600 	mov.w	r6, #0
 80043d2:	bf08      	it	eq
 80043d4:	68e5      	ldreq	r5, [r4, #12]
 80043d6:	f104 041a 	add.w	r4, r4, #26
 80043da:	bf08      	it	eq
 80043dc:	1aed      	subeq	r5, r5, r3
 80043de:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80043e2:	bf08      	it	eq
 80043e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043e8:	4293      	cmp	r3, r2
 80043ea:	bfc4      	itt	gt
 80043ec:	1a9b      	subgt	r3, r3, r2
 80043ee:	18ed      	addgt	r5, r5, r3
 80043f0:	42b5      	cmp	r5, r6
 80043f2:	d11a      	bne.n	800442a <_printf_common+0xd2>
 80043f4:	2000      	movs	r0, #0
 80043f6:	e008      	b.n	800440a <_printf_common+0xb2>
 80043f8:	2301      	movs	r3, #1
 80043fa:	4652      	mov	r2, sl
 80043fc:	4641      	mov	r1, r8
 80043fe:	4638      	mov	r0, r7
 8004400:	47c8      	blx	r9
 8004402:	3001      	adds	r0, #1
 8004404:	d103      	bne.n	800440e <_printf_common+0xb6>
 8004406:	f04f 30ff 	mov.w	r0, #4294967295
 800440a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800440e:	3501      	adds	r5, #1
 8004410:	e7c1      	b.n	8004396 <_printf_common+0x3e>
 8004412:	2030      	movs	r0, #48	@ 0x30
 8004414:	18e1      	adds	r1, r4, r3
 8004416:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800441a:	1c5a      	adds	r2, r3, #1
 800441c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004420:	4422      	add	r2, r4
 8004422:	3302      	adds	r3, #2
 8004424:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004428:	e7c2      	b.n	80043b0 <_printf_common+0x58>
 800442a:	2301      	movs	r3, #1
 800442c:	4622      	mov	r2, r4
 800442e:	4641      	mov	r1, r8
 8004430:	4638      	mov	r0, r7
 8004432:	47c8      	blx	r9
 8004434:	3001      	adds	r0, #1
 8004436:	d0e6      	beq.n	8004406 <_printf_common+0xae>
 8004438:	3601      	adds	r6, #1
 800443a:	e7d9      	b.n	80043f0 <_printf_common+0x98>

0800443c <_printf_i>:
 800443c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004440:	7e0f      	ldrb	r7, [r1, #24]
 8004442:	4691      	mov	r9, r2
 8004444:	2f78      	cmp	r7, #120	@ 0x78
 8004446:	4680      	mov	r8, r0
 8004448:	460c      	mov	r4, r1
 800444a:	469a      	mov	sl, r3
 800444c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800444e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004452:	d807      	bhi.n	8004464 <_printf_i+0x28>
 8004454:	2f62      	cmp	r7, #98	@ 0x62
 8004456:	d80a      	bhi.n	800446e <_printf_i+0x32>
 8004458:	2f00      	cmp	r7, #0
 800445a:	f000 80d1 	beq.w	8004600 <_printf_i+0x1c4>
 800445e:	2f58      	cmp	r7, #88	@ 0x58
 8004460:	f000 80b8 	beq.w	80045d4 <_printf_i+0x198>
 8004464:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004468:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800446c:	e03a      	b.n	80044e4 <_printf_i+0xa8>
 800446e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004472:	2b15      	cmp	r3, #21
 8004474:	d8f6      	bhi.n	8004464 <_printf_i+0x28>
 8004476:	a101      	add	r1, pc, #4	@ (adr r1, 800447c <_printf_i+0x40>)
 8004478:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800447c:	080044d5 	.word	0x080044d5
 8004480:	080044e9 	.word	0x080044e9
 8004484:	08004465 	.word	0x08004465
 8004488:	08004465 	.word	0x08004465
 800448c:	08004465 	.word	0x08004465
 8004490:	08004465 	.word	0x08004465
 8004494:	080044e9 	.word	0x080044e9
 8004498:	08004465 	.word	0x08004465
 800449c:	08004465 	.word	0x08004465
 80044a0:	08004465 	.word	0x08004465
 80044a4:	08004465 	.word	0x08004465
 80044a8:	080045e7 	.word	0x080045e7
 80044ac:	08004513 	.word	0x08004513
 80044b0:	080045a1 	.word	0x080045a1
 80044b4:	08004465 	.word	0x08004465
 80044b8:	08004465 	.word	0x08004465
 80044bc:	08004609 	.word	0x08004609
 80044c0:	08004465 	.word	0x08004465
 80044c4:	08004513 	.word	0x08004513
 80044c8:	08004465 	.word	0x08004465
 80044cc:	08004465 	.word	0x08004465
 80044d0:	080045a9 	.word	0x080045a9
 80044d4:	6833      	ldr	r3, [r6, #0]
 80044d6:	1d1a      	adds	r2, r3, #4
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	6032      	str	r2, [r6, #0]
 80044dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80044e4:	2301      	movs	r3, #1
 80044e6:	e09c      	b.n	8004622 <_printf_i+0x1e6>
 80044e8:	6833      	ldr	r3, [r6, #0]
 80044ea:	6820      	ldr	r0, [r4, #0]
 80044ec:	1d19      	adds	r1, r3, #4
 80044ee:	6031      	str	r1, [r6, #0]
 80044f0:	0606      	lsls	r6, r0, #24
 80044f2:	d501      	bpl.n	80044f8 <_printf_i+0xbc>
 80044f4:	681d      	ldr	r5, [r3, #0]
 80044f6:	e003      	b.n	8004500 <_printf_i+0xc4>
 80044f8:	0645      	lsls	r5, r0, #25
 80044fa:	d5fb      	bpl.n	80044f4 <_printf_i+0xb8>
 80044fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004500:	2d00      	cmp	r5, #0
 8004502:	da03      	bge.n	800450c <_printf_i+0xd0>
 8004504:	232d      	movs	r3, #45	@ 0x2d
 8004506:	426d      	negs	r5, r5
 8004508:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800450c:	230a      	movs	r3, #10
 800450e:	4858      	ldr	r0, [pc, #352]	@ (8004670 <_printf_i+0x234>)
 8004510:	e011      	b.n	8004536 <_printf_i+0xfa>
 8004512:	6821      	ldr	r1, [r4, #0]
 8004514:	6833      	ldr	r3, [r6, #0]
 8004516:	0608      	lsls	r0, r1, #24
 8004518:	f853 5b04 	ldr.w	r5, [r3], #4
 800451c:	d402      	bmi.n	8004524 <_printf_i+0xe8>
 800451e:	0649      	lsls	r1, r1, #25
 8004520:	bf48      	it	mi
 8004522:	b2ad      	uxthmi	r5, r5
 8004524:	2f6f      	cmp	r7, #111	@ 0x6f
 8004526:	6033      	str	r3, [r6, #0]
 8004528:	bf14      	ite	ne
 800452a:	230a      	movne	r3, #10
 800452c:	2308      	moveq	r3, #8
 800452e:	4850      	ldr	r0, [pc, #320]	@ (8004670 <_printf_i+0x234>)
 8004530:	2100      	movs	r1, #0
 8004532:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004536:	6866      	ldr	r6, [r4, #4]
 8004538:	2e00      	cmp	r6, #0
 800453a:	60a6      	str	r6, [r4, #8]
 800453c:	db05      	blt.n	800454a <_printf_i+0x10e>
 800453e:	6821      	ldr	r1, [r4, #0]
 8004540:	432e      	orrs	r6, r5
 8004542:	f021 0104 	bic.w	r1, r1, #4
 8004546:	6021      	str	r1, [r4, #0]
 8004548:	d04b      	beq.n	80045e2 <_printf_i+0x1a6>
 800454a:	4616      	mov	r6, r2
 800454c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004550:	fb03 5711 	mls	r7, r3, r1, r5
 8004554:	5dc7      	ldrb	r7, [r0, r7]
 8004556:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800455a:	462f      	mov	r7, r5
 800455c:	42bb      	cmp	r3, r7
 800455e:	460d      	mov	r5, r1
 8004560:	d9f4      	bls.n	800454c <_printf_i+0x110>
 8004562:	2b08      	cmp	r3, #8
 8004564:	d10b      	bne.n	800457e <_printf_i+0x142>
 8004566:	6823      	ldr	r3, [r4, #0]
 8004568:	07df      	lsls	r7, r3, #31
 800456a:	d508      	bpl.n	800457e <_printf_i+0x142>
 800456c:	6923      	ldr	r3, [r4, #16]
 800456e:	6861      	ldr	r1, [r4, #4]
 8004570:	4299      	cmp	r1, r3
 8004572:	bfde      	ittt	le
 8004574:	2330      	movle	r3, #48	@ 0x30
 8004576:	f806 3c01 	strble.w	r3, [r6, #-1]
 800457a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800457e:	1b92      	subs	r2, r2, r6
 8004580:	6122      	str	r2, [r4, #16]
 8004582:	464b      	mov	r3, r9
 8004584:	4621      	mov	r1, r4
 8004586:	4640      	mov	r0, r8
 8004588:	f8cd a000 	str.w	sl, [sp]
 800458c:	aa03      	add	r2, sp, #12
 800458e:	f7ff fee3 	bl	8004358 <_printf_common>
 8004592:	3001      	adds	r0, #1
 8004594:	d14a      	bne.n	800462c <_printf_i+0x1f0>
 8004596:	f04f 30ff 	mov.w	r0, #4294967295
 800459a:	b004      	add	sp, #16
 800459c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045a0:	6823      	ldr	r3, [r4, #0]
 80045a2:	f043 0320 	orr.w	r3, r3, #32
 80045a6:	6023      	str	r3, [r4, #0]
 80045a8:	2778      	movs	r7, #120	@ 0x78
 80045aa:	4832      	ldr	r0, [pc, #200]	@ (8004674 <_printf_i+0x238>)
 80045ac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80045b0:	6823      	ldr	r3, [r4, #0]
 80045b2:	6831      	ldr	r1, [r6, #0]
 80045b4:	061f      	lsls	r7, r3, #24
 80045b6:	f851 5b04 	ldr.w	r5, [r1], #4
 80045ba:	d402      	bmi.n	80045c2 <_printf_i+0x186>
 80045bc:	065f      	lsls	r7, r3, #25
 80045be:	bf48      	it	mi
 80045c0:	b2ad      	uxthmi	r5, r5
 80045c2:	6031      	str	r1, [r6, #0]
 80045c4:	07d9      	lsls	r1, r3, #31
 80045c6:	bf44      	itt	mi
 80045c8:	f043 0320 	orrmi.w	r3, r3, #32
 80045cc:	6023      	strmi	r3, [r4, #0]
 80045ce:	b11d      	cbz	r5, 80045d8 <_printf_i+0x19c>
 80045d0:	2310      	movs	r3, #16
 80045d2:	e7ad      	b.n	8004530 <_printf_i+0xf4>
 80045d4:	4826      	ldr	r0, [pc, #152]	@ (8004670 <_printf_i+0x234>)
 80045d6:	e7e9      	b.n	80045ac <_printf_i+0x170>
 80045d8:	6823      	ldr	r3, [r4, #0]
 80045da:	f023 0320 	bic.w	r3, r3, #32
 80045de:	6023      	str	r3, [r4, #0]
 80045e0:	e7f6      	b.n	80045d0 <_printf_i+0x194>
 80045e2:	4616      	mov	r6, r2
 80045e4:	e7bd      	b.n	8004562 <_printf_i+0x126>
 80045e6:	6833      	ldr	r3, [r6, #0]
 80045e8:	6825      	ldr	r5, [r4, #0]
 80045ea:	1d18      	adds	r0, r3, #4
 80045ec:	6961      	ldr	r1, [r4, #20]
 80045ee:	6030      	str	r0, [r6, #0]
 80045f0:	062e      	lsls	r6, r5, #24
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	d501      	bpl.n	80045fa <_printf_i+0x1be>
 80045f6:	6019      	str	r1, [r3, #0]
 80045f8:	e002      	b.n	8004600 <_printf_i+0x1c4>
 80045fa:	0668      	lsls	r0, r5, #25
 80045fc:	d5fb      	bpl.n	80045f6 <_printf_i+0x1ba>
 80045fe:	8019      	strh	r1, [r3, #0]
 8004600:	2300      	movs	r3, #0
 8004602:	4616      	mov	r6, r2
 8004604:	6123      	str	r3, [r4, #16]
 8004606:	e7bc      	b.n	8004582 <_printf_i+0x146>
 8004608:	6833      	ldr	r3, [r6, #0]
 800460a:	2100      	movs	r1, #0
 800460c:	1d1a      	adds	r2, r3, #4
 800460e:	6032      	str	r2, [r6, #0]
 8004610:	681e      	ldr	r6, [r3, #0]
 8004612:	6862      	ldr	r2, [r4, #4]
 8004614:	4630      	mov	r0, r6
 8004616:	f000 f859 	bl	80046cc <memchr>
 800461a:	b108      	cbz	r0, 8004620 <_printf_i+0x1e4>
 800461c:	1b80      	subs	r0, r0, r6
 800461e:	6060      	str	r0, [r4, #4]
 8004620:	6863      	ldr	r3, [r4, #4]
 8004622:	6123      	str	r3, [r4, #16]
 8004624:	2300      	movs	r3, #0
 8004626:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800462a:	e7aa      	b.n	8004582 <_printf_i+0x146>
 800462c:	4632      	mov	r2, r6
 800462e:	4649      	mov	r1, r9
 8004630:	4640      	mov	r0, r8
 8004632:	6923      	ldr	r3, [r4, #16]
 8004634:	47d0      	blx	sl
 8004636:	3001      	adds	r0, #1
 8004638:	d0ad      	beq.n	8004596 <_printf_i+0x15a>
 800463a:	6823      	ldr	r3, [r4, #0]
 800463c:	079b      	lsls	r3, r3, #30
 800463e:	d413      	bmi.n	8004668 <_printf_i+0x22c>
 8004640:	68e0      	ldr	r0, [r4, #12]
 8004642:	9b03      	ldr	r3, [sp, #12]
 8004644:	4298      	cmp	r0, r3
 8004646:	bfb8      	it	lt
 8004648:	4618      	movlt	r0, r3
 800464a:	e7a6      	b.n	800459a <_printf_i+0x15e>
 800464c:	2301      	movs	r3, #1
 800464e:	4632      	mov	r2, r6
 8004650:	4649      	mov	r1, r9
 8004652:	4640      	mov	r0, r8
 8004654:	47d0      	blx	sl
 8004656:	3001      	adds	r0, #1
 8004658:	d09d      	beq.n	8004596 <_printf_i+0x15a>
 800465a:	3501      	adds	r5, #1
 800465c:	68e3      	ldr	r3, [r4, #12]
 800465e:	9903      	ldr	r1, [sp, #12]
 8004660:	1a5b      	subs	r3, r3, r1
 8004662:	42ab      	cmp	r3, r5
 8004664:	dcf2      	bgt.n	800464c <_printf_i+0x210>
 8004666:	e7eb      	b.n	8004640 <_printf_i+0x204>
 8004668:	2500      	movs	r5, #0
 800466a:	f104 0619 	add.w	r6, r4, #25
 800466e:	e7f5      	b.n	800465c <_printf_i+0x220>
 8004670:	0800494b 	.word	0x0800494b
 8004674:	0800495c 	.word	0x0800495c

08004678 <memmove>:
 8004678:	4288      	cmp	r0, r1
 800467a:	b510      	push	{r4, lr}
 800467c:	eb01 0402 	add.w	r4, r1, r2
 8004680:	d902      	bls.n	8004688 <memmove+0x10>
 8004682:	4284      	cmp	r4, r0
 8004684:	4623      	mov	r3, r4
 8004686:	d807      	bhi.n	8004698 <memmove+0x20>
 8004688:	1e43      	subs	r3, r0, #1
 800468a:	42a1      	cmp	r1, r4
 800468c:	d008      	beq.n	80046a0 <memmove+0x28>
 800468e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004692:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004696:	e7f8      	b.n	800468a <memmove+0x12>
 8004698:	4601      	mov	r1, r0
 800469a:	4402      	add	r2, r0
 800469c:	428a      	cmp	r2, r1
 800469e:	d100      	bne.n	80046a2 <memmove+0x2a>
 80046a0:	bd10      	pop	{r4, pc}
 80046a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80046a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80046aa:	e7f7      	b.n	800469c <memmove+0x24>

080046ac <_sbrk_r>:
 80046ac:	b538      	push	{r3, r4, r5, lr}
 80046ae:	2300      	movs	r3, #0
 80046b0:	4d05      	ldr	r5, [pc, #20]	@ (80046c8 <_sbrk_r+0x1c>)
 80046b2:	4604      	mov	r4, r0
 80046b4:	4608      	mov	r0, r1
 80046b6:	602b      	str	r3, [r5, #0]
 80046b8:	f7fc f8ae 	bl	8000818 <_sbrk>
 80046bc:	1c43      	adds	r3, r0, #1
 80046be:	d102      	bne.n	80046c6 <_sbrk_r+0x1a>
 80046c0:	682b      	ldr	r3, [r5, #0]
 80046c2:	b103      	cbz	r3, 80046c6 <_sbrk_r+0x1a>
 80046c4:	6023      	str	r3, [r4, #0]
 80046c6:	bd38      	pop	{r3, r4, r5, pc}
 80046c8:	20001258 	.word	0x20001258

080046cc <memchr>:
 80046cc:	4603      	mov	r3, r0
 80046ce:	b510      	push	{r4, lr}
 80046d0:	b2c9      	uxtb	r1, r1
 80046d2:	4402      	add	r2, r0
 80046d4:	4293      	cmp	r3, r2
 80046d6:	4618      	mov	r0, r3
 80046d8:	d101      	bne.n	80046de <memchr+0x12>
 80046da:	2000      	movs	r0, #0
 80046dc:	e003      	b.n	80046e6 <memchr+0x1a>
 80046de:	7804      	ldrb	r4, [r0, #0]
 80046e0:	3301      	adds	r3, #1
 80046e2:	428c      	cmp	r4, r1
 80046e4:	d1f6      	bne.n	80046d4 <memchr+0x8>
 80046e6:	bd10      	pop	{r4, pc}

080046e8 <_realloc_r>:
 80046e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046ec:	4607      	mov	r7, r0
 80046ee:	4614      	mov	r4, r2
 80046f0:	460d      	mov	r5, r1
 80046f2:	b921      	cbnz	r1, 80046fe <_realloc_r+0x16>
 80046f4:	4611      	mov	r1, r2
 80046f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046fa:	f7ff bc49 	b.w	8003f90 <_malloc_r>
 80046fe:	b92a      	cbnz	r2, 800470c <_realloc_r+0x24>
 8004700:	f7ff fbdc 	bl	8003ebc <_free_r>
 8004704:	4625      	mov	r5, r4
 8004706:	4628      	mov	r0, r5
 8004708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800470c:	f000 f81a 	bl	8004744 <_malloc_usable_size_r>
 8004710:	4284      	cmp	r4, r0
 8004712:	4606      	mov	r6, r0
 8004714:	d802      	bhi.n	800471c <_realloc_r+0x34>
 8004716:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800471a:	d8f4      	bhi.n	8004706 <_realloc_r+0x1e>
 800471c:	4621      	mov	r1, r4
 800471e:	4638      	mov	r0, r7
 8004720:	f7ff fc36 	bl	8003f90 <_malloc_r>
 8004724:	4680      	mov	r8, r0
 8004726:	b908      	cbnz	r0, 800472c <_realloc_r+0x44>
 8004728:	4645      	mov	r5, r8
 800472a:	e7ec      	b.n	8004706 <_realloc_r+0x1e>
 800472c:	42b4      	cmp	r4, r6
 800472e:	4622      	mov	r2, r4
 8004730:	4629      	mov	r1, r5
 8004732:	bf28      	it	cs
 8004734:	4632      	movcs	r2, r6
 8004736:	f7ff fbb3 	bl	8003ea0 <memcpy>
 800473a:	4629      	mov	r1, r5
 800473c:	4638      	mov	r0, r7
 800473e:	f7ff fbbd 	bl	8003ebc <_free_r>
 8004742:	e7f1      	b.n	8004728 <_realloc_r+0x40>

08004744 <_malloc_usable_size_r>:
 8004744:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004748:	1f18      	subs	r0, r3, #4
 800474a:	2b00      	cmp	r3, #0
 800474c:	bfbc      	itt	lt
 800474e:	580b      	ldrlt	r3, [r1, r0]
 8004750:	18c0      	addlt	r0, r0, r3
 8004752:	4770      	bx	lr

08004754 <_init>:
 8004754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004756:	bf00      	nop
 8004758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800475a:	bc08      	pop	{r3}
 800475c:	469e      	mov	lr, r3
 800475e:	4770      	bx	lr

08004760 <_fini>:
 8004760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004762:	bf00      	nop
 8004764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004766:	bc08      	pop	{r3}
 8004768:	469e      	mov	lr, r3
 800476a:	4770      	bx	lr
